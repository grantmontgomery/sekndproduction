{"ast":null,"code":"import useSWR from \"swr\";\nexport default function useAPICalls(setSearchParameters, urlStart) {\n  if (!setSearchParameters) return {\n    items: [],\n    loading: true,\n    errors: {\n      yelpEventsError: \"\",\n      yelpPlacesError: \"\",\n      ticketmasterError: \"\"\n    }\n  };\n  const {\n    data: yelpPlaces,\n    error: yelpPlacesError,\n    isValidating: yelpPlacesLoading\n  } = useSWR(setSearchParameters.searchType !== \"EVENTS\" ? `${urlStart}/api/yelpBusinessesAPI` : null, async url => {\n    const {\n      location,\n      radius,\n      placeType\n    } = setSearchParameters;\n\n    try {\n      console.log(url ? \"fetching yelp places\" : \"cancelled places fetch\");\n      const response = await fetch(url, {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          location,\n          radius: parseInt(radius),\n          term: placeType\n        })\n      });\n      const responseJSON = await response.json();\n      const {\n        businesses\n      } = responseJSON;\n      businesses.forEach(business => (business[\"type\"] = \"place\", business[\"source\"] = \"yelp\", business[\"inParts\"] = false));\n      return businesses;\n    } catch (err) {\n      return err.message;\n    }\n  }, {\n    revalidateOnFocus: false\n  });\n  const {\n    data: yelpEvents,\n    error: yelpEventsError,\n    isValidating: yelpEventsLoading\n  } = useSWR(setSearchParameters.searchType !== \"PLACES\" ? `${urlStart}/api/yelpEventsAPI` : null, async url => {\n    const {\n      location,\n      radius,\n      unixStartDate,\n      unixEndDate\n    } = setSearchParameters;\n\n    try {\n      console.log(url ? \"fetching yelp events\" : \"cancelled events fetch\");\n      const response = await fetch(url, {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          location,\n          radius: parseInt(radius),\n          start_date: parseInt(unixStartDate),\n          end_date: parseInt(unixEndDate)\n        })\n      });\n      const responseJSON = await response.json();\n      const {\n        events\n      } = responseJSON;\n      events.forEach(event => (event[\"type\"] = \"event\", event[\"source\"] = \"yelp\", event[\"inParts\"] = false));\n      return events;\n    } catch (err) {\n      return err.message;\n    }\n  }, {\n    revalidateOnFocus: false\n  });\n  const {\n    data: ticketmaster,\n    error: ticketmasterError,\n    isValidating: ticketmasterLoading\n  } = useSWR(setSearchParameters.searchType !== \"PLACES\" ? `${urlStart}/api/ticketmasterAPI` : null, async url => {\n    const {\n      location,\n      radius,\n      startFormatted,\n      endFormatted\n    } = setSearchParameters;\n\n    try {\n      console.log(url ? \"fetching yelp events\" : \"cancelled ticketmaster fetch\");\n      const response = await fetch(url, {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          location,\n          radius: Math.floor(parseInt(radius) * 0.001).toString(),\n          startDateTime: startFormatted,\n          endDateTime: endFormatted\n        })\n      });\n      const responseJSON = await response.json();\n      const {\n        _embedded: {\n          events\n        }\n      } = responseJSON;\n      events.forEach(event => (event[\"source\"] = \"ticketmaster\", event[\"type\"] = \"event\", event[\"inParts\"] = false));\n      return events;\n    } catch (err) {\n      return err.message;\n    }\n  }, {\n    revalidateOnFocus: false\n  });\n  const checkYelpPlacesArray = Array.isArray(yelpPlaces) ? yelpPlaces : [];\n  const checkYelpEventsArray = Array.isArray(yelpEvents) ? yelpEvents : [];\n  const checkTicketMasterArray = Array.isArray(ticketmaster) ? ticketmaster : [];\n  return {\n    items: [...checkTicketMasterArray, ...checkYelpEventsArray, ...checkYelpPlacesArray],\n    loading: ticketmasterLoading || yelpEventsLoading || yelpPlacesLoading,\n    errors: {\n      yelpEventsError,\n      yelpPlacesError,\n      ticketmasterError\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}