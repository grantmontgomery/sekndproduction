{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from \"react\";\nimport { Layout, ResultCard } from \"../../components\";\nimport { yelpBusinessesCall, yelpEventsCall, ticketMasterCall } from \"../../apicalls\";\nimport { useRouter } from \"next/router\";\nimport css from \"../../styles/Queried.module.scss\";\nexport default function Queried({\n  results: {\n    items,\n    errors\n  },\n  searchType\n}) {\n  const [state, setState] = React.useState({\n    resultsType: \"\"\n  });\n  const router = useRouter();\n  console.log(router);\n  console.log(items);\n\n  const determineItems = () => {\n    if (!items) return null;\n\n    switch (searchType) {\n      case \"ALL\":\n        if (Array.isArray(items.places) && Array.isArray(items.events)) {\n          return state.resultsType === \"PLACES\" ? items.places.map(item => __jsx(ResultCard, {\n            key: item.id,\n            item: item\n          })) : items.events.map(item => __jsx(ResultCard, {\n            key: item.id,\n            item: item\n          }));\n        } else {\n          return null;\n        }\n\n      case \"PLACES\":\n        return Array.isArray(items.places) ? items.places.map(item => __jsx(ResultCard, {\n          key: item.id,\n          item: item\n        })) : null;\n\n      case \"EVENTS\":\n        return Array.isArray(items.events) ? items.events.map(item => __jsx(ResultCard, {\n          key: item.id,\n          item: item\n        })) : null;\n\n      default:\n        if (Array.isArray(items.places) && Array.isArray(items.events)) {\n          return state.resultsType === \"PLACES\" ? items.places.map(item => __jsx(ResultCard, {\n            key: item.id,\n            item: item\n          })) : items.events.map(item => __jsx(ResultCard, {\n            key: item.id,\n            item: item\n          }));\n        } else {\n          return null;\n        }\n\n    }\n  };\n\n  const setTypeButtons = () => {\n    if (searchType) {\n      switch (searchType) {\n        case \"ALL\":\n          return __jsx(React.Fragment, null, __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: () => setState({\n              resultsType: \"PLACES\"\n            })\n          }, \"Places\"), __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: () => setState({\n              resultsType: \"EVENTS\"\n            })\n          }, \"Events\"));\n\n        case \"PLACES\":\n          return __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: () => setState({\n              resultsType: \"PLACES\"\n            })\n          }, \"Places\");\n\n        case \"EVENTS\":\n          return __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: () => setState({\n              resultsType: \"EVENTS\"\n            })\n          }, \"Events\");\n\n        default:\n          return __jsx(React.Fragment, null, __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: () => setState({\n              resultsType: \"PLACES\"\n            })\n          }, \"Places\"), __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: () => setState({\n              resultsType: \"EVENTS\"\n            })\n          }, \"Events\"));\n      }\n    } else {\n      return __jsx(React.Fragment, null, __jsx(\"button\", {\n        className: css.typeButton,\n        onClick: () => setState({\n          resultsType: \"PLACES\"\n        })\n      }, \"Places\"), __jsx(\"button\", {\n        className: css.typeButton,\n        onClick: () => setState({\n          resultsType: \"EVENTS\"\n        })\n      }, \"Events\"));\n    }\n  };\n\n  return __jsx(Layout, null, __jsx(\"main\", {\n    className: css.queriedPage\n  }, __jsx(\"section\", {\n    className: css.header\n  }, setTypeButtons(), __jsx(\"button\", {\n    className: css.sort\n  }, \"Sort\")), __jsx(\"div\", {\n    className: css.resultsSlider\n  }, determineItems())));\n}\n\nQueried.getInitialProps = async ({\n  query,\n  pathname,\n  asPath\n}) => {\n  const {\n    searchType,\n    location,\n    radius,\n    placeType,\n    startFormatted,\n    endFormatted,\n    unixStartDate,\n    unixEndDate,\n    eventsCategory\n  } = query;\n\n  if (location && radius && startFormatted && endFormatted) {\n    console.log(\"api call\");\n\n    class APICalls {\n      constructor(searchParams) {\n        _defineProperty(this, \"searchParams\", void 0);\n\n        _defineProperty(this, \"results\", void 0);\n\n        this.searchParams = searchParams;\n        this.results = {\n          items: {\n            places: [],\n            events: []\n          },\n          errors: {\n            yelpPlaces: \"\",\n            yelpEvents: \"\",\n            ticketmaster: \"\"\n          }\n        };\n      }\n\n      async yelpBusinesses() {\n        const {\n          location,\n          radius,\n          placeType\n        } = this.searchParams;\n        const yelpBusinessesResponse = await yelpBusinessesCall({\n          location,\n          radius,\n          placeType\n        });\n        Array.isArray(yelpBusinessesResponse) ? this.results.items.places = yelpBusinessesResponse : this.results.errors.yelpPlaces = `${yelpBusinessesResponse}`;\n      }\n\n      async yelpEvents() {\n        const {\n          location,\n          radius,\n          unixStartDate,\n          unixEndDate\n        } = this.searchParams;\n        const yelpEventsResponse = await yelpEventsCall({\n          location,\n          radius,\n          unixStartDate,\n          unixEndDate\n        });\n        Array.isArray(yelpEventsResponse) ? this.results.items.events = [...this.results.items.events, ...yelpEventsResponse] : this.results.errors.yelpEvents = `${yelpEventsResponse}`;\n      }\n\n      async ticketMaster() {\n        const {\n          location,\n          radius,\n          startFormatted,\n          endFormatted\n        } = this.searchParams;\n        const ticketMasterResponse = await ticketMasterCall({\n          location,\n          radius,\n          startFormatted,\n          endFormatted\n        });\n        Array.isArray(ticketMasterResponse) ? this.results.items.events = [...this.results.items.events, ...ticketMasterResponse] : this.results.errors.ticketmaster = `${ticketMasterResponse}`;\n      }\n\n    }\n\n    const callAPIS = async (searchType) => {\n      const APICall = new APICalls({\n        location,\n        radius,\n        placeType,\n        startFormatted,\n        endFormatted,\n        unixStartDate,\n        unixEndDate,\n        eventsCategory\n      });\n\n      try {\n        switch (searchType) {\n          case \"PLACES\":\n            APICall.yelpBusinesses();\n            return APICall.results;\n\n          case \"EVENTS\":\n            APICall.yelpEvents();\n            APICall.ticketMaster();\n            return APICall.results;\n\n          case \"ALL\":\n            APICall.yelpBusinesses();\n            APICall.yelpEvents();\n            APICall.ticketMaster();\n            return APICall.results;\n\n          default:\n            APICall.yelpBusinesses();\n            APICall.yelpEvents();\n            APICall.ticketMaster();\n            return APICall.results;\n        }\n      } catch {\n        APICall.results.errors.yelpPlaces = \"CALL ERROR\";\n        APICall.results.errors.yelpEvents = \"CALL ERROR\";\n        APICall.results.errors.ticketmaster = \"CALL ERROR\";\n        return APICall.results;\n      }\n    };\n\n    const results = await callAPIS(searchType);\n    return {\n      results,\n      searchType\n    };\n  } else {\n    const checkURLIsString = query.queried.toString();\n    const paramValueArray = checkURLIsString.split(\"+\");\n    const searchParamsValues = {};\n    paramValueArray.forEach(param => {\n      const indexOfEqual = param.search(\"=\");\n      if (indexOfEqual === -1) return;else {\n        const paramKey = param.substring(0, indexOfEqual);\n        const paramValue = param.substring(indexOfEqual + 1);\n        searchParamsValues[paramKey] = paramValue;\n      }\n    });\n    return {\n      results: {\n        error: \"BadCall\"\n      },\n      searchType: \"ALL\"\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module"}