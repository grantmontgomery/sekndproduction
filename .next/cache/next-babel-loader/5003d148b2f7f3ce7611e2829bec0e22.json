{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { Layout } from \"../../components\";\nexport var __N_SSP = true;\nexport default function Queried(_ref) {\n  var businesses = _ref.businesses;\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 5\n    }\n  }, __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }\n  }), __jsx(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }\n  }));\n}\n_c = Queried;\n\nvar _c;\n\n$RefreshReg$(_c, \"Queried\");","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","Layout","Queried","businesses"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,MAAT,QAAuB,kBAAvB;;AAGA,eAAe,SAASC,OAAT,OAAiC;AAAA,MAAdC,UAAc,QAAdA,UAAc;AAC9C,SACE,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD;KAPuBD,O","sourcesContent":["import * as React from \"react\";\r\nimport { GetServerSideProps } from \"next\";\r\nimport { Layout } from \"../../components\";\r\nimport { useRouter } from \"next/router\";\r\n\r\nexport default function Queried({ businesses }) {\r\n  return (\r\n    <React.Fragment>\r\n      <Layout></Layout>\r\n      <main></main>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport const getServerSideProps: GetServerSideProps = async ({ params }) => {\r\n  const checkURLIsString: string = params.queried.toString();\r\n  const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n  const searchParamsValues: { [key: string]: string } = {};\r\n\r\n  paramValueArray.forEach((param) => {\r\n    const indexOfEqual: number = param.search(\"=\");\r\n    if (indexOfEqual === -1) return;\r\n    else {\r\n      const paramKey: string = param.substring(0, indexOfEqual);\r\n      const paramValue: string = param.substring(indexOfEqual + 1);\r\n      searchParamsValues[paramKey] = paramValue;\r\n    }\r\n  });\r\n\r\n  return {\r\n    props: {},\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}