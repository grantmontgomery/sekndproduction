{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\components\\\\SearchResults\\\\ResultCard\\\\Parts\\\\EventsInfo\\\\EventTimes\\\\EventTimes.tsx\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport css from \"./EventTimes.module.scss\";\nexport const EventTimes = ({\n  startTime,\n  endTime,\n  source\n}) => {\n  const parseYelpTimes = () => {\n    const yelpStartObject = new Date(startTime);\n    const yelpEndObject = new Date(endTime); //yelp start time\n\n    const yelpStartTime = yelpStartObject.toLocaleTimeString(\"en-US\");\n    const startAmPm = yelpStartTime.substring(yelpStartTime.length - 2);\n    const startWithoutSeconds = yelpStartTime.substring(0, yelpStartTime.length - 6);\n    const yelpStartFormattedTime = `${startWithoutSeconds} ${startAmPm}`; //yelp start date\n\n    const yelpStartDate = `${yelpStartObject.toLocaleDateString(\"en-US\", {\n      weekday: \"short\"\n    })} ${yelpStartObject.toLocaleDateString()}`; //yelp end time\n\n    const yelpEndTime = yelpEndObject.toLocaleTimeString(\"en-US\");\n    const endAmPm = yelpEndTime.substring(yelpEndTime.length - 2);\n    const endWithoutSeconds = yelpEndTime.substring(0, yelpEndTime.length - 6);\n    const yelpEndFormattedTime = `${endWithoutSeconds} ${endAmPm}`; //yelp end Date\n\n    const yelpEndDate = yelpEndObject.toLocaleDateString();\n    return __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }, `${yelpStartDate} ${yelpStartFormattedTime}`), __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, `${yelpEndDate} ${yelpEndFormattedTime}`));\n  };\n\n  const determineSource = () => {\n    return source === \"yelp\" ? parseYelpTimes() : null;\n  };\n\n  return __jsx(\"div\", {\n    className: css.times,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 10\n    }\n  }, determineSource());\n};","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/components/SearchResults/ResultCard/Parts/EventsInfo/EventTimes/EventTimes.tsx"],"names":["React","css","EventTimes","startTime","endTime","source","parseYelpTimes","yelpStartObject","Date","yelpEndObject","yelpStartTime","toLocaleTimeString","startAmPm","substring","length","startWithoutSeconds","yelpStartFormattedTime","yelpStartDate","toLocaleDateString","weekday","yelpEndTime","endAmPm","endWithoutSeconds","yelpEndFormattedTime","yelpEndDate","determineSource","times"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,GAAP,MAAgB,0BAAhB;AAEA,OAAO,MAAMC,UAIX,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,OAAb;AAAsBC,EAAAA;AAAtB,CAAD,KAAoC;AACvC,QAAMC,cAAiC,GAAG,MAAM;AAC9C,UAAMC,eAAqB,GAAG,IAAIC,IAAJ,CAASL,SAAT,CAA9B;AACA,UAAMM,aAAmB,GAAG,IAAID,IAAJ,CAASJ,OAAT,CAA5B,CAF8C,CAI9C;;AACA,UAAMM,aAAqB,GAAGH,eAAe,CAACI,kBAAhB,CAAmC,OAAnC,CAA9B;AACA,UAAMC,SAAiB,GAAGF,aAAa,CAACG,SAAd,CAAwBH,aAAa,CAACI,MAAd,GAAuB,CAA/C,CAA1B;AACA,UAAMC,mBAA2B,GAAGL,aAAa,CAACG,SAAd,CAClC,CADkC,EAElCH,aAAa,CAACI,MAAd,GAAuB,CAFW,CAApC;AAKA,UAAME,sBAA8B,GAAI,GAAED,mBAAoB,IAAGH,SAAU,EAA3E,CAZ8C,CAc9C;;AAEA,UAAMK,aAAqB,GAAI,GAAEV,eAAe,CAACW,kBAAhB,CAC/B,OAD+B,EAE/B;AACEC,MAAAA,OAAO,EAAE;AADX,KAF+B,CAK/B,IAAGZ,eAAe,CAACW,kBAAhB,EAAqC,EAL1C,CAhB8C,CAuB9C;;AAEA,UAAME,WAAmB,GAAGX,aAAa,CAACE,kBAAd,CAAiC,OAAjC,CAA5B;AACA,UAAMU,OAAe,GAAGD,WAAW,CAACP,SAAZ,CAAsBO,WAAW,CAACN,MAAZ,GAAqB,CAA3C,CAAxB;AACA,UAAMQ,iBAAyB,GAAGF,WAAW,CAACP,SAAZ,CAChC,CADgC,EAEhCO,WAAW,CAACN,MAAZ,GAAqB,CAFW,CAAlC;AAKA,UAAMS,oBAA4B,GAAI,GAAED,iBAAkB,IAAGD,OAAQ,EAArE,CAhC8C,CAkC9C;;AAEA,UAAMG,WAAmB,GAAGf,aAAa,CAACS,kBAAd,EAA5B;AAEA,WACE,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQ,GAAED,aAAc,IAAGD,sBAAuB,EAAlD,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQ,GAAEQ,WAAY,IAAGD,oBAAqB,EAA9C,CAFF,CADF;AAMD,GA5CD;;AA8CA,QAAME,eAAkC,GAAG,MAAM;AAC/C,WAAOpB,MAAM,KAAK,MAAX,GAAoBC,cAAc,EAAlC,GAAuC,IAA9C;AACD,GAFD;;AAIA,SAAO;AAAK,IAAA,SAAS,EAAEL,GAAG,CAACyB,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BD,eAAe,EAA3C,CAAP;AACD,CAxDM","sourcesContent":["import * as React from \"react\";\r\nimport css from \"./EventTimes.module.scss\";\r\n\r\nexport const EventTimes: React.FC<{\r\n  startTime: string;\r\n  endTime: string | null;\r\n  source: string;\r\n}> = ({ startTime, endTime, source }) => {\r\n  const parseYelpTimes: () => JSX.Element = () => {\r\n    const yelpStartObject: Date = new Date(startTime);\r\n    const yelpEndObject: Date = new Date(endTime);\r\n\r\n    //yelp start time\r\n    const yelpStartTime: string = yelpStartObject.toLocaleTimeString(\"en-US\");\r\n    const startAmPm: string = yelpStartTime.substring(yelpStartTime.length - 2);\r\n    const startWithoutSeconds: string = yelpStartTime.substring(\r\n      0,\r\n      yelpStartTime.length - 6\r\n    );\r\n\r\n    const yelpStartFormattedTime: string = `${startWithoutSeconds} ${startAmPm}`;\r\n\r\n    //yelp start date\r\n\r\n    const yelpStartDate: string = `${yelpStartObject.toLocaleDateString(\r\n      \"en-US\",\r\n      {\r\n        weekday: \"short\",\r\n      }\r\n    )} ${yelpStartObject.toLocaleDateString()}`;\r\n\r\n    //yelp end time\r\n\r\n    const yelpEndTime: string = yelpEndObject.toLocaleTimeString(\"en-US\");\r\n    const endAmPm: string = yelpEndTime.substring(yelpEndTime.length - 2);\r\n    const endWithoutSeconds: string = yelpEndTime.substring(\r\n      0,\r\n      yelpEndTime.length - 6\r\n    );\r\n\r\n    const yelpEndFormattedTime: string = `${endWithoutSeconds} ${endAmPm}`;\r\n\r\n    //yelp end Date\r\n\r\n    const yelpEndDate: string = yelpEndObject.toLocaleDateString();\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <span>{`${yelpStartDate} ${yelpStartFormattedTime}`}</span>\r\n        <span>{`${yelpEndDate} ${yelpEndFormattedTime}`}</span>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  const determineSource: () => JSX.Element = () => {\r\n    return source === \"yelp\" ? parseYelpTimes() : null;\r\n  };\r\n\r\n  return <div className={css.times}>{determineSource()}</div>;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}