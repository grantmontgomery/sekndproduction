{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { Layout, ResultCard } from \"../../components\";\nimport { yelpBusinessesCall } from \"../../apicalls\";\nimport css from \"../../styles/Queried.module.scss\";\nexport default function Queried(_ref) {\n  var _this = this;\n\n  var results = _ref.results;\n  console.log(results);\n\n  if (results) {\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 7\n      }\n    }, __jsx(\"main\", {\n      className: css.queriedPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }\n    }, __jsx(\"section\", {\n      className: css.queryDisplay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 11\n      }\n    }), __jsx(\"section\", {\n      className: css.header,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 11\n      }\n    }), __jsx(\"section\", {\n      className: css.results,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      className: css.resultsSlider,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }\n    }, typeof results === \"object\" ? results[0].map(function (item) {\n      return __jsx(ResultCard, {\n        key: item.id,\n        item: item,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 28\n        }\n      });\n    }) : null))));\n  }\n}\n_c = Queried;\n\nQueried.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n    var query, checkURLIsString, paramValueArray, searchParamsValues, apiResponse, apiArray, results;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = _ref2.query;\n\n            if (!query.queried) {\n              _context.next = 14;\n              break;\n            }\n\n            checkURLIsString = query.queried.toString();\n            paramValueArray = checkURLIsString.split(\"+\");\n            searchParamsValues = {};\n            paramValueArray.forEach(function (param) {\n              var indexOfEqual = param.search(\"=\");\n              if (indexOfEqual === -1) return;else {\n                var paramKey = param.substring(0, indexOfEqual);\n                var paramValue = param.substring(indexOfEqual + 1);\n                searchParamsValues[paramKey] = paramValue;\n              }\n            });\n            _context.next = 8;\n            return yelpBusinessesCall(searchParamsValues);\n\n          case 8:\n            apiResponse = _context.sent;\n            apiArray = [apiResponse];\n            results = [].concat(apiArray);\n            return _context.abrupt(\"return\", {\n              results: results\n            });\n\n          case 14:\n            return _context.abrupt(\"return\", {\n              results: {}\n            });\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar _c;\n\n$RefreshReg$(_c, \"Queried\");","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","Layout","ResultCard","yelpBusinessesCall","css","Queried","results","console","log","queriedPage","queryDisplay","header","resultsSlider","map","item","id","getInitialProps","query","queried","checkURLIsString","toString","paramValueArray","split","searchParamsValues","forEach","param","indexOfEqual","search","paramKey","substring","paramValue","apiResponse","apiArray"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,EAAiBC,UAAjB,QAAmC,kBAAnC;AACA,SACEC,kBADF,QAIO,gBAJP;AAKA,OAAOC,GAAP,MAAgB,kCAAhB;AAEA,eAAe,SAASC,OAAT,OAA2C;AAAA;;AAAA,MAAxBC,OAAwB,QAAxBA,OAAwB;AACxDC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;;AACA,MAAIA,OAAJ,EAAa;AACX,WACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,SAAS,EAAEF,GAAG,CAACK,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAS,MAAA,SAAS,EAAEL,GAAG,CAACM,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAS,MAAA,SAAS,EAAEN,GAAG,CAACO,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE;AAAS,MAAA,SAAS,EAAEP,GAAG,CAACE,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAEF,GAAG,CAACQ,aAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,OAAON,OAAP,KAAmB,QAAnB,GACGA,OAAO,CAAC,CAAD,CAAP,CAAWO,GAAX,CAAe,UAACC,IAAD,EAAU;AACvB,aAAO,MAAC,UAAD;AAAY,QAAA,GAAG,EAAEA,IAAI,CAACC,EAAtB;AAA0B,QAAA,IAAI,EAAED,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAFD,CADH,GAIG,IALN,CADF,CAHF,CADF,CADF;AAiBD;AACF;KArBuBT,O;;AAuBxBA,OAAO,CAACW,eAAR;AAAA,uEAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,KAAT,SAASA,KAAT;;AAAA,iBACpBA,KAAK,CAACC,OADc;AAAA;AAAA;AAAA;;AAEhBC,YAAAA,gBAFgB,GAEWF,KAAK,CAACC,OAAN,CAAcE,QAAd,EAFX;AAGhBC,YAAAA,eAHgB,GAGYF,gBAAgB,CAACG,KAAjB,CAAuB,GAAvB,CAHZ;AAKhBC,YAAAA,kBALgB,GAKgC,EALhC;AAOtBF,YAAAA,eAAe,CAACG,OAAhB,CAAwB,UAACC,KAAD,EAAW;AACjC,kBAAMC,YAAoB,GAAGD,KAAK,CAACE,MAAN,CAAa,GAAb,CAA7B;AACA,kBAAID,YAAY,KAAK,CAAC,CAAtB,EAAyB,OAAzB,KACK;AACH,oBAAME,QAAgB,GAAGH,KAAK,CAACI,SAAN,CAAgB,CAAhB,EAAmBH,YAAnB,CAAzB;AACA,oBAAMI,UAAkB,GAAGL,KAAK,CAACI,SAAN,CAAgBH,YAAY,GAAG,CAA/B,CAA3B;AACAH,gBAAAA,kBAAkB,CAACK,QAAD,CAAlB,GAA+BE,UAA/B;AACD;AACF,aARD;AAPsB;AAAA,mBAmBZ3B,kBAAkB,CAACoB,kBAAD,CAnBN;;AAAA;AAiBhBQ,YAAAA,WAjBgB;AAoBhBC,YAAAA,QApBgB,GAoBgC,CAACD,WAAD,CApBhC;AAqBhBzB,YAAAA,OArBgB,aAqBwB0B,QArBxB;AAAA,6CAsBf;AAAE1B,cAAAA,OAAO,EAAPA;AAAF,aAtBe;;AAAA;AAAA,6CAwBf;AAAEA,cAAAA,OAAO,EAAE;AAAX,aAxBe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import * as React from \"react\";\r\nimport { Layout, ResultCard } from \"../../components\";\r\nimport {\r\n  yelpBusinessesCall,\r\n  yelpEventsCall,\r\n  ticketMasterCall,\r\n} from \"../../apicalls\";\r\nimport css from \"../../styles/Queried.module.scss\";\r\n\r\nexport default function Queried({ results }): JSX.Element {\r\n  console.log(results);\r\n  if (results) {\r\n    return (\r\n      <Layout>\r\n        <main className={css.queriedPage}>\r\n          <section className={css.queryDisplay}></section>\r\n          <section className={css.header}></section>\r\n          <section className={css.results}>\r\n            <div className={css.resultsSlider}>\r\n              {typeof results === \"object\"\r\n                ? results[0].map((item) => {\r\n                    return <ResultCard key={item.id} item={item}></ResultCard>;\r\n                  })\r\n                : null}\r\n            </div>\r\n          </section>\r\n        </main>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nQueried.getInitialProps = async ({ query }): Promise<{ results: any }> => {\r\n  if (query.queried) {\r\n    const checkURLIsString: string = query.queried.toString();\r\n    const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n    const searchParamsValues: { [key: string]: string } = {};\r\n\r\n    paramValueArray.forEach((param) => {\r\n      const indexOfEqual: number = param.search(\"=\");\r\n      if (indexOfEqual === -1) return;\r\n      else {\r\n        const paramKey: string = param.substring(0, indexOfEqual);\r\n        const paramValue: string = param.substring(indexOfEqual + 1);\r\n        searchParamsValues[paramKey] = paramValue;\r\n      }\r\n    });\r\n\r\n    const apiResponse: Promise<\r\n      { [key: string]: any }[] | string\r\n    > = await yelpBusinessesCall(searchParamsValues);\r\n    const apiArray: { [key: string]: any }[] | string[] = [apiResponse];\r\n    const results: { [key: string]: any }[] = [...apiArray];\r\n    return { results };\r\n  } else {\r\n    return { results: {} };\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}