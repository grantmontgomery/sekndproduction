{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { PriceAndType, Reviews, Phone, Location } from \"./Parts/PlacesInfo\";\nimport { EventTimesVenue, EventPriceGenre, EventDescription } from \"./Parts/EventsInfo\";\nimport { PartLink } from \"./Parts/PartLink\";\nimport { ImageBackground } from \"./Parts/ImageBackground\";\nimport * as React from \"react\";\nimport { usePartsDispatch, usePartsState } from \"../../../state/DatePartsContext\";\nimport css from \"./ResultCard.module.scss\";\nexport const ResultCard = ({\n  item,\n  resultsLoading\n}) => {\n  const [state, setState] = React.useState({\n    added: false,\n    moreInfo: false,\n    imageLoaded: false\n  });\n  const GlobalParts = usePartsState();\n  React.useEffect(() => {\n    if (item) {\n      for (let i = 0; i < GlobalParts.parts.length; i++) {\n        if (GlobalParts.parts[i].id === item.id) {\n          setState(state => _objectSpread(_objectSpread({}, state), {}, {\n            added: true\n          }));\n        }\n      }\n    }\n  }, [GlobalParts]);\n\n  const determineImageBackgroundSource = () => {\n    switch (item.type) {\n      case \"place\":\n        return item.source === \"yelp\" ? item.image_url : null;\n\n      case \"event\":\n        return item.source === \"yelp\" ? item.image_url : item.images[0].url;\n\n      default:\n        return \"\";\n    }\n  };\n\n  const handleRetract = () => {\n    return state.moreInfo ? setState(state => _objectSpread(_objectSpread({}, state), {}, {\n      moreInfo: false\n    })) : null;\n  };\n\n  const moreDetails = type => {\n    if (!state.moreInfo) return null;\n\n    switch (type) {\n      case \"place\":\n        return __jsx(\"div\", {\n          className: css.detailsWrapper\n        }, __jsx(Phone, {\n          phone: item.phone\n        }), __jsx(Location, {\n          street: item.location.display_address[0],\n          city: item.location.display_address[1]\n        }), __jsx(PartLink, {\n          url: item.url\n        }));\n\n      case \"event\":\n        return __jsx(\"div\", {\n          className: css.detailsWrapper\n        }, __jsx(EventDescription, {\n          description: item.description\n        }), __jsx(PartLink, {\n          url: item.source === \"yelp\" ? item.event_site_url : item.url\n        }));\n\n      default:\n        return __jsx(\"div\", {\n          className: css.detailsWrapper\n        });\n    }\n  };\n\n  const setCardDetails = () => {\n    switch (item.type) {\n      case \"place\":\n        return __jsx(React.Fragment, null, __jsx(\"div\", {\n          className: `${css.infoBar} ${state.moreInfo ? css.extended : null}`\n        }, __jsx(\"span\", {\n          className: css.title\n        }, item.name), __jsx(Reviews, {\n          reviewCount: item.review_count,\n          rating: item.rating\n        }), __jsx(PriceAndType, {\n          price: item.price,\n          city: item.location.city,\n          state: item.location.state,\n          type: item.categories && item.categories.length > 0 ? item.categories[0].title : null\n        }), __jsx(\"div\", {\n          className: css.starsWrapper\n        })), moreDetails(\"place\"));\n\n      case \"event\":\n        const determinePrice = () => {\n          switch (item.source) {\n            case \"yelp\":\n              if (!item.cost) return null;\n              return item.cost;\n\n            case \"ticketmaster\":\n              if (!item.priceRanges) return null;\n              return item.priceRanges[0];\n          }\n        };\n\n        const determineVenue = () => {\n          switch (item.source) {\n            case \"yelp\":\n              return !item.businesess_id || item.business_id === null ? null : item.business_id;\n\n            case \"ticketmaster\":\n              return item._embedded.venues[0].name;\n          }\n        };\n\n        const ticketmasterClassification = () => {\n          return item.classifications ? item.classifications : null;\n        };\n\n        return __jsx(React.Fragment, null, __jsx(\"div\", {\n          className: `${css.infoBar} ${state.moreInfo ? css.extended : null}`\n        }, __jsx(\"span\", {\n          className: css.title\n        }, item.name), __jsx(EventTimesVenue, {\n          startTime: item.source === \"yelp\" ? item.time_start : `${item.dates.start.localDate}T${item.dates.start.localTime}`,\n          endTime: item.source === \"yelp\" ? item.time_end : null,\n          source: item.source,\n          venue: determineVenue()\n        }), __jsx(EventPriceGenre, {\n          venue: item.source === \"yelp\" ? item.business_id : item._embedded.venues[0].name,\n          price: determinePrice(),\n          source: item.source,\n          genre: item.source === \"yelp\" ? item.category : ticketmasterClassification()\n        })), moreDetails(\"event\"));\n    }\n  };\n\n  const dispatch = usePartsDispatch();\n\n  const handlePart = () => {\n    if (state.added) {\n      return setState(state => _objectSpread(_objectSpread({}, state), {}, {\n        added: false\n      })), dispatch({\n        type: \"REMOVE_PART\",\n        payload: {\n          id: item.id\n        }\n      });\n    } else {\n      return GlobalParts.parts.length < 7 ? (setState(state => _objectSpread(_objectSpread({}, state), {}, {\n        added: true\n      })), dispatch({\n        type: \"ADD_PART\",\n        payload: {\n          part: _objectSpread(_objectSpread({}, item), {}, {\n            gridIndex: null\n          })\n        }\n      })) : null;\n    }\n  };\n\n  return resultsLoading ? __jsx(\"div\", {\n    className: css.resultCard,\n    style: {\n      background: \"#999999\"\n    }\n  }, __jsx(\"div\", {\n    className: `${css.addButton} ${css.loadingAdd}`\n  }), __jsx(\"div\", {\n    className: css.infoBar,\n    style: {\n      background: \"transparent\"\n    }\n  }, __jsx(\"div\", {\n    className: css.loadingBar\n  }), __jsx(\"div\", {\n    className: css.loadingBar\n  }), __jsx(\"div\", {\n    className: css.loadingBar\n  }))) : __jsx(\"div\", {\n    className: `${css.resultCard} ${state.moreInfo ? css.extended : null} ${state.imageLoaded ? css.loaded : css.loading}\n      `,\n    onClick: () => state.moreInfo ? null : setState(state => _objectSpread(_objectSpread({}, state), {}, {\n      moreInfo: true\n    }))\n  }, __jsx(ImageBackground, {\n    extended: state.moreInfo,\n    handleRetract: handleRetract,\n    type: item.type,\n    source: item.source\n  }, __jsx(\"img\", {\n    src: determineImageBackgroundSource(),\n    alt: item.name,\n    onLoad: () => setState(_objectSpread(_objectSpread({}, state), {}, {\n      imageLoaded: true\n    }))\n  })), __jsx(\"button\", {\n    className: `${css.addButton} ${state.added ? css.remove : null}`,\n    onClick: event => (event.stopPropagation(), handlePart())\n  }, state.added ? \"Remove from Parts -\" : \"Add to Parts +\"), setCardDetails());\n};","map":null,"metadata":{},"sourceType":"module"}