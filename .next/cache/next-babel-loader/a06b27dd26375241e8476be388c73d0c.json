{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\state\\\\DatePartsContext.tsx\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\n\nconst partsReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_PART\":\n      return state.parts.length < 7 ? {\n        parts: [...state.parts, action.payload.part]\n      } : null;\n\n    case \"REMOVE_PART\":\n      return {\n        parts: state.parts.filter(part => part.id !== action.payload.id)\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst PartsStateContext = /*#__PURE__*/React.createContext(undefined);\nconst PartsDispatchContext = /*#__PURE__*/React.createContext(undefined);\nexport const PartsProvider = ({\n  children\n}) => {\n  const [state, dispatch] = React.useReducer(partsReducer, {\n    parts: []\n  });\n  return __jsx(PartsStateContext.Provider, {\n    value: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, __jsx(PartsDispatchContext.Provider, {\n    value: dispatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, children));\n};\nexport const usePartsState = () => {\n  const context = React.useContext(PartsStateContext);\n\n  if (undefined === context) {\n    throw new Error(\"Please use within PartsProvider\");\n  }\n\n  return context;\n};\nexport const usePartsDispatch = () => {\n  const context = React.useContext(PartsDispatchContext);\n\n  if (undefined === context) {\n    throw new Error(\"Please use within PartsProvider\");\n  }\n\n  return context;\n};","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/state/DatePartsContext.tsx"],"names":["React","partsReducer","state","action","type","parts","length","payload","part","filter","id","PartsStateContext","createContext","undefined","PartsDispatchContext","PartsProvider","children","dispatch","useReducer","usePartsState","context","useContext","Error","usePartsDispatch"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AASA,MAAMC,YAA+C,GAAG,CACtDC,KADsD,EAEtDC,MAFsD,KAGnD;AACH,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AACE,aAAOF,KAAK,CAACG,KAAN,CAAYC,MAAZ,GAAqB,CAArB,GACH;AAAED,QAAAA,KAAK,EAAE,CAAC,GAAGH,KAAK,CAACG,KAAV,EAAiBF,MAAM,CAACI,OAAP,CAAeC,IAAhC;AAAT,OADG,GAEH,IAFJ;;AAGF,SAAK,aAAL;AACE,aAAO;AACLH,QAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,CAAYI,MAAZ,CAAoBD,IAAD,IAAUA,IAAI,CAACE,EAAL,KAAYP,MAAM,CAACI,OAAP,CAAeG,EAAxD;AADF,OAAP;;AAGF;AACE,aAAOR,KAAP;AAVJ;AAYD,CAhBD;;AAkBA,MAAMS,iBAA4C,gBAAGX,KAAK,CAACY,aAAN,CACnDC,SADmD,CAArD;AAIA,MAAMC,oBAEL,gBAAGd,KAAK,CAACY,aAAN,CAAoBC,SAApB,CAFJ;AAIA,OAAO,MAAME,aAII,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiD;AACnE,QAAM,CAACd,KAAD,EAAQe,QAAR,IAAoBjB,KAAK,CAACkB,UAAN,CAAiBjB,YAAjB,EAA+B;AACvDI,IAAAA,KAAK,EAAE;AADgD,GAA/B,CAA1B;AAIA,SACE,MAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAEH,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,oBAAD,CAAsB,QAAtB;AAA+B,IAAA,KAAK,EAAEe,QAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,QADH,CADF,CADF;AAOD,CAhBM;AAkBP,OAAO,MAAMG,aAAa,GAAG,MAAkB;AAC7C,QAAMC,OAAmB,GAAGpB,KAAK,CAACqB,UAAN,CAAiBV,iBAAjB,CAA5B;;AACA,MAAIE,SAAS,KAAKO,OAAlB,EAA2B;AACzB,UAAM,IAAIE,KAAJ,CAAU,iCAAV,CAAN;AACD;;AACD,SAAOF,OAAP;AACD,CANM;AAQP,OAAO,MAAMG,gBAAgB,GAAG,MAA8B;AAC5D,QAAMH,OAAO,GAAGpB,KAAK,CAACqB,UAAN,CAAiBP,oBAAjB,CAAhB;;AACA,MAAID,SAAS,KAAKO,OAAlB,EAA2B;AACzB,UAAM,IAAIE,KAAJ,CAAU,iCAAV,CAAN;AACD;;AACD,SAAOF,OAAP;AACD,CANM","sourcesContent":["import * as React from \"react\";\r\n\r\ntype PartsState = {\r\n  parts: { [key: string]: any }[];\r\n};\r\ntype Action = {\r\n  type: string;\r\n  payload: { id?: string; part?: { [key: string]: any } };\r\n};\r\nconst partsReducer: React.Reducer<PartsState, Action> = (\r\n  state: PartsState,\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case \"ADD_PART\":\r\n      return state.parts.length < 7\r\n        ? { parts: [...state.parts, action.payload.part] }\r\n        : null;\r\n    case \"REMOVE_PART\":\r\n      return {\r\n        parts: state.parts.filter((part) => part.id !== action.payload.id),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst PartsStateContext: React.Context<PartsState> = React.createContext(\r\n  undefined\r\n);\r\n\r\nconst PartsDispatchContext: React.Context<\r\n  React.Dispatch<Action> | undefined\r\n> = React.createContext(undefined);\r\n\r\nexport const PartsProvider: ({\r\n  children,\r\n}: {\r\n  children: React.ReactNode;\r\n}) => JSX.Element = ({ children }: { children: React.ReactNode }) => {\r\n  const [state, dispatch] = React.useReducer(partsReducer, {\r\n    parts: [],\r\n  });\r\n\r\n  return (\r\n    <PartsStateContext.Provider value={state}>\r\n      <PartsDispatchContext.Provider value={dispatch}>\r\n        {children}\r\n      </PartsDispatchContext.Provider>\r\n    </PartsStateContext.Provider>\r\n  );\r\n};\r\n\r\nexport const usePartsState = (): PartsState => {\r\n  const context: PartsState = React.useContext(PartsStateContext);\r\n  if (undefined === context) {\r\n    throw new Error(\"Please use within PartsProvider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const usePartsDispatch = (): React.Dispatch<Action> => {\r\n  const context = React.useContext(PartsDispatchContext);\r\n  if (undefined === context) {\r\n    throw new Error(\"Please use within PartsProvider\");\r\n  }\r\n  return context;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}