{"ast":null,"code":"export const yelpEventsCall = async ({\n  location,\n  radius,\n  unixStartDate,\n  unixEndDate,\n  categories\n}) => {\n  try {\n    const response = await fetch(\"http://localhost:3000/api/yelpEventsAPI\", {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"POST\",\n      body: JSON.stringify({\n        location,\n        radius: parseInt(radius),\n        start_date: parseInt(unixStartDate),\n        end_date: parseInt(unixEndDate)\n      })\n    });\n    const responseJson = await response.json();\n    const {\n      events\n    } = responseJson;\n    events.forEach(event => (event[\"type\"] = \"event\", event[\"source\"] = \"yelp\", event[\"inParts\"] = false));\n    return events;\n  } catch (err) {\n    return err.message;\n  }\n};","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/apicalls/yelpEventsCall.ts"],"names":["yelpEventsCall","location","radius","unixStartDate","unixEndDate","categories","response","fetch","headers","Accept","method","body","JSON","stringify","parseInt","start_date","end_date","responseJson","json","events","forEach","event","err","message"],"mappings":"AAIA,OAAO,MAAMA,cAMa,GAAG,OAAO;AAClCC,EAAAA,QADkC;AAElCC,EAAAA,MAFkC;AAGlCC,EAAAA,aAHkC;AAIlCC,EAAAA,WAJkC;AAKlCC,EAAAA;AALkC,CAAP,KAMvB;AACJ,MAAI;AACF,UAAMC,QAAkB,GAAG,MAAMC,KAAK,CACpC,yCADoC,EAEpC;AACEC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,kBADD;AAEP,wBAAgB;AAFT,OADX;AAKEC,MAAAA,MAAM,EAAE,MALV;AAMEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBZ,QAAAA,QADmB;AAEnBC,QAAAA,MAAM,EAAEY,QAAQ,CAACZ,MAAD,CAFG;AAGnBa,QAAAA,UAAU,EAAED,QAAQ,CAACX,aAAD,CAHD;AAInBa,QAAAA,QAAQ,EAAEF,QAAQ,CAACV,WAAD;AAJC,OAAf;AANR,KAFoC,CAAtC;AAgBA,UAAMa,YAAY,GAAG,MAAMX,QAAQ,CAACY,IAAT,EAA3B;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAmDF,YAAzD;AACAE,IAAAA,MAAM,CAACC,OAAP,CACGC,KAAD,KACGA,KAAK,CAAC,MAAD,CAAL,GAAgB,OAAjB,EACCA,KAAK,CAAC,QAAD,CAAL,GAAkB,MADnB,EAECA,KAAK,CAAC,SAAD,CAAL,GAAmB,KAHtB,CADF;AAOA,WAAOF,MAAP;AACD,GA5BD,CA4BE,OAAOG,GAAP,EAAY;AACZ,WAAOA,GAAG,CAACC,OAAX;AACD;AACF,CA5CM","sourcesContent":["import { parse } from \"path\";\r\n\r\ntype Params = { [key: string]: string };\r\n\r\nexport const yelpEventsCall: ({\r\n  location,\r\n  radius,\r\n  unixStartDate,\r\n  unixEndDate,\r\n  categories,\r\n}: Params) => Promise<any> = async ({\r\n  location,\r\n  radius,\r\n  unixStartDate,\r\n  unixEndDate,\r\n  categories,\r\n}) => {\r\n  try {\r\n    const response: Response = await fetch(\r\n      \"http://localhost:3000/api/yelpEventsAPI\",\r\n      {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n          location,\r\n          radius: parseInt(radius),\r\n          start_date: parseInt(unixStartDate),\r\n          end_date: parseInt(unixEndDate),\r\n        }),\r\n      }\r\n    );\r\n    const responseJson = await response.json();\r\n\r\n    const { events }: { events: { [key: string]: any }[] } = responseJson;\r\n    events.forEach(\r\n      (event) => (\r\n        (event[\"type\"] = \"event\"),\r\n        (event[\"source\"] = \"yelp\"),\r\n        (event[\"inParts\"] = false)\r\n      )\r\n    );\r\n    return events;\r\n  } catch (err) {\r\n    return err.message;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}