{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { Layout, ResultCard } from \"../../components\";\nimport { yelpBusinessesCall, yelpEventsCall, ticketMasterCall } from \"../../apicalls\";\nimport css from \"../../styles/Queried.module.scss\";\nexport default function Queried(_ref) {\n  var _ref$results = _ref.results,\n      items = _ref$results.items,\n      errors = _ref$results.errors,\n      searchType = _ref.searchType;\n\n  var _React$useState = React.useState({\n    resultsType: \"Events\"\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  var determineItems = function determineItems() {\n    if (!items) return null;\n\n    switch (searchType) {\n      case \"ALL\":\n        if (Array.isArray(items.places) && Array.isArray(items.events)) {\n          return state.resultsType === \"Places\" ? items.places.map(function (item) {\n            return __jsx(ResultCard, {\n              key: item.id,\n              item: item\n            });\n          }) : items.events.map(function (item) {\n            return __jsx(ResultCard, {\n              key: item.id,\n              item: item\n            });\n          });\n        } else {\n          return null;\n        }\n\n      case \"PLACES\":\n        return Array.isArray(items.places) ? items.places.map(function (item) {\n          return __jsx(ResultCard, {\n            key: item.id,\n            item: item\n          });\n        }) : null;\n\n      case \"EVENTS\":\n        return Array.isArray(items.events) ? items.events.map(function (item) {\n          return __jsx(ResultCard, {\n            key: item.id,\n            item: item\n          });\n        }) : null;\n\n      default:\n        if (Array.isArray(items.places) && Array.isArray(items.events)) {\n          return state.resultsType === \"Places\" ? items.places.map(function (item) {\n            return __jsx(ResultCard, {\n              key: item.id,\n              item: item\n            });\n          }) : items.events.map(function (item) {\n            return __jsx(ResultCard, {\n              key: item.id,\n              item: item\n            });\n          });\n        } else {\n          return null;\n        }\n\n    }\n  }; // React.useEffect(() => {\n  //   if (searchType) {\n  //     switch (searchType) {\n  //       case \"ALL\":\n  //         return setState({ resultsType: \"Places\" });\n  //       case \"EVENTS\":\n  //         return setState({ resultsType: \"Events\" });\n  //     }\n  //   }\n  // });\n\n\n  var setTypeButtons = function setTypeButtons() {\n    if (searchType) {\n      switch (searchType) {\n        case \"ALL\":\n          return __jsx(React.Fragment, null, __jsx(\"button\", {\n            className: css.typeButton\n          }, \"Places\"), __jsx(\"button\", {\n            className: css.typeButton\n          }, \"Events\"));\n\n        case \"PLACES\":\n          return __jsx(\"button\", {\n            className: css.typeButton\n          }, \"Places\");\n\n        case \"EVENTS\":\n          return __jsx(\"button\", {\n            className: css.typeButton\n          }, \"Events\");\n\n        default:\n          return __jsx(React.Fragment, null, __jsx(\"button\", {\n            className: css.typeButton\n          }, \"Places\"), __jsx(\"button\", {\n            className: css.typeButton\n          }, \"Events\"));\n      }\n    } else {\n      return __jsx(React.Fragment, null, __jsx(\"button\", {\n        className: css.typeButton\n      }, \"Places\"), __jsx(\"button\", {\n        className: css.typeButton\n      }, \"Events\"));\n    }\n  };\n\n  return __jsx(Layout, null, __jsx(\"main\", {\n    className: css.queriedPage\n  }, __jsx(\"section\", {\n    className: css.queryDisplay\n  }), __jsx(\"section\", {\n    className: css.header\n  }, setTypeButtons(), __jsx(\"button\", {\n    className: css.sort\n  }, \"Sort\")), __jsx(\"section\", {\n    className: css.results\n  }, __jsx(\"div\", {\n    className: css.resultsSlider\n  }, determineItems()))));\n}\n\nQueried.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref2) {\n    var query, checkURLIsString, paramValueArray, searchParamsValues, APICalls, callAPIS, results;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            query = _ref2.query;\n\n            if (!query.queried) {\n              _context5.next = 14;\n              break;\n            }\n\n            checkURLIsString = query.queried.toString();\n            paramValueArray = checkURLIsString.split(\"+\");\n            searchParamsValues = {};\n            paramValueArray.forEach(function (param) {\n              var indexOfEqual = param.search(\"=\");\n              if (indexOfEqual === -1) return;else {\n                var paramKey = param.substring(0, indexOfEqual);\n                var paramValue = param.substring(indexOfEqual + 1);\n                searchParamsValues[paramKey] = paramValue;\n              }\n            });\n\n            APICalls = /*#__PURE__*/function () {\n              function APICalls(searchParams) {\n                _classCallCheck(this, APICalls);\n\n                _defineProperty(this, \"searchParams\", void 0);\n\n                _defineProperty(this, \"results\", void 0);\n\n                this.searchParams = searchParams;\n                this.results = {\n                  items: {\n                    places: [],\n                    events: []\n                  },\n                  errors: {\n                    yelpPlaces: \"\",\n                    yelpEvents: \"\",\n                    ticketmaster: \"\"\n                  }\n                };\n              }\n\n              _createClass(APICalls, [{\n                key: \"yelpBusinesses\",\n                value: function () {\n                  var _yelpBusinesses = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                    var yelpBusinessesResponse;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return yelpBusinessesCall(this.searchParams);\n\n                          case 2:\n                            yelpBusinessesResponse = _context.sent;\n                            Array.isArray(yelpBusinessesResponse) ? this.results.items.places = yelpBusinessesResponse : this.results.errors.yelpPlaces = \"\".concat(yelpBusinessesResponse);\n\n                          case 4:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, this);\n                  }));\n\n                  function yelpBusinesses() {\n                    return _yelpBusinesses.apply(this, arguments);\n                  }\n\n                  return yelpBusinesses;\n                }()\n              }, {\n                key: \"yelpEvents\",\n                value: function () {\n                  var _yelpEvents = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                    var yelpEventsResponse;\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _context2.next = 2;\n                            return yelpEventsCall(this.searchParams);\n\n                          case 2:\n                            yelpEventsResponse = _context2.sent;\n                            Array.isArray(yelpEventsResponse) ? this.results.items.events = [].concat(_toConsumableArray(this.results.items.events), _toConsumableArray(yelpEventsResponse)) : this.results.errors.yelpEvents = \"\".concat(yelpEventsResponse);\n\n                          case 4:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, this);\n                  }));\n\n                  function yelpEvents() {\n                    return _yelpEvents.apply(this, arguments);\n                  }\n\n                  return yelpEvents;\n                }()\n              }, {\n                key: \"ticketMaster\",\n                value: function () {\n                  var _ticketMaster = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                    var ticketMasterResponse;\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            _context3.next = 2;\n                            return ticketMasterCall(this.searchParams);\n\n                          case 2:\n                            ticketMasterResponse = _context3.sent;\n                            Array.isArray(ticketMasterResponse) ? this.results.items.events = [].concat(_toConsumableArray(this.results.items.events), _toConsumableArray(ticketMasterResponse)) : this.results.errors.ticketmaster = \"\".concat(ticketMasterResponse);\n\n                          case 4:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3, this);\n                  }));\n\n                  function ticketMaster() {\n                    return _ticketMaster.apply(this, arguments);\n                  }\n\n                  return ticketMaster;\n                }()\n              }]);\n\n              return APICalls;\n            }();\n\n            callAPIS = /*#__PURE__*/function () {\n              var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(searchType) {\n                var APICall;\n                return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                  while (1) {\n                    switch (_context4.prev = _context4.next) {\n                      case 0:\n                        APICall = new APICalls(searchParamsValues);\n                        _context4.prev = 1;\n                        _context4.t0 = searchType;\n                        _context4.next = _context4.t0 === \"PLACES\" ? 5 : _context4.t0 === \"EVENTS\" ? 7 : _context4.t0 === \"ALL\" ? 10 : 14;\n                        break;\n\n                      case 5:\n                        APICall.yelpBusinesses();\n                        return _context4.abrupt(\"return\", APICall.results);\n\n                      case 7:\n                        APICall.yelpEvents();\n                        APICall.ticketMaster();\n                        return _context4.abrupt(\"return\", APICall.results);\n\n                      case 10:\n                        APICall.yelpBusinesses();\n                        APICall.yelpEvents();\n                        APICall.ticketMaster();\n                        return _context4.abrupt(\"return\", APICall.results);\n\n                      case 14:\n                        APICall.yelpBusinesses();\n                        APICall.yelpEvents();\n                        APICall.ticketMaster();\n                        return _context4.abrupt(\"return\", APICall.results);\n\n                      case 18:\n                        _context4.next = 26;\n                        break;\n\n                      case 20:\n                        _context4.prev = 20;\n                        _context4.t1 = _context4[\"catch\"](1);\n                        APICall.results.errors.yelpPlaces = \"CALL ERROR\";\n                        APICall.results.errors.yelpEvents = \"CALL ERROR\";\n                        APICall.results.errors.ticketmaster = \"CALL ERROR\";\n                        return _context4.abrupt(\"return\", APICall.results);\n\n                      case 26:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }\n                }, _callee4, null, [[1, 20]]);\n              }));\n\n              return function callAPIS(_x2) {\n                return _ref4.apply(this, arguments);\n              };\n            }();\n\n            _context5.next = 10;\n            return callAPIS(searchParamsValues.searchType);\n\n          case 10:\n            results = _context5.sent;\n            return _context5.abrupt(\"return\", {\n              results: results,\n              searchType: searchParamsValues.searchType\n            });\n\n          case 14:\n            return _context5.abrupt(\"return\", {\n              results: {},\n              searchType: \"ALL\"\n            });\n\n          case 15:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"module"}