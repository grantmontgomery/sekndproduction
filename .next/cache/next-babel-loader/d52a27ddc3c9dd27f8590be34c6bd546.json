{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\n\nvar gridReducer = function gridReducer(state, action) {\n  switch (action.type) {\n    case \"ADD_GRID_TEMPLATE\":\n      return {\n        hourStrings: action.payload.hourStrings,\n        gridTemplate: action.payload.gridTemplate\n      };\n\n    default:\n      return state;\n  }\n};\n\nvar GridStateContext = /*#__PURE__*/React.createContext(undefined);\nvar GridDispatchContext = /*#__PURE__*/React.createContext(undefined);\nexport var GridProvider = function GridProvider(_ref) {\n  var children = _ref.children;\n\n  var _React$useReducer = React.useReducer(gridReducer, {\n    gridTemplate: \"\",\n    hourStrings: []\n  }),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  return __jsx(GridStateContext.Provider, {\n    value: state\n  }, __jsx(GridDispatchContext.Provider, {\n    value: dispatch\n  }, children));\n};\nexport var useGridState = function useGridState() {\n  var context = React.useContext(GridStateContext);\n\n  if (undefined === context) {\n    throw new Error(\"Please use within GridProvider\");\n  }\n\n  return context;\n};\nexport var useGridDispatch = function useGridDispatch() {\n  var context = React.useContext(GridDispatchContext);\n\n  if (undefined === context) {\n    throw new Error(\"Please use within GridProvider\");\n  }\n\n  return context;\n};","map":null,"metadata":{},"sourceType":"module"}