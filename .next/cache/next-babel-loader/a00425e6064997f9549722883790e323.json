{"ast":null,"code":"export default ((req, res) => {\n  if (req.method !== \"GET\") {\n    //url setup\n    const yelpBusinesses = new URL(\"https://api.yelp.com/v3/businesses/search\"),\n          params = {\n      location: req.body.location,\n      radius: req.body.radius,\n      term: req.body.term\n    };\n    Object.keys(params).forEach(key => yelpBusinesses.searchParams.append(key, params[key]));\n    const yelpUrlString = yelpBusinesses.toString(); //function\n\n    const yelpdataFetch = async (urlString) => {\n      try {\n        const yelpResponse = await fetch(urlString, {\n          headers: {\n            Authorization: `Bearer ${process.env.YELP_API_KEY}`\n          }\n        });\n        const jsonResponse = await yelpResponse.json();\n        return jsonResponse;\n      } catch (err) {\n        return err;\n      }\n    };\n\n    return yelpdataFetch(yelpUrlString).then(data => res.send(data)).catch(err => res.send(err));\n  }\n\n  return res.status(200);\n}); // export default async (req: NextApiRequest, res: NextApiResponse) => {\n//   try {\n//     if (req.method !== \"GET\") {\n//       const yelpBusinesses: URL = new URL(\n//           \"https://api.yelp.com/v3/businesses/search\"\n//         ),\n//         params: Params = {\n//           location: req.body.location,\n//           radius: req.body.radius,\n//           term: req.body.term,\n//         };\n//       Object.keys(params).forEach((key) =>\n//         yelpBusinesses.searchParams.append(key, params[key])\n//       );\n//       const yelpUrlString: string = yelpBusinesses.toString();\n//       //function\n//       const yelpdataFetch: (urlString: string) => Promise<any> = async (\n//         urlString\n//       ) => {\n//         try {\n//           const yelpResponse: Response = await fetch(urlString, {\n//             headers: {\n//               Authorization: `Bearer ${process.env.YELP_API_KEY}`,\n//             },\n//           });\n//           const jsonResponse: JSON = await yelpResponse.json();\n//           return jsonResponse;\n//         } catch (err) {\n//           return err;\n//         }\n//       };\n//       return yelpdataFetch(yelpUrlString)\n//         .then((data) => res.status(200).end(data.stringify()))\n//         .then((data) => res.send(data))\n//         .catch((err) => res.send(err));\n//     } else {\n//       res.status(200).end(\"nothing\");\n//     }\n//   } catch (err) {\n//     return res.send(err.message);\n//   }\n// };","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/api/yelpBusinessesAPI.ts"],"names":["req","res","method","yelpBusinesses","URL","params","location","body","radius","term","Object","keys","forEach","key","searchParams","append","yelpUrlString","toString","yelpdataFetch","urlString","yelpResponse","fetch","headers","Authorization","process","env","YELP_API_KEY","jsonResponse","json","err","then","data","send","catch","status"],"mappings":"AAQA,gBAAe,CAACA,GAAD,EAAsBC,GAAtB,KAA+C;AAC5D,MAAID,GAAG,CAACE,MAAJ,KAAe,KAAnB,EAA0B;AACxB;AACA,UAAMC,cAAmB,GAAG,IAAIC,GAAJ,CACxB,2CADwB,CAA5B;AAAA,UAGEC,MAAc,GAAG;AACfC,MAAAA,QAAQ,EAAEN,GAAG,CAACO,IAAJ,CAASD,QADJ;AAEfE,MAAAA,MAAM,EAAER,GAAG,CAACO,IAAJ,CAASC,MAFF;AAGfC,MAAAA,IAAI,EAAET,GAAG,CAACO,IAAJ,CAASE;AAHA,KAHnB;AAQAC,IAAAA,MAAM,CAACC,IAAP,CAAYN,MAAZ,EAAoBO,OAApB,CAA6BC,GAAD,IAC1BV,cAAc,CAACW,YAAf,CAA4BC,MAA5B,CAAmCF,GAAnC,EAAwCR,MAAM,CAACQ,GAAD,CAA9C,CADF;AAIA,UAAMG,aAAqB,GAAGb,cAAc,CAACc,QAAf,EAA9B,CAdwB,CAgBxB;;AACA,UAAMC,aAAkD,GAAG,OACzDC,SADyD,KAEtD;AACH,UAAI;AACF,cAAMC,YAAsB,GAAG,MAAMC,KAAK,CAACF,SAAD,EAAY;AACpDG,UAAAA,OAAO,EAAE;AACPC,YAAAA,aAAa,EAAG,UAASC,OAAO,CAACC,GAAR,CAAYC,YAAa;AAD3C;AAD2C,SAAZ,CAA1C;AAKA,cAAMC,YAAkB,GAAG,MAAMP,YAAY,CAACQ,IAAb,EAAjC;AACA,eAAOD,YAAP;AACD,OARD,CAQE,OAAOE,GAAP,EAAY;AACZ,eAAOA,GAAP;AACD;AACF,KAdD;;AAgBA,WAAOX,aAAa,CAACF,aAAD,CAAb,CACJc,IADI,CACEC,IAAD,IAAU9B,GAAG,CAAC+B,IAAJ,CAASD,IAAT,CADX,EAEJE,KAFI,CAEGJ,GAAD,IAAS5B,GAAG,CAAC+B,IAAJ,CAASH,GAAT,CAFX,CAAP;AAGD;;AACD,SAAO5B,GAAG,CAACiC,MAAJ,CAAW,GAAX,CAAP;AACD,CAvCD,E,CAyCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { NextApiRequest, NextApiResponse } from \"next\";\r\n\r\ntype Params = {\r\n  location: string;\r\n  term: string;\r\n  radius: string;\r\n};\r\n\r\nexport default (req: NextApiRequest, res: NextApiResponse) => {\r\n  if (req.method !== \"GET\") {\r\n    //url setup\r\n    const yelpBusinesses: URL = new URL(\r\n        \"https://api.yelp.com/v3/businesses/search\"\r\n      ),\r\n      params: Params = {\r\n        location: req.body.location,\r\n        radius: req.body.radius,\r\n        term: req.body.term,\r\n      };\r\n    Object.keys(params).forEach((key) =>\r\n      yelpBusinesses.searchParams.append(key, params[key])\r\n    );\r\n\r\n    const yelpUrlString: string = yelpBusinesses.toString();\r\n\r\n    //function\r\n    const yelpdataFetch: (urlString: string) => Promise<any> = async (\r\n      urlString\r\n    ) => {\r\n      try {\r\n        const yelpResponse: Response = await fetch(urlString, {\r\n          headers: {\r\n            Authorization: `Bearer ${process.env.YELP_API_KEY}`,\r\n          },\r\n        });\r\n        const jsonResponse: JSON = await yelpResponse.json();\r\n        return jsonResponse;\r\n      } catch (err) {\r\n        return err;\r\n      }\r\n    };\r\n\r\n    return yelpdataFetch(yelpUrlString)\r\n      .then((data) => res.send(data))\r\n      .catch((err) => res.send(err));\r\n  }\r\n  return res.status(200);\r\n};\r\n\r\n// export default async (req: NextApiRequest, res: NextApiResponse) => {\r\n//   try {\r\n//     if (req.method !== \"GET\") {\r\n//       const yelpBusinesses: URL = new URL(\r\n//           \"https://api.yelp.com/v3/businesses/search\"\r\n//         ),\r\n//         params: Params = {\r\n//           location: req.body.location,\r\n//           radius: req.body.radius,\r\n//           term: req.body.term,\r\n//         };\r\n//       Object.keys(params).forEach((key) =>\r\n//         yelpBusinesses.searchParams.append(key, params[key])\r\n//       );\r\n\r\n//       const yelpUrlString: string = yelpBusinesses.toString();\r\n\r\n//       //function\r\n//       const yelpdataFetch: (urlString: string) => Promise<any> = async (\r\n//         urlString\r\n//       ) => {\r\n//         try {\r\n//           const yelpResponse: Response = await fetch(urlString, {\r\n//             headers: {\r\n//               Authorization: `Bearer ${process.env.YELP_API_KEY}`,\r\n//             },\r\n//           });\r\n//           const jsonResponse: JSON = await yelpResponse.json();\r\n//           return jsonResponse;\r\n//         } catch (err) {\r\n//           return err;\r\n//         }\r\n//       };\r\n\r\n//       return yelpdataFetch(yelpUrlString)\r\n//         .then((data) => res.status(200).end(data.stringify()))\r\n//         .then((data) => res.send(data))\r\n//         .catch((err) => res.send(err));\r\n//     } else {\r\n//       res.status(200).end(\"nothing\");\r\n//     }\r\n//   } catch (err) {\r\n//     return res.send(err.message);\r\n//   }\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}