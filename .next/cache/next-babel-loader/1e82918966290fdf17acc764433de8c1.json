{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from \"react\";\nimport { yelpBusinessesCall, yelpEventsCall, ticketMasterCall } from \"../../apicalls\";\nexport default function Queried(props) {\n  const [state, setState] = React.useState({\n    resultsType: \"Events\"\n  });\n  console.log(props);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 10\n    }\n  }); // console.log(items);\n  // console.log(errors);\n  // const determineItems: () => JSX.Element | null = () => {\n  //   if (!items) return null;\n  //   switch (searchType) {\n  //     case \"ALL\":\n  //       if (Array.isArray(items.places) && Array.isArray(items.events)) {\n  //         return state.resultsType === \"PLACES\"\n  //           ? items.places.map((item) => (\n  //               <ResultCard key={item.id} item={item}></ResultCard>\n  //             ))\n  //           : items.events.map((item) => (\n  //               <ResultCard key={item.id} item={item}></ResultCard>\n  //             ));\n  //       } else {\n  //         return null;\n  //       }\n  //     case \"PLACES\":\n  //       return Array.isArray(items.places)\n  //         ? items.places.map((item) => (\n  //             <ResultCard key={item.id} item={item}></ResultCard>\n  //           ))\n  //         : null;\n  //     case \"EVENTS\":\n  //       return Array.isArray(items.events)\n  //         ? items.events.map((item) => (\n  //             <ResultCard key={item.id} item={item}></ResultCard>\n  //           ))\n  //         : null;\n  //     default:\n  //       if (Array.isArray(items.places) && Array.isArray(items.events)) {\n  //         return state.resultsType === \"PLACES\"\n  //           ? items.places.map((item) => (\n  //               <ResultCard key={item.id} item={item}></ResultCard>\n  //             ))\n  //           : items.events.map((item) => (\n  //               <ResultCard key={item.id} item={item}></ResultCard>\n  //             ));\n  //       } else {\n  //         return null;\n  //       }\n  //   }\n  // };\n  // const setTypeButtons: () => JSX.Element = () => {\n  //   if (searchType) {\n  //     switch (searchType) {\n  //       case \"ALL\":\n  //         return (\n  //           <React.Fragment>\n  //             <button\n  //               className={css.typeButton}\n  //               onClick={() => setState({ resultsType: \"PLACES\" })}\n  //             >\n  //               Places\n  //             </button>\n  //             <button\n  //               className={css.typeButton}\n  //               onClick={() => setState({ resultsType: \"EVENTS\" })}\n  //             >\n  //               Events\n  //             </button>\n  //           </React.Fragment>\n  //         );\n  //       case \"PLACES\":\n  //         return (\n  //           <button\n  //             className={css.typeButton}\n  //             onClick={() => setState({ resultsType: \"PLACES\" })}\n  //           >\n  //             Places\n  //           </button>\n  //         );\n  //       case \"EVENTS\":\n  //         return (\n  //           <button\n  //             className={css.typeButton}\n  //             onClick={() => setState({ resultsType: \"EVENTS\" })}\n  //           >\n  //             Events\n  //           </button>\n  //         );\n  //       default:\n  //         return (\n  //           <React.Fragment>\n  //             <button\n  //               className={css.typeButton}\n  //               onClick={() => setState({ resultsType: \"PLACES\" })}\n  //             >\n  //               Places\n  //             </button>\n  //             <button\n  //               className={css.typeButton}\n  //               onClick={() => setState({ resultsType: \"EVENTS\" })}\n  //             >\n  //               Events\n  //             </button>\n  //           </React.Fragment>\n  //         );\n  //     }\n  //   } else {\n  //     return (\n  //       <React.Fragment>\n  //         <button\n  //           className={css.typeButton}\n  //           onClick={() => setState({ resultsType: \"PLACES\" })}\n  //         >\n  //           Places\n  //         </button>\n  //         <button\n  //           className={css.typeButton}\n  //           onClick={() => setState({ resultsType: \"EVENTS\" })}\n  //         >\n  //           Events\n  //         </button>\n  //       </React.Fragment>\n  //     );\n  //   }\n  // };\n  // return (\n  //   <Layout>\n  //     <main className={css.queriedPage}>\n  //       <section className={css.queryDisplay}></section>\n  //       <section className={css.header}>\n  //         {setTypeButtons()}\n  //         <button className={css.sort}>Sort</button>\n  //       </section>\n  //       <section className={css.results}>\n  //         <div className={css.resultsSlider}>{determineItems()}</div>\n  //       </section>\n  //     </main>\n  //   </Layout>\n  // );\n}\n\n// Queried.getInitialProps = async ({\n//   query,\n//   pathname,\n//   asPath,\n// }): Promise<{\n//   results: any;\n//   searchType: string;\n// }> => {\n//   const {\n//     searchType,\n//     location,\n//     radius,\n//     placeType,\n//     startFormatted,\n//     endFormatted,\n//     unixStartDate,\n//     unixEndDate,\n//     eventsCategory,\n//   } = query;\n//   if (location && radius && startFormatted && endFormatted) {\n//     console.log(\"api call\");\n//     class APICalls {\n//       searchParams: SearchParams;\n//       results: Results;\n//       constructor(searchParams: SearchParams) {\n//         this.searchParams = searchParams;\n//         this.results = {\n//           items: { places: [], events: [] },\n//           errors: { yelpPlaces: \"\", yelpEvents: \"\", ticketmaster: \"\" },\n//         };\n//       }\n//       public async yelpBusinesses() {\n//         const { location, radius, placeType } = this.searchParams;\n//         const yelpBusinessesResponse: APIResponse = await yelpBusinessesCall({\n//           location,\n//           radius,\n//           placeType,\n//         });\n//         Array.isArray(yelpBusinessesResponse)\n//           ? (this.results.items.places = yelpBusinessesResponse)\n//           : (this.results.errors.yelpPlaces = `${yelpBusinessesResponse}`);\n//       }\n//       public async yelpEvents() {\n//         const {\n//           location,\n//           radius,\n//           unixStartDate,\n//           unixEndDate,\n//         } = this.searchParams;\n//         const yelpEventsResponse: APIResponse = await yelpEventsCall({\n//           location,\n//           radius,\n//           unixStartDate,\n//           unixEndDate,\n//         });\n//         Array.isArray(yelpEventsResponse)\n//           ? (this.results.items.events = [\n//               ...this.results.items.events,\n//               ...yelpEventsResponse,\n//             ])\n//           : (this.results.errors.yelpEvents = `${yelpEventsResponse}`);\n//       }\n//       public async ticketMaster() {\n//         const {\n//           location,\n//           radius,\n//           startFormatted,\n//           endFormatted,\n//         } = this.searchParams;\n//         const ticketMasterResponse: APIResponse = await ticketMasterCall({\n//           location,\n//           radius,\n//           startFormatted,\n//           endFormatted,\n//         });\n//         Array.isArray(ticketMasterResponse)\n//           ? (this.results.items.events = [\n//               ...this.results.items.events,\n//               ...ticketMasterResponse,\n//             ])\n//           : (this.results.errors.ticketmaster = `${ticketMasterResponse}`);\n//       }\n//     }\n//     const callAPIS: (searchType: string) => Promise<Results> = async (\n//       searchType\n//     ) => {\n//       const APICall = new APICalls({\n//         location,\n//         radius,\n//         placeType,\n//         startFormatted,\n//         endFormatted,\n//         unixStartDate,\n//         unixEndDate,\n//         eventsCategory,\n//       });\n//       try {\n//         switch (searchType) {\n//           case \"PLACES\":\n//             APICall.yelpBusinesses();\n//             return APICall.results;\n//           case \"EVENTS\":\n//             APICall.yelpEvents();\n//             APICall.ticketMaster();\n//             return APICall.results;\n//           case \"ALL\":\n//             APICall.yelpBusinesses();\n//             APICall.yelpEvents();\n//             APICall.ticketMaster();\n//             return APICall.results;\n//           default:\n//             APICall.yelpBusinesses();\n//             APICall.yelpEvents();\n//             APICall.ticketMaster();\n//             return APICall.results;\n//         }\n//       } catch {\n//         APICall.results.errors.yelpPlaces = \"CALL ERROR\";\n//         APICall.results.errors.yelpEvents = \"CALL ERROR\";\n//         APICall.results.errors.ticketmaster = \"CALL ERROR\";\n//         return APICall.results;\n//       }\n//     };\n//     const results: Results = await callAPIS(searchType);\n//     return {\n//       results,\n//       searchType,\n//     };\n//   } else {\n//     const checkURLIsString: string = query.queried.toString();\n//     const paramValueArray: string[] = checkURLIsString.split(\"+\");\n//     const searchParamsValues: SearchParams = {};\n//     paramValueArray.forEach((param) => {\n//       const indexOfEqual: number = param.search(\"=\");\n//       if (indexOfEqual === -1) return;\n//       else {\n//         const paramKey: string = param.substring(0, indexOfEqual);\n//         const paramValue: string = param.substring(indexOfEqual + 1);\n//         searchParamsValues[paramKey] = paramValue;\n//       }\n//     });\n//     return {\n//       results: { error: \"BadCall\" },\n//       searchType: \"ALL\",\n//     };\n//   }\n// };\nclass APICalls {\n  constructor(searchParams) {\n    _defineProperty(this, \"searchParams\", void 0);\n\n    _defineProperty(this, \"results\", void 0);\n\n    this.searchParams = searchParams;\n    this.results = {\n      items: {\n        places: [],\n        events: []\n      },\n      errors: {\n        yelpPlaces: \"\",\n        yelpEvents: \"\",\n        ticketmaster: \"\"\n      }\n    };\n  }\n\n  async yelpBusinesses() {\n    const {\n      location,\n      radius,\n      placeType\n    } = this.searchParams;\n    const yelpBusinessesResponse = await yelpBusinessesCall({\n      location,\n      radius,\n      placeType\n    });\n    Array.isArray(yelpBusinessesResponse) ? this.results.items.places = yelpBusinessesResponse : this.results.errors.yelpPlaces = `${yelpBusinessesResponse}`;\n  }\n\n  async yelpEvents() {\n    const {\n      location,\n      radius,\n      unixStartDate,\n      unixEndDate\n    } = this.searchParams;\n    const yelpEventsResponse = await yelpEventsCall({\n      location,\n      radius,\n      unixStartDate,\n      unixEndDate\n    });\n    Array.isArray(yelpEventsResponse) ? this.results.items.events = [...this.results.items.events, ...yelpEventsResponse] : this.results.errors.yelpEvents = `${yelpEventsResponse}`;\n  }\n\n  async ticketMaster() {\n    const {\n      location,\n      radius,\n      startFormatted,\n      endFormatted\n    } = this.searchParams;\n    const ticketMasterResponse = await ticketMasterCall({\n      location,\n      radius,\n      startFormatted,\n      endFormatted\n    });\n    Array.isArray(ticketMasterResponse) ? this.results.items.events = [...this.results.items.events, ...ticketMasterResponse] : this.results.errors.ticketmaster = `${ticketMasterResponse}`;\n  }\n\n}\n\nexport async function getServerSideProps({\n  params,\n  req,\n  query\n}) {\n  console.log(params);\n  console.log(req);\n  console.log(query);\n  return {\n    props: {\n      params,\n      req,\n      query\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","yelpBusinessesCall","yelpEventsCall","ticketMasterCall","Queried","props","state","setState","useState","resultsType","console","log","APICalls","constructor","searchParams","results","items","places","events","errors","yelpPlaces","yelpEvents","ticketmaster","yelpBusinesses","location","radius","placeType","yelpBusinessesResponse","Array","isArray","unixStartDate","unixEndDate","yelpEventsResponse","ticketMaster","startFormatted","endFormatted","ticketMasterResponse","getServerSideProps","params","req","query"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SACEC,kBADF,EAEEC,cAFF,EAGEC,gBAHF,QAIO,gBAJP;AAOA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAqC;AAClD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,KAAK,CAACQ,QAAN,CAAe;AAAEC,IAAAA,WAAW,EAAE;AAAf,GAAf,CAA1B;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AACA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP,CAJkD,CAKlD;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAWD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMO,QAAN,CAAe;AAGbC,EAAAA,WAAW,CAACC,YAAD,EAA6B;AAAA;;AAAA;;AACtC,SAAKA,YAAL,GAAoBA,YAApB;AACA,SAAKC,OAAL,GAAe;AACbC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE,EAAV;AAAcC,QAAAA,MAAM,EAAE;AAAtB,OADM;AAEbC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,UAAU,EAAE,EAAd;AAAkBC,QAAAA,UAAU,EAAE,EAA9B;AAAkCC,QAAAA,YAAY,EAAE;AAAhD;AAFK,KAAf;AAID;;AAED,QAAaC,cAAb,GAA8B;AAC5B,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,MAAZ;AAAoBC,MAAAA;AAApB,QAAkC,KAAKZ,YAA7C;AACA,UAAMa,sBAAmC,GAAG,MAAM1B,kBAAkB,CAAC;AACnEuB,MAAAA,QADmE;AAEnEC,MAAAA,MAFmE;AAGnEC,MAAAA;AAHmE,KAAD,CAApE;AAKAE,IAAAA,KAAK,CAACC,OAAN,CAAcF,sBAAd,IACK,KAAKZ,OAAL,CAAaC,KAAb,CAAmBC,MAAnB,GAA4BU,sBADjC,GAEK,KAAKZ,OAAL,CAAaI,MAAb,CAAoBC,UAApB,GAAkC,GAAEO,sBAAuB,EAFhE;AAGD;;AACD,QAAaN,UAAb,GAA0B;AACxB,UAAM;AAAEG,MAAAA,QAAF;AAAYC,MAAAA,MAAZ;AAAoBK,MAAAA,aAApB;AAAmCC,MAAAA;AAAnC,QAAmD,KAAKjB,YAA9D;AACA,UAAMkB,kBAA+B,GAAG,MAAM9B,cAAc,CAAC;AAC3DsB,MAAAA,QAD2D;AAE3DC,MAAAA,MAF2D;AAG3DK,MAAAA,aAH2D;AAI3DC,MAAAA;AAJ2D,KAAD,CAA5D;AAMAH,IAAAA,KAAK,CAACC,OAAN,CAAcG,kBAAd,IACK,KAAKjB,OAAL,CAAaC,KAAb,CAAmBE,MAAnB,GAA4B,CAC3B,GAAG,KAAKH,OAAL,CAAaC,KAAb,CAAmBE,MADK,EAE3B,GAAGc,kBAFwB,CADjC,GAKK,KAAKjB,OAAL,CAAaI,MAAb,CAAoBE,UAApB,GAAkC,GAAEW,kBAAmB,EAL5D;AAMD;;AACD,QAAaC,YAAb,GAA4B;AAC1B,UAAM;AACJT,MAAAA,QADI;AAEJC,MAAAA,MAFI;AAGJS,MAAAA,cAHI;AAIJC,MAAAA;AAJI,QAKF,KAAKrB,YALT;AAMA,UAAMsB,oBAAiC,GAAG,MAAMjC,gBAAgB,CAAC;AAC/DqB,MAAAA,QAD+D;AAE/DC,MAAAA,MAF+D;AAG/DS,MAAAA,cAH+D;AAI/DC,MAAAA;AAJ+D,KAAD,CAAhE;AAMAP,IAAAA,KAAK,CAACC,OAAN,CAAcO,oBAAd,IACK,KAAKrB,OAAL,CAAaC,KAAb,CAAmBE,MAAnB,GAA4B,CAC3B,GAAG,KAAKH,OAAL,CAAaC,KAAb,CAAmBE,MADK,EAE3B,GAAGkB,oBAFwB,CADjC,GAKK,KAAKrB,OAAL,CAAaI,MAAb,CAAoBG,YAApB,GAAoC,GAAEc,oBAAqB,EALhE;AAMD;;AAxDY;;AA2Df,OAAO,eAAeC,kBAAf,CAAkC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,GAAV;AAAeC,EAAAA;AAAf,CAAlC,EAA0D;AAC/D9B,EAAAA,OAAO,CAACC,GAAR,CAAY2B,MAAZ;AACA5B,EAAAA,OAAO,CAACC,GAAR,CAAY4B,GAAZ;AACA7B,EAAAA,OAAO,CAACC,GAAR,CAAY6B,KAAZ;AACA,SAAO;AACLnC,IAAAA,KAAK,EAAE;AACLiC,MAAAA,MADK;AAELC,MAAAA,GAFK;AAGLC,MAAAA;AAHK;AADF,GAAP;AAOD","sourcesContent":["import * as React from \"react\";\r\nimport { Layout, ResultCard } from \"../../components\";\r\nimport {\r\n  yelpBusinessesCall,\r\n  yelpEventsCall,\r\n  ticketMasterCall,\r\n} from \"../../apicalls\";\r\nimport css from \"../../styles/Queried.module.scss\";\r\n\r\nexport default function Queried(props): JSX.Element {\r\n  const [state, setState] = React.useState({ resultsType: \"Events\" });\r\n\r\n  console.log(props);\r\n  return <div></div>;\r\n  // console.log(items);\r\n  // console.log(errors);\r\n\r\n  // const determineItems: () => JSX.Element | null = () => {\r\n  //   if (!items) return null;\r\n  //   switch (searchType) {\r\n  //     case \"ALL\":\r\n  //       if (Array.isArray(items.places) && Array.isArray(items.events)) {\r\n  //         return state.resultsType === \"PLACES\"\r\n  //           ? items.places.map((item) => (\r\n  //               <ResultCard key={item.id} item={item}></ResultCard>\r\n  //             ))\r\n  //           : items.events.map((item) => (\r\n  //               <ResultCard key={item.id} item={item}></ResultCard>\r\n  //             ));\r\n  //       } else {\r\n  //         return null;\r\n  //       }\r\n\r\n  //     case \"PLACES\":\r\n  //       return Array.isArray(items.places)\r\n  //         ? items.places.map((item) => (\r\n  //             <ResultCard key={item.id} item={item}></ResultCard>\r\n  //           ))\r\n  //         : null;\r\n  //     case \"EVENTS\":\r\n  //       return Array.isArray(items.events)\r\n  //         ? items.events.map((item) => (\r\n  //             <ResultCard key={item.id} item={item}></ResultCard>\r\n  //           ))\r\n  //         : null;\r\n  //     default:\r\n  //       if (Array.isArray(items.places) && Array.isArray(items.events)) {\r\n  //         return state.resultsType === \"PLACES\"\r\n  //           ? items.places.map((item) => (\r\n  //               <ResultCard key={item.id} item={item}></ResultCard>\r\n  //             ))\r\n  //           : items.events.map((item) => (\r\n  //               <ResultCard key={item.id} item={item}></ResultCard>\r\n  //             ));\r\n  //       } else {\r\n  //         return null;\r\n  //       }\r\n  //   }\r\n  // };\r\n\r\n  // const setTypeButtons: () => JSX.Element = () => {\r\n  //   if (searchType) {\r\n  //     switch (searchType) {\r\n  //       case \"ALL\":\r\n  //         return (\r\n  //           <React.Fragment>\r\n  //             <button\r\n  //               className={css.typeButton}\r\n  //               onClick={() => setState({ resultsType: \"PLACES\" })}\r\n  //             >\r\n  //               Places\r\n  //             </button>\r\n  //             <button\r\n  //               className={css.typeButton}\r\n  //               onClick={() => setState({ resultsType: \"EVENTS\" })}\r\n  //             >\r\n  //               Events\r\n  //             </button>\r\n  //           </React.Fragment>\r\n  //         );\r\n  //       case \"PLACES\":\r\n  //         return (\r\n  //           <button\r\n  //             className={css.typeButton}\r\n  //             onClick={() => setState({ resultsType: \"PLACES\" })}\r\n  //           >\r\n  //             Places\r\n  //           </button>\r\n  //         );\r\n\r\n  //       case \"EVENTS\":\r\n  //         return (\r\n  //           <button\r\n  //             className={css.typeButton}\r\n  //             onClick={() => setState({ resultsType: \"EVENTS\" })}\r\n  //           >\r\n  //             Events\r\n  //           </button>\r\n  //         );\r\n  //       default:\r\n  //         return (\r\n  //           <React.Fragment>\r\n  //             <button\r\n  //               className={css.typeButton}\r\n  //               onClick={() => setState({ resultsType: \"PLACES\" })}\r\n  //             >\r\n  //               Places\r\n  //             </button>\r\n  //             <button\r\n  //               className={css.typeButton}\r\n  //               onClick={() => setState({ resultsType: \"EVENTS\" })}\r\n  //             >\r\n  //               Events\r\n  //             </button>\r\n  //           </React.Fragment>\r\n  //         );\r\n  //     }\r\n  //   } else {\r\n  //     return (\r\n  //       <React.Fragment>\r\n  //         <button\r\n  //           className={css.typeButton}\r\n  //           onClick={() => setState({ resultsType: \"PLACES\" })}\r\n  //         >\r\n  //           Places\r\n  //         </button>\r\n  //         <button\r\n  //           className={css.typeButton}\r\n  //           onClick={() => setState({ resultsType: \"EVENTS\" })}\r\n  //         >\r\n  //           Events\r\n  //         </button>\r\n  //       </React.Fragment>\r\n  //     );\r\n  //   }\r\n  // };\r\n\r\n  // return (\r\n  //   <Layout>\r\n  //     <main className={css.queriedPage}>\r\n  //       <section className={css.queryDisplay}></section>\r\n  //       <section className={css.header}>\r\n  //         {setTypeButtons()}\r\n  //         <button className={css.sort}>Sort</button>\r\n  //       </section>\r\n  //       <section className={css.results}>\r\n  //         <div className={css.resultsSlider}>{determineItems()}</div>\r\n  //       </section>\r\n  //     </main>\r\n  //   </Layout>\r\n  // );\r\n}\r\n\r\ntype Results = {\r\n  items: { places: { [key: string]: any }[]; events: { [key: string]: any }[] };\r\n  errors: { yelpPlaces: string; yelpEvents: string; ticketmaster: string };\r\n};\r\n\r\ntype APIResponse = Promise<{ [key: string]: any }[] | string>;\r\n\r\ntype SearchParams = { [key: string]: any };\r\n\r\n// Queried.getInitialProps = async ({\r\n//   query,\r\n//   pathname,\r\n//   asPath,\r\n// }): Promise<{\r\n//   results: any;\r\n//   searchType: string;\r\n// }> => {\r\n//   const {\r\n//     searchType,\r\n//     location,\r\n//     radius,\r\n//     placeType,\r\n//     startFormatted,\r\n//     endFormatted,\r\n//     unixStartDate,\r\n//     unixEndDate,\r\n//     eventsCategory,\r\n//   } = query;\r\n\r\n//   if (location && radius && startFormatted && endFormatted) {\r\n//     console.log(\"api call\");\r\n//     class APICalls {\r\n//       searchParams: SearchParams;\r\n//       results: Results;\r\n//       constructor(searchParams: SearchParams) {\r\n//         this.searchParams = searchParams;\r\n//         this.results = {\r\n//           items: { places: [], events: [] },\r\n//           errors: { yelpPlaces: \"\", yelpEvents: \"\", ticketmaster: \"\" },\r\n//         };\r\n//       }\r\n\r\n//       public async yelpBusinesses() {\r\n//         const { location, radius, placeType } = this.searchParams;\r\n//         const yelpBusinessesResponse: APIResponse = await yelpBusinessesCall({\r\n//           location,\r\n//           radius,\r\n//           placeType,\r\n//         });\r\n//         Array.isArray(yelpBusinessesResponse)\r\n//           ? (this.results.items.places = yelpBusinessesResponse)\r\n//           : (this.results.errors.yelpPlaces = `${yelpBusinessesResponse}`);\r\n//       }\r\n//       public async yelpEvents() {\r\n//         const {\r\n//           location,\r\n//           radius,\r\n//           unixStartDate,\r\n//           unixEndDate,\r\n//         } = this.searchParams;\r\n//         const yelpEventsResponse: APIResponse = await yelpEventsCall({\r\n//           location,\r\n//           radius,\r\n//           unixStartDate,\r\n//           unixEndDate,\r\n//         });\r\n//         Array.isArray(yelpEventsResponse)\r\n//           ? (this.results.items.events = [\r\n//               ...this.results.items.events,\r\n//               ...yelpEventsResponse,\r\n//             ])\r\n//           : (this.results.errors.yelpEvents = `${yelpEventsResponse}`);\r\n//       }\r\n//       public async ticketMaster() {\r\n//         const {\r\n//           location,\r\n//           radius,\r\n//           startFormatted,\r\n//           endFormatted,\r\n//         } = this.searchParams;\r\n//         const ticketMasterResponse: APIResponse = await ticketMasterCall({\r\n//           location,\r\n//           radius,\r\n//           startFormatted,\r\n//           endFormatted,\r\n//         });\r\n//         Array.isArray(ticketMasterResponse)\r\n//           ? (this.results.items.events = [\r\n//               ...this.results.items.events,\r\n//               ...ticketMasterResponse,\r\n//             ])\r\n//           : (this.results.errors.ticketmaster = `${ticketMasterResponse}`);\r\n//       }\r\n//     }\r\n\r\n//     const callAPIS: (searchType: string) => Promise<Results> = async (\r\n//       searchType\r\n//     ) => {\r\n//       const APICall = new APICalls({\r\n//         location,\r\n//         radius,\r\n//         placeType,\r\n//         startFormatted,\r\n//         endFormatted,\r\n//         unixStartDate,\r\n//         unixEndDate,\r\n//         eventsCategory,\r\n//       });\r\n\r\n//       try {\r\n//         switch (searchType) {\r\n//           case \"PLACES\":\r\n//             APICall.yelpBusinesses();\r\n\r\n//             return APICall.results;\r\n\r\n//           case \"EVENTS\":\r\n//             APICall.yelpEvents();\r\n//             APICall.ticketMaster();\r\n//             return APICall.results;\r\n//           case \"ALL\":\r\n//             APICall.yelpBusinesses();\r\n//             APICall.yelpEvents();\r\n//             APICall.ticketMaster();\r\n//             return APICall.results;\r\n//           default:\r\n//             APICall.yelpBusinesses();\r\n//             APICall.yelpEvents();\r\n//             APICall.ticketMaster();\r\n//             return APICall.results;\r\n//         }\r\n//       } catch {\r\n//         APICall.results.errors.yelpPlaces = \"CALL ERROR\";\r\n//         APICall.results.errors.yelpEvents = \"CALL ERROR\";\r\n//         APICall.results.errors.ticketmaster = \"CALL ERROR\";\r\n//         return APICall.results;\r\n//       }\r\n//     };\r\n\r\n//     const results: Results = await callAPIS(searchType);\r\n\r\n//     return {\r\n//       results,\r\n//       searchType,\r\n//     };\r\n//   } else {\r\n//     const checkURLIsString: string = query.queried.toString();\r\n//     const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n//     const searchParamsValues: SearchParams = {};\r\n\r\n//     paramValueArray.forEach((param) => {\r\n//       const indexOfEqual: number = param.search(\"=\");\r\n//       if (indexOfEqual === -1) return;\r\n//       else {\r\n//         const paramKey: string = param.substring(0, indexOfEqual);\r\n//         const paramValue: string = param.substring(indexOfEqual + 1);\r\n//         searchParamsValues[paramKey] = paramValue;\r\n//       }\r\n//     });\r\n\r\n//     return {\r\n//       results: { error: \"BadCall\" },\r\n//       searchType: \"ALL\",\r\n//     };\r\n//   }\r\n// };\r\nclass APICalls {\r\n  searchParams: SearchParams;\r\n  results: Results;\r\n  constructor(searchParams: SearchParams) {\r\n    this.searchParams = searchParams;\r\n    this.results = {\r\n      items: { places: [], events: [] },\r\n      errors: { yelpPlaces: \"\", yelpEvents: \"\", ticketmaster: \"\" },\r\n    };\r\n  }\r\n\r\n  public async yelpBusinesses() {\r\n    const { location, radius, placeType } = this.searchParams;\r\n    const yelpBusinessesResponse: APIResponse = await yelpBusinessesCall({\r\n      location,\r\n      radius,\r\n      placeType,\r\n    });\r\n    Array.isArray(yelpBusinessesResponse)\r\n      ? (this.results.items.places = yelpBusinessesResponse)\r\n      : (this.results.errors.yelpPlaces = `${yelpBusinessesResponse}`);\r\n  }\r\n  public async yelpEvents() {\r\n    const { location, radius, unixStartDate, unixEndDate } = this.searchParams;\r\n    const yelpEventsResponse: APIResponse = await yelpEventsCall({\r\n      location,\r\n      radius,\r\n      unixStartDate,\r\n      unixEndDate,\r\n    });\r\n    Array.isArray(yelpEventsResponse)\r\n      ? (this.results.items.events = [\r\n          ...this.results.items.events,\r\n          ...yelpEventsResponse,\r\n        ])\r\n      : (this.results.errors.yelpEvents = `${yelpEventsResponse}`);\r\n  }\r\n  public async ticketMaster() {\r\n    const {\r\n      location,\r\n      radius,\r\n      startFormatted,\r\n      endFormatted,\r\n    } = this.searchParams;\r\n    const ticketMasterResponse: APIResponse = await ticketMasterCall({\r\n      location,\r\n      radius,\r\n      startFormatted,\r\n      endFormatted,\r\n    });\r\n    Array.isArray(ticketMasterResponse)\r\n      ? (this.results.items.events = [\r\n          ...this.results.items.events,\r\n          ...ticketMasterResponse,\r\n        ])\r\n      : (this.results.errors.ticketmaster = `${ticketMasterResponse}`);\r\n  }\r\n}\r\n\r\nexport async function getServerSideProps({ params, req, query }) {\r\n  console.log(params);\r\n  console.log(req);\r\n  console.log(query);\r\n  return {\r\n    props: {\r\n      params,\r\n      req,\r\n      query,\r\n    },\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}