{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from \"react\";\nimport { Layout, ResultCard } from \"../../components\";\nimport { yelpBusinessesCall, yelpEventsCall, ticketMasterCall } from \"../../apicalls\";\nimport css from \"../../styles/Queried.module.scss\";\nexport default function Queried({\n  results: {\n    items,\n    errors\n  },\n  searchType\n}) {\n  const [state, setState] = React.useState({\n    resultsType: \"\"\n  });\n  console.log(items);\n\n  const determineItems = () => {\n    if (!items) return null;\n\n    switch (searchType) {\n      case \"ALL\":\n        if (Array.isArray(items.places) && Array.isArray(items.events)) {\n          return state.resultsType === \"PLACES\" ? items.places.map(item => __jsx(ResultCard, {\n            key: item.id,\n            item: item,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 17\n            }\n          })) : items.events.map(item => __jsx(ResultCard, {\n            key: item.id,\n            item: item,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 28,\n              columnNumber: 17\n            }\n          }));\n        } else {\n          return null;\n        }\n\n      case \"PLACES\":\n        return Array.isArray(items.places) ? items.places.map(item => __jsx(ResultCard, {\n          key: item.id,\n          item: item,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 15\n          }\n        })) : null;\n\n      case \"EVENTS\":\n        return Array.isArray(items.events) ? items.events.map(item => __jsx(ResultCard, {\n          key: item.id,\n          item: item,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 15\n          }\n        })) : null;\n\n      default:\n        if (Array.isArray(items.places) && Array.isArray(items.events)) {\n          return state.resultsType === \"PLACES\" ? items.places.map(item => __jsx(ResultCard, {\n            key: item.id,\n            item: item,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 17\n            }\n          })) : items.events.map(item => __jsx(ResultCard, {\n            key: item.id,\n            item: item,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 17\n            }\n          }));\n        } else {\n          return null;\n        }\n\n    }\n  };\n\n  const setTypeButtons = () => {\n    if (searchType) {\n      switch (searchType) {\n        case \"ALL\":\n          return __jsx(React.Fragment, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 13\n            }\n          }, __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: () => setState({\n              resultsType: \"PLACES\"\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 15\n            }\n          }, \"Places\"), __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: () => setState({\n              resultsType: \"EVENTS\"\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 15\n            }\n          }, \"Events\"));\n\n        case \"PLACES\":\n          return __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: () => setState({\n              resultsType: \"PLACES\"\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 13\n            }\n          }, \"Places\");\n\n        case \"EVENTS\":\n          return __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: () => setState({\n              resultsType: \"EVENTS\"\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 13\n            }\n          }, \"Events\");\n\n        default:\n          return __jsx(React.Fragment, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 13\n            }\n          }, __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: () => setState({\n              resultsType: \"PLACES\"\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 15\n            }\n          }, \"Places\"), __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: () => setState({\n              resultsType: \"EVENTS\"\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 15\n            }\n          }, \"Events\"));\n      }\n    } else {\n      return __jsx(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 9\n        }\n      }, __jsx(\"button\", {\n        className: css.typeButton,\n        onClick: () => setState({\n          resultsType: \"PLACES\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }\n      }, \"Places\"), __jsx(\"button\", {\n        className: css.typeButton,\n        onClick: () => setState({\n          resultsType: \"EVENTS\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }\n      }, \"Events\"));\n    }\n  };\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 5\n    }\n  }, __jsx(\"main\", {\n    className: css.queriedPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }, __jsx(\"section\", {\n    className: css.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, setTypeButtons(), __jsx(\"button\", {\n    className: css.sort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, \"Sort\")), __jsx(\"div\", {\n    className: css.resultsSlider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, determineItems())));\n}\n\nQueried.getInitialProps = async ({\n  query,\n  pathname,\n  asPath\n}) => {\n  const {\n    searchType,\n    location,\n    radius,\n    placeType,\n    startFormatted,\n    endFormatted,\n    unixStartDate,\n    unixEndDate,\n    eventsCategory\n  } = query;\n\n  if (location && radius && startFormatted && endFormatted) {\n    console.log(\"api call\");\n\n    class APICalls {\n      constructor(searchParams) {\n        _defineProperty(this, \"searchParams\", void 0);\n\n        _defineProperty(this, \"results\", void 0);\n\n        this.searchParams = searchParams;\n        this.results = {\n          items: {\n            places: [],\n            events: []\n          },\n          errors: {\n            yelpPlaces: \"\",\n            yelpEvents: \"\",\n            ticketmaster: \"\"\n          }\n        };\n      }\n\n      async yelpBusinesses() {\n        const {\n          location,\n          radius,\n          placeType\n        } = this.searchParams;\n        const yelpBusinessesResponse = await yelpBusinessesCall({\n          location,\n          radius,\n          placeType\n        });\n        Array.isArray(yelpBusinessesResponse) ? this.results.items.places = yelpBusinessesResponse : this.results.errors.yelpPlaces = `${yelpBusinessesResponse}`;\n      }\n\n      async yelpEvents() {\n        const {\n          location,\n          radius,\n          unixStartDate,\n          unixEndDate\n        } = this.searchParams;\n        const yelpEventsResponse = await yelpEventsCall({\n          location,\n          radius,\n          unixStartDate,\n          unixEndDate\n        });\n        Array.isArray(yelpEventsResponse) ? this.results.items.events = [...this.results.items.events, ...yelpEventsResponse] : this.results.errors.yelpEvents = `${yelpEventsResponse}`;\n      }\n\n      async ticketMaster() {\n        const {\n          location,\n          radius,\n          startFormatted,\n          endFormatted\n        } = this.searchParams;\n        const ticketMasterResponse = await ticketMasterCall({\n          location,\n          radius,\n          startFormatted,\n          endFormatted\n        });\n        Array.isArray(ticketMasterResponse) ? this.results.items.events = [...this.results.items.events, ...ticketMasterResponse] : this.results.errors.ticketmaster = `${ticketMasterResponse}`;\n      }\n\n    }\n\n    const callAPIS = async (searchType) => {\n      const APICall = new APICalls({\n        location,\n        radius,\n        placeType,\n        startFormatted,\n        endFormatted,\n        unixStartDate,\n        unixEndDate,\n        eventsCategory\n      });\n\n      try {\n        switch (searchType) {\n          case \"PLACES\":\n            APICall.yelpBusinesses();\n            return APICall.results;\n\n          case \"EVENTS\":\n            APICall.yelpEvents();\n            APICall.ticketMaster();\n            return APICall.results;\n\n          case \"ALL\":\n            APICall.yelpBusinesses();\n            APICall.yelpEvents();\n            APICall.ticketMaster();\n            return APICall.results;\n\n          default:\n            APICall.yelpBusinesses();\n            APICall.yelpEvents();\n            APICall.ticketMaster();\n            return APICall.results;\n        }\n      } catch {\n        APICall.results.errors.yelpPlaces = \"CALL ERROR\";\n        APICall.results.errors.yelpEvents = \"CALL ERROR\";\n        APICall.results.errors.ticketmaster = \"CALL ERROR\";\n        return APICall.results;\n      }\n    };\n\n    const results = await callAPIS(searchType);\n    return {\n      results,\n      searchType\n    };\n  } else {\n    const checkURLIsString = query.queried.toString();\n    const paramValueArray = checkURLIsString.split(\"+\");\n    const searchParamsValues = {};\n    paramValueArray.forEach(param => {\n      const indexOfEqual = param.search(\"=\");\n      if (indexOfEqual === -1) return;else {\n        const paramKey = param.substring(0, indexOfEqual);\n        const paramValue = param.substring(indexOfEqual + 1);\n        searchParamsValues[paramKey] = paramValue;\n      }\n    });\n    return {\n      results: {\n        error: \"BadCall\"\n      },\n      searchType: \"ALL\"\n    };\n  }\n};","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","Layout","ResultCard","yelpBusinessesCall","yelpEventsCall","ticketMasterCall","css","Queried","results","items","errors","searchType","state","setState","useState","resultsType","console","log","determineItems","Array","isArray","places","events","map","item","id","setTypeButtons","typeButton","queriedPage","header","sort","resultsSlider","getInitialProps","query","pathname","asPath","location","radius","placeType","startFormatted","endFormatted","unixStartDate","unixEndDate","eventsCategory","APICalls","constructor","searchParams","yelpPlaces","yelpEvents","ticketmaster","yelpBusinesses","yelpBusinessesResponse","yelpEventsResponse","ticketMaster","ticketMasterResponse","callAPIS","APICall","checkURLIsString","queried","toString","paramValueArray","split","searchParamsValues","forEach","param","indexOfEqual","search","paramKey","substring","paramValue","error"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { Layout, ResultCard } from \"../../components\";\r\nimport {\r\n  yelpBusinessesCall,\r\n  yelpEventsCall,\r\n  ticketMasterCall,\r\n} from \"../../apicalls\";\r\nimport css from \"../../styles/Queried.module.scss\";\r\n\r\nexport default function Queried({\r\n  results: { items, errors },\r\n  searchType,\r\n}): JSX.Element {\r\n  const [state, setState] = React.useState({ resultsType: \"\" });\r\n\r\n  console.log(items);\r\n\r\n  const determineItems: () => JSX.Element | null = () => {\r\n    if (!items) return null;\r\n    switch (searchType) {\r\n      case \"ALL\":\r\n        if (Array.isArray(items.places) && Array.isArray(items.events)) {\r\n          return state.resultsType === \"PLACES\"\r\n            ? items.places.map((item) => (\r\n                <ResultCard key={item.id} item={item}></ResultCard>\r\n              ))\r\n            : items.events.map((item) => (\r\n                <ResultCard key={item.id} item={item}></ResultCard>\r\n              ));\r\n        } else {\r\n          return null;\r\n        }\r\n\r\n      case \"PLACES\":\r\n        return Array.isArray(items.places)\r\n          ? items.places.map((item) => (\r\n              <ResultCard key={item.id} item={item}></ResultCard>\r\n            ))\r\n          : null;\r\n      case \"EVENTS\":\r\n        return Array.isArray(items.events)\r\n          ? items.events.map((item) => (\r\n              <ResultCard key={item.id} item={item}></ResultCard>\r\n            ))\r\n          : null;\r\n      default:\r\n        if (Array.isArray(items.places) && Array.isArray(items.events)) {\r\n          return state.resultsType === \"PLACES\"\r\n            ? items.places.map((item) => (\r\n                <ResultCard key={item.id} item={item}></ResultCard>\r\n              ))\r\n            : items.events.map((item) => (\r\n                <ResultCard key={item.id} item={item}></ResultCard>\r\n              ));\r\n        } else {\r\n          return null;\r\n        }\r\n    }\r\n  };\r\n\r\n  const setTypeButtons: () => JSX.Element = () => {\r\n    if (searchType) {\r\n      switch (searchType) {\r\n        case \"ALL\":\r\n          return (\r\n            <React.Fragment>\r\n              <button\r\n                className={css.typeButton}\r\n                onClick={() => setState({ resultsType: \"PLACES\" })}\r\n              >\r\n                Places\r\n              </button>\r\n              <button\r\n                className={css.typeButton}\r\n                onClick={() => setState({ resultsType: \"EVENTS\" })}\r\n              >\r\n                Events\r\n              </button>\r\n            </React.Fragment>\r\n          );\r\n        case \"PLACES\":\r\n          return (\r\n            <button\r\n              className={css.typeButton}\r\n              onClick={() => setState({ resultsType: \"PLACES\" })}\r\n            >\r\n              Places\r\n            </button>\r\n          );\r\n\r\n        case \"EVENTS\":\r\n          return (\r\n            <button\r\n              className={css.typeButton}\r\n              onClick={() => setState({ resultsType: \"EVENTS\" })}\r\n            >\r\n              Events\r\n            </button>\r\n          );\r\n        default:\r\n          return (\r\n            <React.Fragment>\r\n              <button\r\n                className={css.typeButton}\r\n                onClick={() => setState({ resultsType: \"PLACES\" })}\r\n              >\r\n                Places\r\n              </button>\r\n              <button\r\n                className={css.typeButton}\r\n                onClick={() => setState({ resultsType: \"EVENTS\" })}\r\n              >\r\n                Events\r\n              </button>\r\n            </React.Fragment>\r\n          );\r\n      }\r\n    } else {\r\n      return (\r\n        <React.Fragment>\r\n          <button\r\n            className={css.typeButton}\r\n            onClick={() => setState({ resultsType: \"PLACES\" })}\r\n          >\r\n            Places\r\n          </button>\r\n          <button\r\n            className={css.typeButton}\r\n            onClick={() => setState({ resultsType: \"EVENTS\" })}\r\n          >\r\n            Events\r\n          </button>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <main className={css.queriedPage}>\r\n        {/* <section className={css.queryDisplay}></section> */}\r\n        <section className={css.header}>\r\n          {setTypeButtons()}\r\n          <button className={css.sort}>Sort</button>\r\n        </section>\r\n\r\n        <div className={css.resultsSlider}>{determineItems()}</div>\r\n      </main>\r\n    </Layout>\r\n  );\r\n}\r\n\r\ntype Results = {\r\n  items: { places: { [key: string]: any }[]; events: { [key: string]: any }[] };\r\n  errors: { yelpPlaces: string; yelpEvents: string; ticketmaster: string };\r\n};\r\n\r\ntype APIResponse = Promise<{ [key: string]: any }[] | string>;\r\n\r\ntype SearchParams = { [key: string]: any };\r\n\r\nQueried.getInitialProps = async ({\r\n  query,\r\n  pathname,\r\n  asPath,\r\n}): Promise<{\r\n  results: any;\r\n  searchType: string;\r\n}> => {\r\n  const {\r\n    searchType,\r\n    location,\r\n    radius,\r\n    placeType,\r\n    startFormatted,\r\n    endFormatted,\r\n    unixStartDate,\r\n    unixEndDate,\r\n    eventsCategory,\r\n  } = query;\r\n\r\n  if (location && radius && startFormatted && endFormatted) {\r\n    console.log(\"api call\");\r\n    class APICalls {\r\n      searchParams: SearchParams;\r\n      results: Results;\r\n      constructor(searchParams: SearchParams) {\r\n        this.searchParams = searchParams;\r\n        this.results = {\r\n          items: { places: [], events: [] },\r\n          errors: { yelpPlaces: \"\", yelpEvents: \"\", ticketmaster: \"\" },\r\n        };\r\n      }\r\n\r\n      public async yelpBusinesses() {\r\n        const { location, radius, placeType } = this.searchParams;\r\n        const yelpBusinessesResponse: APIResponse = await yelpBusinessesCall({\r\n          location,\r\n          radius,\r\n          placeType,\r\n        });\r\n        Array.isArray(yelpBusinessesResponse)\r\n          ? (this.results.items.places = yelpBusinessesResponse)\r\n          : (this.results.errors.yelpPlaces = `${yelpBusinessesResponse}`);\r\n      }\r\n      public async yelpEvents() {\r\n        const {\r\n          location,\r\n          radius,\r\n          unixStartDate,\r\n          unixEndDate,\r\n        } = this.searchParams;\r\n        const yelpEventsResponse: APIResponse = await yelpEventsCall({\r\n          location,\r\n          radius,\r\n          unixStartDate,\r\n          unixEndDate,\r\n        });\r\n        Array.isArray(yelpEventsResponse)\r\n          ? (this.results.items.events = [\r\n              ...this.results.items.events,\r\n              ...yelpEventsResponse,\r\n            ])\r\n          : (this.results.errors.yelpEvents = `${yelpEventsResponse}`);\r\n      }\r\n      public async ticketMaster() {\r\n        const {\r\n          location,\r\n          radius,\r\n          startFormatted,\r\n          endFormatted,\r\n        } = this.searchParams;\r\n        const ticketMasterResponse: APIResponse = await ticketMasterCall({\r\n          location,\r\n          radius,\r\n          startFormatted,\r\n          endFormatted,\r\n        });\r\n        Array.isArray(ticketMasterResponse)\r\n          ? (this.results.items.events = [\r\n              ...this.results.items.events,\r\n              ...ticketMasterResponse,\r\n            ])\r\n          : (this.results.errors.ticketmaster = `${ticketMasterResponse}`);\r\n      }\r\n    }\r\n\r\n    const callAPIS: (searchType: string) => Promise<Results> = async (\r\n      searchType\r\n    ) => {\r\n      const APICall = new APICalls({\r\n        location,\r\n        radius,\r\n        placeType,\r\n        startFormatted,\r\n        endFormatted,\r\n        unixStartDate,\r\n        unixEndDate,\r\n        eventsCategory,\r\n      });\r\n\r\n      try {\r\n        switch (searchType) {\r\n          case \"PLACES\":\r\n            APICall.yelpBusinesses();\r\n\r\n            return APICall.results;\r\n\r\n          case \"EVENTS\":\r\n            APICall.yelpEvents();\r\n            APICall.ticketMaster();\r\n            return APICall.results;\r\n          case \"ALL\":\r\n            APICall.yelpBusinesses();\r\n            APICall.yelpEvents();\r\n            APICall.ticketMaster();\r\n            return APICall.results;\r\n          default:\r\n            APICall.yelpBusinesses();\r\n            APICall.yelpEvents();\r\n            APICall.ticketMaster();\r\n            return APICall.results;\r\n        }\r\n      } catch {\r\n        APICall.results.errors.yelpPlaces = \"CALL ERROR\";\r\n        APICall.results.errors.yelpEvents = \"CALL ERROR\";\r\n        APICall.results.errors.ticketmaster = \"CALL ERROR\";\r\n        return APICall.results;\r\n      }\r\n    };\r\n\r\n    const results: Results = await callAPIS(searchType);\r\n\r\n    return {\r\n      results,\r\n      searchType,\r\n    };\r\n  } else {\r\n    const checkURLIsString: string = query.queried.toString();\r\n    const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n    const searchParamsValues: SearchParams = {};\r\n\r\n    paramValueArray.forEach((param) => {\r\n      const indexOfEqual: number = param.search(\"=\");\r\n      if (indexOfEqual === -1) return;\r\n      else {\r\n        const paramKey: string = param.substring(0, indexOfEqual);\r\n        const paramValue: string = param.substring(indexOfEqual + 1);\r\n        searchParamsValues[paramKey] = paramValue;\r\n      }\r\n    });\r\n\r\n    return {\r\n      results: { error: \"BadCall\" },\r\n      searchType: \"ALL\",\r\n    };\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}