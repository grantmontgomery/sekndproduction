{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { Layout, ResultCard } from \"../../components\";\nimport { yelpBusinessesCall, yelpEventsCall, ticketMasterCall } from \"../../apicalls\";\nimport css from \"../../styles/Queried.module.scss\";\nexport default function Queried(_ref) {\n  _s();\n\n  var _this = this;\n\n  var _ref$results = _ref.results,\n      items = _ref$results.items,\n      errors = _ref$results.errors,\n      searchType = _ref.searchType;\n\n  var _React$useState = React.useState({\n    resultsType: searchType !== \"ALL\" ? searchType : \"PLACES\"\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1]; //   React.useEffect(() => {\n  //     switch(searchType){\n  //       case \"EVENTS\":\n  //         return setState({resultsType: \"Events\"})\n  //       case \"PLACES\":\n  //         return setState({resultsType: \"Places\"})\n  //       case \"ALL\":\n  //         return setState({resultsType: \"Places\"})\n  //       default:\n  //         return setState({})\n  //     }\n  // },[])\n\n\n  var determineItems = function determineItems() {\n    if (!items) return null;\n\n    switch (searchType) {\n      case \"ALL\":\n        if (Array.isArray(items.places) && Array.isArray(items.events)) {\n          return state.resultsType === \"PLACES\" ? items.places.map(function (item) {\n            return __jsx(ResultCard, {\n              key: item.id,\n              item: item,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 37,\n                columnNumber: 17\n              }\n            });\n          }) : items.events.map(function (item) {\n            return __jsx(ResultCard, {\n              key: item.id,\n              item: item,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 40,\n                columnNumber: 17\n              }\n            });\n          });\n        } else {\n          return null;\n        }\n\n      case \"PLACES\":\n        return Array.isArray(items.places) ? items.places.map(function (item) {\n          return __jsx(ResultCard, {\n            key: item.id,\n            item: item,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 15\n            }\n          });\n        }) : null;\n\n      case \"EVENTS\":\n        return Array.isArray(items.events) ? items.events.map(function (item) {\n          return __jsx(ResultCard, {\n            key: item.id,\n            item: item,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 15\n            }\n          });\n        }) : null;\n\n      default:\n        if (Array.isArray(items.places) && Array.isArray(items.events)) {\n          return state.resultsType === \"PLACES\" ? items.places.map(function (item) {\n            return __jsx(ResultCard, {\n              key: item.id,\n              item: item,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 17\n              }\n            });\n          }) : items.events.map(function (item) {\n            return __jsx(ResultCard, {\n              key: item.id,\n              item: item,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 17\n              }\n            });\n          });\n        } else {\n          return null;\n        }\n\n    }\n  }; // React.useEffect(() => {\n  //   if (searchType) {\n  //     switch (searchType) {\n  //       case \"ALL\":\n  //         return setState({ resultsType: \"Places\" });\n  //       case \"EVENTS\":\n  //         return setState({ resultsType: \"Events\" });\n  //     }\n  //   }\n  // });\n\n\n  var setTypeButtons = function setTypeButtons() {\n    if (searchType) {\n      switch (searchType) {\n        case \"ALL\":\n          return __jsx(React.Fragment, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 13\n            }\n          }, __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: function onClick() {\n              return setState({\n                resultsType: \"PLACES\"\n              });\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 15\n            }\n          }, \"Places\"), __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: function onClick() {\n              return setState({\n                resultsType: \"EVENTS\"\n              });\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 15\n            }\n          }, \"Events\"));\n\n        case \"PLACES\":\n          return __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: function onClick() {\n              return setState({\n                resultsType: \"PLACES\"\n              });\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 13\n            }\n          }, \"Places\");\n\n        case \"EVENTS\":\n          return __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: function onClick() {\n              return setState({\n                resultsType: \"EVENTS\"\n              });\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 13\n            }\n          }, \"Events\");\n\n        default:\n          return __jsx(React.Fragment, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 13\n            }\n          }, __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: function onClick() {\n              return setState({\n                resultsType: \"PLACES\"\n              });\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 15\n            }\n          }, \"Places\"), __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: function onClick() {\n              return setState({\n                resultsType: \"EVENTS\"\n              });\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 15\n            }\n          }, \"Events\"));\n      }\n    } else {\n      return __jsx(React.Fragment, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 9\n        }\n      }, __jsx(\"button\", {\n        className: css.typeButton,\n        onClick: function onClick() {\n          return setState({\n            resultsType: \"PLACES\"\n          });\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }\n      }, \"Places\"), __jsx(\"button\", {\n        className: css.typeButton,\n        onClick: function onClick() {\n          return setState({\n            resultsType: \"EVENTS\"\n          });\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }\n      }, \"Events\"));\n    }\n  };\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 5\n    }\n  }, __jsx(\"main\", {\n    className: css.queriedPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }, __jsx(\"section\", {\n    className: css.queryDisplay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }), __jsx(\"section\", {\n    className: css.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }, setTypeButtons(), __jsx(\"button\", {\n    className: css.sort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }\n  }, \"Sort\")), __jsx(\"section\", {\n    className: css.results,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: css.resultsSlider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 11\n    }\n  }, determineItems()))));\n}\n\n_s(Queried, \"2JRpiwb1miefBg3X6NMA6ydc0hA=\");\n\n_c = Queried;\n\nQueried.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref2) {\n    var query, checkURLIsString, paramValueArray, searchParamsValues, APICalls, callAPIS, results;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            query = _ref2.query;\n\n            if (!query.queried) {\n              _context5.next = 14;\n              break;\n            }\n\n            checkURLIsString = query.queried.toString();\n            paramValueArray = checkURLIsString.split(\"+\");\n            searchParamsValues = {};\n            paramValueArray.forEach(function (param) {\n              var indexOfEqual = param.search(\"=\");\n              if (indexOfEqual === -1) return;else {\n                var paramKey = param.substring(0, indexOfEqual);\n                var paramValue = param.substring(indexOfEqual + 1);\n                searchParamsValues[paramKey] = paramValue;\n              }\n            });\n\n            APICalls = /*#__PURE__*/function () {\n              function APICalls(searchParams) {\n                _classCallCheck(this, APICalls);\n\n                _defineProperty(this, \"searchParams\", void 0);\n\n                _defineProperty(this, \"results\", void 0);\n\n                this.searchParams = searchParams;\n                this.results = {\n                  items: {\n                    places: [],\n                    events: []\n                  },\n                  errors: {\n                    yelpPlaces: \"\",\n                    yelpEvents: \"\",\n                    ticketmaster: \"\"\n                  }\n                };\n              }\n\n              _createClass(APICalls, [{\n                key: \"yelpBusinesses\",\n                value: function () {\n                  var _yelpBusinesses = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                    var yelpBusinessesResponse;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return yelpBusinessesCall(this.searchParams);\n\n                          case 2:\n                            yelpBusinessesResponse = _context.sent;\n                            Array.isArray(yelpBusinessesResponse) ? this.results.items.places = yelpBusinessesResponse : this.results.errors.yelpPlaces = \"\".concat(yelpBusinessesResponse);\n\n                          case 4:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, this);\n                  }));\n\n                  function yelpBusinesses() {\n                    return _yelpBusinesses.apply(this, arguments);\n                  }\n\n                  return yelpBusinesses;\n                }()\n              }, {\n                key: \"yelpEvents\",\n                value: function () {\n                  var _yelpEvents = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                    var yelpEventsResponse;\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _context2.next = 2;\n                            return yelpEventsCall(this.searchParams);\n\n                          case 2:\n                            yelpEventsResponse = _context2.sent;\n                            Array.isArray(yelpEventsResponse) ? this.results.items.events = [].concat(_toConsumableArray(this.results.items.events), _toConsumableArray(yelpEventsResponse)) : this.results.errors.yelpEvents = \"\".concat(yelpEventsResponse);\n\n                          case 4:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, this);\n                  }));\n\n                  function yelpEvents() {\n                    return _yelpEvents.apply(this, arguments);\n                  }\n\n                  return yelpEvents;\n                }()\n              }, {\n                key: \"ticketMaster\",\n                value: function () {\n                  var _ticketMaster = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                    var ticketMasterResponse;\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            _context3.next = 2;\n                            return ticketMasterCall(this.searchParams);\n\n                          case 2:\n                            ticketMasterResponse = _context3.sent;\n                            Array.isArray(ticketMasterResponse) ? this.results.items.events = [].concat(_toConsumableArray(this.results.items.events), _toConsumableArray(ticketMasterResponse)) : this.results.errors.ticketmaster = \"\".concat(ticketMasterResponse);\n\n                          case 4:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3, this);\n                  }));\n\n                  function ticketMaster() {\n                    return _ticketMaster.apply(this, arguments);\n                  }\n\n                  return ticketMaster;\n                }()\n              }]);\n\n              return APICalls;\n            }();\n\n            callAPIS = /*#__PURE__*/function () {\n              var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(searchType) {\n                var APICall;\n                return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                  while (1) {\n                    switch (_context4.prev = _context4.next) {\n                      case 0:\n                        APICall = new APICalls(searchParamsValues);\n                        _context4.prev = 1;\n                        _context4.t0 = searchType;\n                        _context4.next = _context4.t0 === \"PLACES\" ? 5 : _context4.t0 === \"EVENTS\" ? 7 : _context4.t0 === \"ALL\" ? 10 : 14;\n                        break;\n\n                      case 5:\n                        APICall.yelpBusinesses();\n                        return _context4.abrupt(\"return\", APICall.results);\n\n                      case 7:\n                        APICall.yelpEvents();\n                        APICall.ticketMaster();\n                        return _context4.abrupt(\"return\", APICall.results);\n\n                      case 10:\n                        APICall.yelpBusinesses();\n                        APICall.yelpEvents();\n                        APICall.ticketMaster();\n                        return _context4.abrupt(\"return\", APICall.results);\n\n                      case 14:\n                        APICall.yelpBusinesses();\n                        APICall.yelpEvents();\n                        APICall.ticketMaster();\n                        return _context4.abrupt(\"return\", APICall.results);\n\n                      case 18:\n                        _context4.next = 26;\n                        break;\n\n                      case 20:\n                        _context4.prev = 20;\n                        _context4.t1 = _context4[\"catch\"](1);\n                        APICall.results.errors.yelpPlaces = \"CALL ERROR\";\n                        APICall.results.errors.yelpEvents = \"CALL ERROR\";\n                        APICall.results.errors.ticketmaster = \"CALL ERROR\";\n                        return _context4.abrupt(\"return\", APICall.results);\n\n                      case 26:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }\n                }, _callee4, null, [[1, 20]]);\n              }));\n\n              return function callAPIS(_x2) {\n                return _ref4.apply(this, arguments);\n              };\n            }();\n\n            _context5.next = 10;\n            return callAPIS(searchParamsValues.searchType);\n\n          case 10:\n            results = _context5.sent;\n            return _context5.abrupt(\"return\", {\n              results: results,\n              searchType: searchParamsValues.searchType\n            });\n\n          case 14:\n            return _context5.abrupt(\"return\", {\n              results: {},\n              searchType: \"ALL\"\n            });\n\n          case 15:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar _c;\n\n$RefreshReg$(_c, \"Queried\");","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","Layout","ResultCard","yelpBusinessesCall","yelpEventsCall","ticketMasterCall","css","Queried","results","items","errors","searchType","useState","resultsType","state","setState","determineItems","Array","isArray","places","events","map","item","id","setTypeButtons","typeButton","queriedPage","queryDisplay","header","sort","resultsSlider","getInitialProps","query","queried","checkURLIsString","toString","paramValueArray","split","searchParamsValues","forEach","param","indexOfEqual","search","paramKey","substring","paramValue","APICalls","searchParams","yelpPlaces","yelpEvents","ticketmaster","yelpBusinessesResponse","yelpEventsResponse","ticketMasterResponse","callAPIS","APICall","yelpBusinesses","ticketMaster"],"mappings":";;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,EAAiBC,UAAjB,QAAmC,kBAAnC;AACA,SACEC,kBADF,EAEEC,cAFF,EAGEC,gBAHF,QAIO,gBAJP;AAKA,OAAOC,GAAP,MAAgB,kCAAhB;AAEA,eAAe,SAASC,OAAT,OAGC;AAAA;;AAAA;;AAAA,0BAFdC,OAEc;AAAA,MAFHC,KAEG,gBAFHA,KAEG;AAAA,MAFIC,MAEJ,gBAFIA,MAEJ;AAAA,MADdC,UACc,QADdA,UACc;;AAAA,wBACYX,KAAK,CAACY,QAAN,CAAe;AACvCC,IAAAA,WAAW,EAAEF,UAAU,KAAK,KAAf,GAAuBA,UAAvB,GAAoC;AADV,GAAf,CADZ;AAAA;AAAA,MACPG,KADO;AAAA,MACAC,QADA,wBAKd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,cAAwC,GAAG,SAA3CA,cAA2C,GAAM;AACrD,QAAI,CAACP,KAAL,EAAY,OAAO,IAAP;;AACZ,YAAQE,UAAR;AACE,WAAK,KAAL;AACE,YAAIM,KAAK,CAACC,OAAN,CAAcT,KAAK,CAACU,MAApB,KAA+BF,KAAK,CAACC,OAAN,CAAcT,KAAK,CAACW,MAApB,CAAnC,EAAgE;AAC9D,iBAAON,KAAK,CAACD,WAAN,KAAsB,QAAtB,GACHJ,KAAK,CAACU,MAAN,CAAaE,GAAb,CAAiB,UAACC,IAAD;AAAA,mBACf,MAAC,UAAD;AAAY,cAAA,GAAG,EAAEA,IAAI,CAACC,EAAtB;AAA0B,cAAA,IAAI,EAAED,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADe;AAAA,WAAjB,CADG,GAIHb,KAAK,CAACW,MAAN,CAAaC,GAAb,CAAiB,UAACC,IAAD;AAAA,mBACf,MAAC,UAAD;AAAY,cAAA,GAAG,EAAEA,IAAI,CAACC,EAAtB;AAA0B,cAAA,IAAI,EAAED,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADe;AAAA,WAAjB,CAJJ;AAOD,SARD,MAQO;AACL,iBAAO,IAAP;AACD;;AAEH,WAAK,QAAL;AACE,eAAOL,KAAK,CAACC,OAAN,CAAcT,KAAK,CAACU,MAApB,IACHV,KAAK,CAACU,MAAN,CAAaE,GAAb,CAAiB,UAACC,IAAD;AAAA,iBACf,MAAC,UAAD;AAAY,YAAA,GAAG,EAAEA,IAAI,CAACC,EAAtB;AAA0B,YAAA,IAAI,EAAED,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADe;AAAA,SAAjB,CADG,GAIH,IAJJ;;AAKF,WAAK,QAAL;AACE,eAAOL,KAAK,CAACC,OAAN,CAAcT,KAAK,CAACW,MAApB,IACHX,KAAK,CAACW,MAAN,CAAaC,GAAb,CAAiB,UAACC,IAAD;AAAA,iBACf,MAAC,UAAD;AAAY,YAAA,GAAG,EAAEA,IAAI,CAACC,EAAtB;AAA0B,YAAA,IAAI,EAAED,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADe;AAAA,SAAjB,CADG,GAIH,IAJJ;;AAKF;AACE,YAAIL,KAAK,CAACC,OAAN,CAAcT,KAAK,CAACU,MAApB,KAA+BF,KAAK,CAACC,OAAN,CAAcT,KAAK,CAACW,MAApB,CAAnC,EAAgE;AAC9D,iBAAON,KAAK,CAACD,WAAN,KAAsB,QAAtB,GACHJ,KAAK,CAACU,MAAN,CAAaE,GAAb,CAAiB,UAACC,IAAD;AAAA,mBACf,MAAC,UAAD;AAAY,cAAA,GAAG,EAAEA,IAAI,CAACC,EAAtB;AAA0B,cAAA,IAAI,EAAED,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADe;AAAA,WAAjB,CADG,GAIHb,KAAK,CAACW,MAAN,CAAaC,GAAb,CAAiB,UAACC,IAAD;AAAA,mBACf,MAAC,UAAD;AAAY,cAAA,GAAG,EAAEA,IAAI,CAACC,EAAtB;AAA0B,cAAA,IAAI,EAAED,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADe;AAAA,WAAjB,CAJJ;AAOD,SARD,MAQO;AACL,iBAAO,IAAP;AACD;;AArCL;AAuCD,GAzCD,CAjBc,CA4Dd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAME,cAAiC,GAAG,SAApCA,cAAoC,GAAM;AAC9C,QAAIb,UAAJ,EAAgB;AACd,cAAQA,UAAR;AACE,aAAK,KAAL;AACE,iBACE,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE;AACE,YAAA,SAAS,EAAEL,GAAG,CAACmB,UADjB;AAEE,YAAA,OAAO,EAAE;AAAA,qBAAMV,QAAQ,CAAC;AAAEF,gBAAAA,WAAW,EAAE;AAAf,eAAD,CAAd;AAAA,aAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAOE;AACE,YAAA,SAAS,EAAEP,GAAG,CAACmB,UADjB;AAEE,YAAA,OAAO,EAAE;AAAA,qBAAMV,QAAQ,CAAC;AAAEF,gBAAAA,WAAW,EAAE;AAAf,eAAD,CAAd;AAAA,aAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAPF,CADF;;AAgBF,aAAK,QAAL;AACE,iBACE;AACE,YAAA,SAAS,EAAEP,GAAG,CAACmB,UADjB;AAEE,YAAA,OAAO,EAAE;AAAA,qBAAMV,QAAQ,CAAC;AAAEF,gBAAAA,WAAW,EAAE;AAAf,eAAD,CAAd;AAAA,aAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF;;AASF,aAAK,QAAL;AACE,iBACE;AACE,YAAA,SAAS,EAAEP,GAAG,CAACmB,UADjB;AAEE,YAAA,OAAO,EAAE;AAAA,qBAAMV,QAAQ,CAAC;AAAEF,gBAAAA,WAAW,EAAE;AAAf,eAAD,CAAd;AAAA,aAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF;;AAQF;AACE,iBACE,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE;AACE,YAAA,SAAS,EAAEP,GAAG,CAACmB,UADjB;AAEE,YAAA,OAAO,EAAE;AAAA,qBAAMV,QAAQ,CAAC;AAAEF,gBAAAA,WAAW,EAAE;AAAf,eAAD,CAAd;AAAA,aAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAOE;AACE,YAAA,SAAS,EAAEP,GAAG,CAACmB,UADjB;AAEE,YAAA,OAAO,EAAE;AAAA,qBAAMV,QAAQ,CAAC;AAAEF,gBAAAA,WAAW,EAAE;AAAf,eAAD,CAAd;AAAA,aAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAPF,CADF;AAtCJ;AAuDD,KAxDD,MAwDO;AACL,aACE,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,SAAS,EAAEP,GAAG,CAACmB,UADjB;AAEE,QAAA,OAAO,EAAE;AAAA,iBAAMV,QAAQ,CAAC;AAAEF,YAAAA,WAAW,EAAE;AAAf,WAAD,CAAd;AAAA,SAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAOE;AACE,QAAA,SAAS,EAAEP,GAAG,CAACmB,UADjB;AAEE,QAAA,OAAO,EAAE;AAAA,iBAAMV,QAAQ,CAAC;AAAEF,YAAAA,WAAW,EAAE;AAAf,WAAD,CAAd;AAAA,SAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF,CADF;AAgBD;AACF,GA3ED;;AA6EA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAEP,GAAG,CAACoB,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAS,IAAA,SAAS,EAAEpB,GAAG,CAACqB,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAS,IAAA,SAAS,EAAErB,GAAG,CAACsB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,cAAc,EADjB,EAEE;AAAQ,IAAA,SAAS,EAAElB,GAAG,CAACuB,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,CAFF,EAME;AAAS,IAAA,SAAS,EAAEvB,GAAG,CAACE,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAEF,GAAG,CAACwB,aAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoCd,cAAc,EAAlD,CADF,CANF,CADF,CADF;AAcD;;GArKuBT,O;;KAAAA,O;;AAgLxBA,OAAO,CAACwB,eAAR;AAAA,uEAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AACxBC,YAAAA,KADwB,SACxBA,KADwB;;AAAA,iBAGpBA,KAAK,CAACC,OAHc;AAAA;AAAA;AAAA;;AAIhBC,YAAAA,gBAJgB,GAIWF,KAAK,CAACC,OAAN,CAAcE,QAAd,EAJX;AAKhBC,YAAAA,eALgB,GAKYF,gBAAgB,CAACG,KAAjB,CAAuB,GAAvB,CALZ;AAOhBC,YAAAA,kBAPgB,GAOmB,EAPnB;AAStBF,YAAAA,eAAe,CAACG,OAAhB,CAAwB,UAACC,KAAD,EAAW;AACjC,kBAAMC,YAAoB,GAAGD,KAAK,CAACE,MAAN,CAAa,GAAb,CAA7B;AACA,kBAAID,YAAY,KAAK,CAAC,CAAtB,EAAyB,OAAzB,KACK;AACH,oBAAME,QAAgB,GAAGH,KAAK,CAACI,SAAN,CAAgB,CAAhB,EAAmBH,YAAnB,CAAzB;AACA,oBAAMI,UAAkB,GAAGL,KAAK,CAACI,SAAN,CAAgBH,YAAY,GAAG,CAA/B,CAA3B;AACAH,gBAAAA,kBAAkB,CAACK,QAAD,CAAlB,GAA+BE,UAA/B;AACD;AACF,aARD;;AAUMC,YAAAA,QAnBgB;AAsBpB,gCAAYC,YAAZ,EAAwC;AAAA;;AAAA;;AAAA;;AACtC,qBAAKA,YAAL,GAAoBA,YAApB;AACA,qBAAKvC,OAAL,GAAe;AACbC,kBAAAA,KAAK,EAAE;AAAEU,oBAAAA,MAAM,EAAE,EAAV;AAAcC,oBAAAA,MAAM,EAAE;AAAtB,mBADM;AAEbV,kBAAAA,MAAM,EAAE;AAAEsC,oBAAAA,UAAU,EAAE,EAAd;AAAkBC,oBAAAA,UAAU,EAAE,EAA9B;AAAkCC,oBAAAA,YAAY,EAAE;AAAhD;AAFK,iBAAf;AAID;;AA5BmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCA+BgC/C,kBAAkB,CAClE,KAAK4C,YAD6D,CA/BlD;;AAAA;AA+BZI,4BAAAA,sBA/BY;AAkClBlC,4BAAAA,KAAK,CAACC,OAAN,CAAciC,sBAAd,IACK,KAAK3C,OAAL,CAAaC,KAAb,CAAmBU,MAAnB,GAA4BgC,sBADjC,GAEK,KAAK3C,OAAL,CAAaE,MAAb,CAAoBsC,UAApB,aAAoCG,sBAApC,CAFL;;AAlCkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAuC4B/C,cAAc,CAC1D,KAAK2C,YADqD,CAvC1C;;AAAA;AAuCZK,4BAAAA,kBAvCY;AA0ClBnC,4BAAAA,KAAK,CAACC,OAAN,CAAckC,kBAAd,IACK,KAAK5C,OAAL,CAAaC,KAAb,CAAmBW,MAAnB,gCACI,KAAKZ,OAAL,CAAaC,KAAb,CAAmBW,MADvB,sBAEIgC,kBAFJ,EADL,GAKK,KAAK5C,OAAL,CAAaE,MAAb,CAAoBuC,UAApB,aAAoCG,kBAApC,CALL;;AA1CkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAkD8B/C,gBAAgB,CAC9D,KAAK0C,YADyD,CAlD9C;;AAAA;AAkDZM,4BAAAA,oBAlDY;AAqDlBpC,4BAAAA,KAAK,CAACC,OAAN,CAAcmC,oBAAd,IACK,KAAK7C,OAAL,CAAaC,KAAb,CAAmBW,MAAnB,gCACI,KAAKZ,OAAL,CAAaC,KAAb,CAAmBW,MADvB,sBAEIiC,oBAFJ,EADL,GAKK,KAAK7C,OAAL,CAAaE,MAAb,CAAoBwC,YAApB,aAAsCG,oBAAtC,CALL;;AArDkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AA8DhBC,YAAAA,QA9DgB;AAAA,mFA8DqC,kBACzD3C,UADyD;AAAA;AAAA;AAAA;AAAA;AAAA;AAGnD4C,wBAAAA,OAHmD,GAGzC,IAAIT,QAAJ,CAAaR,kBAAb,CAHyC;AAAA;AAAA,uCAM/C3B,UAN+C;AAAA,0DAOhD,QAPgD,wBAYhD,QAZgD,wBAgBhD,KAhBgD;AAAA;;AAAA;AAQnD4C,wBAAAA,OAAO,CAACC,cAAR;AARmD,0DAU5CD,OAAO,CAAC/C,OAVoC;;AAAA;AAanD+C,wBAAAA,OAAO,CAACN,UAAR;AACAM,wBAAAA,OAAO,CAACE,YAAR;AAdmD,0DAe5CF,OAAO,CAAC/C,OAfoC;;AAAA;AAiBnD+C,wBAAAA,OAAO,CAACC,cAAR;AACAD,wBAAAA,OAAO,CAACN,UAAR;AACAM,wBAAAA,OAAO,CAACE,YAAR;AAnBmD,0DAoB5CF,OAAO,CAAC/C,OApBoC;;AAAA;AAsBnD+C,wBAAAA,OAAO,CAACC,cAAR;AACAD,wBAAAA,OAAO,CAACN,UAAR;AACAM,wBAAAA,OAAO,CAACE,YAAR;AAxBmD,0DAyB5CF,OAAO,CAAC/C,OAzBoC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA4BvD+C,wBAAAA,OAAO,CAAC/C,OAAR,CAAgBE,MAAhB,CAAuBsC,UAAvB,GAAoC,YAApC;AACAO,wBAAAA,OAAO,CAAC/C,OAAR,CAAgBE,MAAhB,CAAuBuC,UAAvB,GAAoC,YAApC;AACAM,wBAAAA,OAAO,CAAC/C,OAAR,CAAgBE,MAAhB,CAAuBwC,YAAvB,GAAsC,YAAtC;AA9BuD,0DA+BhDK,OAAO,CAAC/C,OA/BwC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eA9DrC;;AAAA,8BA8DhB8C,QA9DgB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAiGSA,QAAQ,CAAChB,kBAAkB,CAAC3B,UAApB,CAjGjB;;AAAA;AAiGhBH,YAAAA,OAjGgB;AAAA,8CAmGf;AACLA,cAAAA,OAAO,EAAPA,OADK;AAELG,cAAAA,UAAU,EAAE2B,kBAAkB,CAAC3B;AAF1B,aAnGe;;AAAA;AAAA,8CAwGf;AAAEH,cAAAA,OAAO,EAAE,EAAX;AAAeG,cAAAA,UAAU,EAAE;AAA3B,aAxGe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import * as React from \"react\";\r\nimport { Layout, ResultCard } from \"../../components\";\r\nimport {\r\n  yelpBusinessesCall,\r\n  yelpEventsCall,\r\n  ticketMasterCall,\r\n} from \"../../apicalls\";\r\nimport css from \"../../styles/Queried.module.scss\";\r\n\r\nexport default function Queried({\r\n  results: { items, errors },\r\n  searchType,\r\n}): JSX.Element {\r\n  const [state, setState] = React.useState({\r\n    resultsType: searchType !== \"ALL\" ? searchType : \"PLACES\",\r\n  });\r\n\r\n  //   React.useEffect(() => {\r\n  //     switch(searchType){\r\n  //       case \"EVENTS\":\r\n  //         return setState({resultsType: \"Events\"})\r\n  //       case \"PLACES\":\r\n  //         return setState({resultsType: \"Places\"})\r\n  //       case \"ALL\":\r\n  //         return setState({resultsType: \"Places\"})\r\n  //       default:\r\n  //         return setState({})\r\n  //     }\r\n  // },[])\r\n  const determineItems: () => JSX.Element | null = () => {\r\n    if (!items) return null;\r\n    switch (searchType) {\r\n      case \"ALL\":\r\n        if (Array.isArray(items.places) && Array.isArray(items.events)) {\r\n          return state.resultsType === \"PLACES\"\r\n            ? items.places.map((item) => (\r\n                <ResultCard key={item.id} item={item}></ResultCard>\r\n              ))\r\n            : items.events.map((item) => (\r\n                <ResultCard key={item.id} item={item}></ResultCard>\r\n              ));\r\n        } else {\r\n          return null;\r\n        }\r\n\r\n      case \"PLACES\":\r\n        return Array.isArray(items.places)\r\n          ? items.places.map((item) => (\r\n              <ResultCard key={item.id} item={item}></ResultCard>\r\n            ))\r\n          : null;\r\n      case \"EVENTS\":\r\n        return Array.isArray(items.events)\r\n          ? items.events.map((item) => (\r\n              <ResultCard key={item.id} item={item}></ResultCard>\r\n            ))\r\n          : null;\r\n      default:\r\n        if (Array.isArray(items.places) && Array.isArray(items.events)) {\r\n          return state.resultsType === \"PLACES\"\r\n            ? items.places.map((item) => (\r\n                <ResultCard key={item.id} item={item}></ResultCard>\r\n              ))\r\n            : items.events.map((item) => (\r\n                <ResultCard key={item.id} item={item}></ResultCard>\r\n              ));\r\n        } else {\r\n          return null;\r\n        }\r\n    }\r\n  };\r\n\r\n  // React.useEffect(() => {\r\n  //   if (searchType) {\r\n  //     switch (searchType) {\r\n  //       case \"ALL\":\r\n  //         return setState({ resultsType: \"Places\" });\r\n  //       case \"EVENTS\":\r\n  //         return setState({ resultsType: \"Events\" });\r\n  //     }\r\n  //   }\r\n  // });\r\n\r\n  const setTypeButtons: () => JSX.Element = () => {\r\n    if (searchType) {\r\n      switch (searchType) {\r\n        case \"ALL\":\r\n          return (\r\n            <React.Fragment>\r\n              <button\r\n                className={css.typeButton}\r\n                onClick={() => setState({ resultsType: \"PLACES\" })}\r\n              >\r\n                Places\r\n              </button>\r\n              <button\r\n                className={css.typeButton}\r\n                onClick={() => setState({ resultsType: \"EVENTS\" })}\r\n              >\r\n                Events\r\n              </button>\r\n            </React.Fragment>\r\n          );\r\n        case \"PLACES\":\r\n          return (\r\n            <button\r\n              className={css.typeButton}\r\n              onClick={() => setState({ resultsType: \"PLACES\" })}\r\n            >\r\n              Places\r\n            </button>\r\n          );\r\n\r\n        case \"EVENTS\":\r\n          return (\r\n            <button\r\n              className={css.typeButton}\r\n              onClick={() => setState({ resultsType: \"EVENTS\" })}\r\n            >\r\n              Events\r\n            </button>\r\n          );\r\n        default:\r\n          return (\r\n            <React.Fragment>\r\n              <button\r\n                className={css.typeButton}\r\n                onClick={() => setState({ resultsType: \"PLACES\" })}\r\n              >\r\n                Places\r\n              </button>\r\n              <button\r\n                className={css.typeButton}\r\n                onClick={() => setState({ resultsType: \"EVENTS\" })}\r\n              >\r\n                Events\r\n              </button>\r\n            </React.Fragment>\r\n          );\r\n      }\r\n    } else {\r\n      return (\r\n        <React.Fragment>\r\n          <button\r\n            className={css.typeButton}\r\n            onClick={() => setState({ resultsType: \"PLACES\" })}\r\n          >\r\n            Places\r\n          </button>\r\n          <button\r\n            className={css.typeButton}\r\n            onClick={() => setState({ resultsType: \"EVENTS\" })}\r\n          >\r\n            Events\r\n          </button>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <main className={css.queriedPage}>\r\n        <section className={css.queryDisplay}></section>\r\n        <section className={css.header}>\r\n          {setTypeButtons()}\r\n          <button className={css.sort}>Sort</button>\r\n        </section>\r\n        <section className={css.results}>\r\n          <div className={css.resultsSlider}>{determineItems()}</div>\r\n        </section>\r\n      </main>\r\n    </Layout>\r\n  );\r\n}\r\n\r\ntype Results = {\r\n  items: { places: { [key: string]: any }[]; events: { [key: string]: any }[] };\r\n  errors: { yelpPlaces: string; yelpEvents: string; ticketmaster: string };\r\n};\r\n\r\ntype APIResponse = Promise<{ [key: string]: any }[] | string>;\r\n\r\ntype SearchParams = { [key: string]: any };\r\n\r\nQueried.getInitialProps = async ({\r\n  query,\r\n}): Promise<{ results: any; searchType: string }> => {\r\n  if (query.queried) {\r\n    const checkURLIsString: string = query.queried.toString();\r\n    const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n    const searchParamsValues: SearchParams = {};\r\n\r\n    paramValueArray.forEach((param) => {\r\n      const indexOfEqual: number = param.search(\"=\");\r\n      if (indexOfEqual === -1) return;\r\n      else {\r\n        const paramKey: string = param.substring(0, indexOfEqual);\r\n        const paramValue: string = param.substring(indexOfEqual + 1);\r\n        searchParamsValues[paramKey] = paramValue;\r\n      }\r\n    });\r\n\r\n    class APICalls {\r\n      searchParams: SearchParams;\r\n      results: Results;\r\n      constructor(searchParams: SearchParams) {\r\n        this.searchParams = searchParams;\r\n        this.results = {\r\n          items: { places: [], events: [] },\r\n          errors: { yelpPlaces: \"\", yelpEvents: \"\", ticketmaster: \"\" },\r\n        };\r\n      }\r\n\r\n      public async yelpBusinesses() {\r\n        const yelpBusinessesResponse: APIResponse = await yelpBusinessesCall(\r\n          this.searchParams\r\n        );\r\n        Array.isArray(yelpBusinessesResponse)\r\n          ? (this.results.items.places = yelpBusinessesResponse)\r\n          : (this.results.errors.yelpPlaces = `${yelpBusinessesResponse}`);\r\n      }\r\n      public async yelpEvents() {\r\n        const yelpEventsResponse: APIResponse = await yelpEventsCall(\r\n          this.searchParams\r\n        );\r\n        Array.isArray(yelpEventsResponse)\r\n          ? (this.results.items.events = [\r\n              ...this.results.items.events,\r\n              ...yelpEventsResponse,\r\n            ])\r\n          : (this.results.errors.yelpEvents = `${yelpEventsResponse}`);\r\n      }\r\n      public async ticketMaster() {\r\n        const ticketMasterResponse: APIResponse = await ticketMasterCall(\r\n          this.searchParams\r\n        );\r\n        Array.isArray(ticketMasterResponse)\r\n          ? (this.results.items.events = [\r\n              ...this.results.items.events,\r\n              ...ticketMasterResponse,\r\n            ])\r\n          : (this.results.errors.ticketmaster = `${ticketMasterResponse}`);\r\n      }\r\n    }\r\n\r\n    const callAPIS: (searchType: string) => Promise<Results> = async (\r\n      searchType\r\n    ) => {\r\n      const APICall = new APICalls(searchParamsValues);\r\n\r\n      try {\r\n        switch (searchType) {\r\n          case \"PLACES\":\r\n            APICall.yelpBusinesses();\r\n\r\n            return APICall.results;\r\n\r\n          case \"EVENTS\":\r\n            APICall.yelpEvents();\r\n            APICall.ticketMaster();\r\n            return APICall.results;\r\n          case \"ALL\":\r\n            APICall.yelpBusinesses();\r\n            APICall.yelpEvents();\r\n            APICall.ticketMaster();\r\n            return APICall.results;\r\n          default:\r\n            APICall.yelpBusinesses();\r\n            APICall.yelpEvents();\r\n            APICall.ticketMaster();\r\n            return APICall.results;\r\n        }\r\n      } catch {\r\n        APICall.results.errors.yelpPlaces = \"CALL ERROR\";\r\n        APICall.results.errors.yelpEvents = \"CALL ERROR\";\r\n        APICall.results.errors.ticketmaster = \"CALL ERROR\";\r\n        return APICall.results;\r\n      }\r\n    };\r\n\r\n    const results: Results = await callAPIS(searchParamsValues.searchType);\r\n\r\n    return {\r\n      results,\r\n      searchType: searchParamsValues.searchType,\r\n    };\r\n  } else {\r\n    return { results: {}, searchType: \"ALL\" };\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}