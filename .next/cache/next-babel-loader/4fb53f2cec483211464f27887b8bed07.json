{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { Layout, ResultCard, SekndLoader } from \"../../components\";\nimport useAPICalls from \"../../swr/useAPICalls\";\nimport { useRouter } from \"next/router\";\nimport css from \"../../styles/Queried.module.scss\";\nexport default function Queried() {\n  const router = useRouter();\n  const urlStart = true ? \"http://localhost:3000\" : \"https://sekndapp.com\";\n\n  const setSearchParameters = () => {\n    const {\n      query\n    } = router;\n    if (!query.queried) return null;\n    if (query.searchType) return query;\n    const checkURLIsString = query.queried.toString();\n    const paramValueArray = checkURLIsString.split(\"+\");\n    const SearchParams = {};\n    paramValueArray.forEach(param => {\n      const indexOfEqual = param.search(\"=\");\n      if (indexOfEqual === -1) return;else {\n        const paramKey = param.substring(0, indexOfEqual);\n        const paramValue = param.substring(indexOfEqual + 1);\n        SearchParams[paramKey] = paramValue;\n      }\n    });\n    return SearchParams;\n  };\n\n  const {\n    items,\n    loading,\n    errors\n  } = useAPICalls(setSearchParameters(), urlStart);\n\n  const mapItems = items => {\n    return items.map(item => {\n      return __jsx(ResultCard, {\n        key: item.id,\n        item: item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 14\n        }\n      });\n    });\n  };\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, __jsx(\"main\", {\n    className: css.queriedPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, __jsx(\"section\", {\n    className: css.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, __jsx(\"button\", {\n    className: css.sort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, \"Sort\")), loading ? __jsx(SekndLoader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }) : __jsx(\"div\", {\n    className: css.resultsSlider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, mapItems(items))));\n}","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","Layout","ResultCard","SekndLoader","useAPICalls","useRouter","css","Queried","router","urlStart","setSearchParameters","query","queried","searchType","checkURLIsString","toString","paramValueArray","split","SearchParams","forEach","param","indexOfEqual","search","paramKey","substring","paramValue","items","loading","errors","mapItems","map","item","id","queriedPage","header","sort","resultsSlider"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,EAAiBC,UAAjB,EAA6BC,WAA7B,QAAgD,kBAAhD;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,SAAqBC,SAArB,QAAsC,aAAtC;AACA,OAAOC,GAAP,MAAgB,kCAAhB;AAeA,eAAe,SAASC,OAAT,GAAgC;AAC7C,QAAMC,MAAkB,GAAGH,SAAS,EAApC;AAEA,QAAMI,QAAgB,GACpB,OACI,uBADJ,GAEI,sBAHN;;AAKA,QAAMC,mBAAwD,GAAG,MAAM;AACrE,UAAM;AAAEC,MAAAA;AAAF,QAAYH,MAAlB;AACA,QAAI,CAACG,KAAK,CAACC,OAAX,EAAoB,OAAO,IAAP;AACpB,QAAID,KAAK,CAACE,UAAV,EAAsB,OAAOF,KAAP;AAEtB,UAAMG,gBAAwB,GAAGH,KAAK,CAACC,OAAN,CAAcG,QAAd,EAAjC;AACA,UAAMC,eAAyB,GAAGF,gBAAgB,CAACG,KAAjB,CAAuB,GAAvB,CAAlC;AAEA,UAAMC,YAA0B,GAAG,EAAnC;AAEAF,IAAAA,eAAe,CAACG,OAAhB,CAAyBC,KAAD,IAAW;AACjC,YAAMC,YAAoB,GAAGD,KAAK,CAACE,MAAN,CAAa,GAAb,CAA7B;AACA,UAAID,YAAY,KAAK,CAAC,CAAtB,EAAyB,OAAzB,KACK;AACH,cAAME,QAAgB,GAAGH,KAAK,CAACI,SAAN,CAAgB,CAAhB,EAAmBH,YAAnB,CAAzB;AACA,cAAMI,UAAkB,GAAGL,KAAK,CAACI,SAAN,CAAgBH,YAAY,GAAG,CAA/B,CAA3B;AACAH,QAAAA,YAAY,CAACK,QAAD,CAAZ,GAAyBE,UAAzB;AACD;AACF,KARD;AASA,WAAOP,YAAP;AACD,GApBD;;AAsBA,QAAM;AAAEQ,IAAAA,KAAF;AAASC,IAAAA,OAAT;AAAkBC,IAAAA;AAAlB,MAA6BxB,WAAW,CAC5CM,mBAAmB,EADyB,EAE5CD,QAF4C,CAA9C;;AAKA,QAAMoB,QAA2D,GAC/DH,KADkE,IAE/D;AACH,WAAOA,KAAK,CAACI,GAAN,CAAWC,IAAD,IAAU;AACzB,aAAO,MAAC,UAAD;AAAY,QAAA,GAAG,EAAEA,IAAI,CAACC,EAAtB;AAA0B,QAAA,IAAI,EAAED,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAFM,CAAP;AAGD,GAND;;AAQA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAEzB,GAAG,CAAC2B,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE;AAAS,IAAA,SAAS,EAAE3B,GAAG,CAAC4B,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,SAAS,EAAE5B,GAAG,CAAC6B,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,CAFF,EAKGR,OAAO,GACN,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADM,GAGN;AAAK,IAAA,SAAS,EAAErB,GAAG,CAAC8B,aAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoCP,QAAQ,CAACH,KAAD,CAA5C,CARJ,CADF,CADF;AAeD","sourcesContent":["import * as React from \"react\";\r\nimport { Layout, ResultCard, SekndLoader } from \"../../components\";\r\nimport useAPICalls from \"../../swr/useAPICalls\";\r\nimport { NextRouter, useRouter } from \"next/router\";\r\nimport css from \"../../styles/Queried.module.scss\";\r\n\r\ntype Results = {\r\n  items: { [key: string]: any }[];\r\n  errors: {\r\n    yelpPlacesError?: string | undefined;\r\n    yelpEventsError?: string | undefined;\r\n    ticketmasterError?: string | undefined;\r\n  };\r\n};\r\n\r\ntype APIResponse = { [key: string]: any }[];\r\n\r\ntype SearchParams = { [key: string]: any };\r\n\r\nexport default function Queried(): JSX.Element {\r\n  const router: NextRouter = useRouter();\r\n\r\n  const urlStart: string =\r\n    process.env.NODE_ENV !== \"production\"\r\n      ? \"http://localhost:3000\"\r\n      : \"https://sekndapp.com\";\r\n\r\n  const setSearchParameters: () => { [key: string]: any } | null = () => {\r\n    const { query } = router;\r\n    if (!query.queried) return null;\r\n    if (query.searchType) return query;\r\n\r\n    const checkURLIsString: string = query.queried.toString();\r\n    const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n    const SearchParams: SearchParams = {};\r\n\r\n    paramValueArray.forEach((param) => {\r\n      const indexOfEqual: number = param.search(\"=\");\r\n      if (indexOfEqual === -1) return;\r\n      else {\r\n        const paramKey: string = param.substring(0, indexOfEqual);\r\n        const paramValue: string = param.substring(indexOfEqual + 1);\r\n        SearchParams[paramKey] = paramValue;\r\n      }\r\n    });\r\n    return SearchParams;\r\n  };\r\n\r\n  const { items, loading, errors } = useAPICalls(\r\n    setSearchParameters(),\r\n    urlStart\r\n  );\r\n\r\n  const mapItems: (items: Results[\"items\"]) => JSX.Element[] | null = (\r\n    items\r\n  ) => {\r\n    return items.map((item) => {\r\n      return <ResultCard key={item.id} item={item}></ResultCard>;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <main className={css.queriedPage}>\r\n        {/* <section className={css.queryDisplay}></section> */}\r\n        <section className={css.header}>\r\n          <button className={css.sort}>Sort</button>\r\n        </section>\r\n        {loading ? (\r\n          <SekndLoader></SekndLoader>\r\n        ) : (\r\n          <div className={css.resultsSlider}>{mapItems(items)}</div>\r\n        )}\r\n      </main>\r\n    </Layout>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}