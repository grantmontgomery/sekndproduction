{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { Layout } from \"../../components\";\nexport default function Queried(props) {\n  console.log(props);\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }\n  }, __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }\n  }), __jsx(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }\n  }));\n}\nexport const getServerSideProps = async ({\n  params\n}) => {\n  const checkURLIsString = params.queried.toString();\n  const paramValueArray = checkURLIsString.split(\"+\");\n  const searchParamsValues = {};\n  paramValueArray.forEach(param => {\n    const indexOfEqual = param.search(\"=\");\n    if (indexOfEqual === -1) return;else {\n      const paramKey = param.substring(0, indexOfEqual);\n      const paramValue = param.substring(indexOfEqual + 1);\n      searchParamsValues[paramKey] = paramValue;\n    }\n  });\n  const response = await fetch(\"/api/yelpBusinessesAPI\", {\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    method: \"POST\",\n    body: JSON.stringify({\n      location: searchParamsValues.location,\n      radius: searchParamsValues.radius,\n      term: searchParamsValues.placeType\n    })\n  });\n  const responseJSON = await response.json();\n  return {\n    props: {\n      responseJSON\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","Layout","Queried","props","console","log","getServerSideProps","params","checkURLIsString","queried","toString","paramValueArray","split","searchParamsValues","forEach","param","indexOfEqual","search","paramKey","substring","paramValue","response","fetch","headers","Accept","method","body","JSON","stringify","location","radius","term","placeType","responseJSON","json"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,MAAT,QAAuB,kBAAvB;AAGA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACrCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,SACE,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD;AAED,OAAO,MAAMG,kBAAsC,GAAG,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAsB;AAC1E,QAAMC,gBAAwB,GAAGD,MAAM,CAACE,OAAP,CAAeC,QAAf,EAAjC;AACA,QAAMC,eAAyB,GAAGH,gBAAgB,CAACI,KAAjB,CAAuB,GAAvB,CAAlC;AAEA,QAAMC,kBAA6C,GAAG,EAAtD;AAEAF,EAAAA,eAAe,CAACG,OAAhB,CAAyBC,KAAD,IAAW;AACjC,UAAMC,YAAoB,GAAGD,KAAK,CAACE,MAAN,CAAa,GAAb,CAA7B;AACA,QAAID,YAAY,KAAK,CAAC,CAAtB,EAAyB,OAAzB,KACK;AACH,YAAME,QAAgB,GAAGH,KAAK,CAACI,SAAN,CAAgB,CAAhB,EAAmBH,YAAnB,CAAzB;AACA,YAAMI,UAAkB,GAAGL,KAAK,CAACI,SAAN,CAAgBH,YAAY,GAAG,CAA/B,CAA3B;AACAH,MAAAA,kBAAkB,CAACK,QAAD,CAAlB,GAA+BE,UAA/B;AACD;AACF,GARD;AAUA,QAAMC,QAAkB,GAAG,MAAMC,KAAK,CAAC,wBAAD,EAA2B;AAC/DC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,kBADD;AAEP,sBAAgB;AAFT,KADsD;AAK/DC,IAAAA,MAAM,EAAE,MALuD;AAM/DC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,MAAAA,QAAQ,EAAEhB,kBAAkB,CAACgB,QADV;AAEnBC,MAAAA,MAAM,EAAEjB,kBAAkB,CAACiB,MAFR;AAGnBC,MAAAA,IAAI,EAAElB,kBAAkB,CAACmB;AAHN,KAAf;AANyD,GAA3B,CAAtC;AAaA,QAAMC,YAAY,GAAG,MAAMZ,QAAQ,CAACa,IAAT,EAA3B;AAEA,SAAO;AACL/B,IAAAA,KAAK,EAAE;AAAE8B,MAAAA;AAAF;AADF,GAAP;AAGD,CAlCM","sourcesContent":["import * as React from \"react\";\r\nimport { GetServerSideProps } from \"next\";\r\nimport { Layout } from \"../../components\";\r\nimport { useRouter } from \"next/router\";\r\n\r\nexport default function Queried(props) {\r\n  console.log(props);\r\n  return (\r\n    <React.Fragment>\r\n      <Layout></Layout>\r\n      <main></main>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport const getServerSideProps: GetServerSideProps = async ({ params }) => {\r\n  const checkURLIsString: string = params.queried.toString();\r\n  const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n  const searchParamsValues: { [key: string]: string } = {};\r\n\r\n  paramValueArray.forEach((param) => {\r\n    const indexOfEqual: number = param.search(\"=\");\r\n    if (indexOfEqual === -1) return;\r\n    else {\r\n      const paramKey: string = param.substring(0, indexOfEqual);\r\n      const paramValue: string = param.substring(indexOfEqual + 1);\r\n      searchParamsValues[paramKey] = paramValue;\r\n    }\r\n  });\r\n\r\n  const response: Response = await fetch(\"/api/yelpBusinessesAPI\", {\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    method: \"POST\",\r\n    body: JSON.stringify({\r\n      location: searchParamsValues.location,\r\n      radius: searchParamsValues.radius,\r\n      term: searchParamsValues.placeType,\r\n    }),\r\n  });\r\n\r\n  const responseJSON = await response.json();\r\n\r\n  return {\r\n    props: { responseJSON },\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}