{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nexport var ticketMasterCall = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var location, radius, startFormated, endFormatted, response, responseJson, events;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            location = _ref.location, radius = _ref.radius, startFormated = _ref.startFormated, endFormatted = _ref.endFormatted;\n            _context.prev = 1;\n            _context.next = 4;\n            return fetch(\"/api/ticketmasterAPI\", {\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n              },\n              method: \"POST\",\n              body: JSON.stringify({\n                location: location,\n                radius: Math.floor(parseInt(radius) * 0.001).toString(),\n                startDateTime: startFormated,\n                endDateTime: endFormatted\n              })\n            });\n\n          case 4:\n            response = _context.sent;\n            _context.next = 7;\n            return response.json();\n\n          case 7:\n            responseJson = _context.sent;\n            events = responseJson._embedded.events;\n            console.log(responseJson);\n            return _context.abrupt(\"return\", events);\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](1);\n            return _context.abrupt(\"return\", _context.t0.message);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 13]]);\n  }));\n\n  return function ticketMasterCall(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/apicalls/ticketmasterCall.ts"],"names":["ticketMasterCall","location","radius","startFormated","endFormatted","fetch","headers","Accept","method","body","JSON","stringify","Math","floor","parseInt","toString","startDateTime","endDateTime","response","json","responseJson","events","_embedded","console","log","message"],"mappings":";;AAIA,OAAO,IAAMA,gBAKa;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3BC,YAAAA,QAD2B,QAC3BA,QAD2B,EAE3BC,MAF2B,QAE3BA,MAF2B,EAG3BC,aAH2B,QAG3BA,aAH2B,EAI3BC,YAJ2B,QAI3BA,YAJ2B;AAAA;AAAA;AAAA,mBAOQC,KAAK,CAAC,sBAAD,EAAyB;AAC7DC,cAAAA,OAAO,EAAE;AACPC,gBAAAA,MAAM,EAAE,kBADD;AAEP,gCAAgB;AAFT,eADoD;AAK7DC,cAAAA,MAAM,EAAE,MALqD;AAM7DC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBV,gBAAAA,QAAQ,EAARA,QADmB;AAEnBC,gBAAAA,MAAM,EAAEU,IAAI,CAACC,KAAL,CAAWC,QAAQ,CAACZ,MAAD,CAAR,GAAmB,KAA9B,EAAqCa,QAArC,EAFW;AAGnBC,gBAAAA,aAAa,EAAEb,aAHI;AAInBc,gBAAAA,WAAW,EAAEb;AAJM,eAAf;AANuD,aAAzB,CAPb;;AAAA;AAOnBc,YAAAA,QAPmB;AAAA;AAAA,mBAoBEA,QAAQ,CAACC,IAAT,EApBF;;AAAA;AAoBnBC,YAAAA,YApBmB;AAsBVC,YAAAA,MAtBU,GAuBrBD,YAvBqB,CAsBvBE,SAtBuB,CAsBVD,MAtBU;AAyBzBE,YAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAZ;AAzByB,6CA2BlBC,MA3BkB;;AAAA;AAAA;AAAA;AAAA,6CA6BlB,YAAII,OA7Bc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBALbzB,gBAKa;AAAA;AAAA;AAAA,GALnB","sourcesContent":["type Params = {\r\n  [key: string]: string;\r\n};\r\n\r\nexport const ticketMasterCall: ({\r\n  location,\r\n  radius,\r\n  startFormated,\r\n  endFormatted,\r\n}: Params) => Promise<any> = async ({\r\n  location,\r\n  radius,\r\n  startFormated,\r\n  endFormatted,\r\n}) => {\r\n  try {\r\n    const response: Response = await fetch(\"/api/ticketmasterAPI\", {\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        location,\r\n        radius: Math.floor(parseInt(radius) * 0.001).toString(),\r\n        startDateTime: startFormated,\r\n        endDateTime: endFormatted,\r\n      }),\r\n    });\r\n    const responseJson = await response.json();\r\n    const {\r\n      _embedded: { events },\r\n    } = responseJson;\r\n\r\n    console.log(responseJson);\r\n\r\n    return events;\r\n  } catch (err) {\r\n    return err.message;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}