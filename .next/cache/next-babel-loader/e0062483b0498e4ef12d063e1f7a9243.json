{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from \"react\";\nimport { yelpBusinessesCall, yelpEventsCall, ticketMasterCall } from \"../../apicalls\";\nexport default function Queried({\n  results,\n  searchType,\n  queried,\n  asPath,\n  pathname\n}) {\n  const [state, setState] = React.useState({\n    resultsType: \"Events\"\n  });\n  console.log(results);\n  console.log(queried);\n  console.log(asPath);\n  console.log(pathname);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 10\n    }\n  }); // console.log(items);\n  // const determineItems: () => JSX.Element | null = () => {\n  //   if (!items) return null;\n  //   switch (searchType) {\n  //     case \"ALL\":\n  //       if (Array.isArray(items.places) && Array.isArray(items.events)) {\n  //         return state.resultsType === \"Places\"\n  //           ? items.places.map((item) => (\n  //               <ResultCard key={item.id} item={item}></ResultCard>\n  //             ))\n  //           : items.events.map((item) => (\n  //               <ResultCard key={item.id} item={item}></ResultCard>\n  //             ));\n  //       } else {\n  //         return null;\n  //       }\n  //     case \"PLACES\":\n  //       return Array.isArray(items.places)\n  //         ? items.places.map((item) => (\n  //             <ResultCard key={item.id} item={item}></ResultCard>\n  //           ))\n  //         : null;\n  //     case \"EVENTS\":\n  //       return Array.isArray(items.events)\n  //         ? items.events.map((item) => (\n  //             <ResultCard key={item.id} item={item}></ResultCard>\n  //           ))\n  //         : null;\n  //     default:\n  //       if (Array.isArray(items.places) && Array.isArray(items.events)) {\n  //         return state.resultsType === \"Places\"\n  //           ? items.places.map((item) => (\n  //               <ResultCard key={item.id} item={item}></ResultCard>\n  //             ))\n  //           : items.events.map((item) => (\n  //               <ResultCard key={item.id} item={item}></ResultCard>\n  //             ));\n  //       } else {\n  //         return null;\n  //       }\n  //   }\n  // };\n  // // React.useEffect(() => {\n  // //   if (searchType) {\n  // //     switch (searchType) {\n  // //       case \"ALL\":\n  // //         return setState({ resultsType: \"Places\" });\n  // //       case \"EVENTS\":\n  // //         return setState({ resultsType: \"Events\" });\n  // //     }\n  // //   }\n  // // });\n  // const setTypeButtons: () => JSX.Element = () => {\n  //   if (searchType) {\n  //     switch (searchType) {\n  //       case \"ALL\":\n  //         return (\n  //           <React.Fragment>\n  //             <button\n  //               className={css.typeButton}\n  //               onClick={() => setState({ resultsType: \"Places\" })}\n  //             >\n  //               Places\n  //             </button>\n  //             <button\n  //               className={css.typeButton}\n  //               onClick={() => setState({ resultsType: \"Events\" })}\n  //             >\n  //               Events\n  //             </button>\n  //           </React.Fragment>\n  //         );\n  //       case \"PLACES\":\n  //         return (\n  //           <button\n  //             className={css.typeButton}\n  //             onClick={() => setState({ resultsType: \"Places\" })}\n  //           >\n  //             Places\n  //           </button>\n  //         );\n  //       case \"EVENTS\":\n  //         return (\n  //           <button\n  //             className={css.typeButton}\n  //             onClick={() => setState({ resultsType: \"Events\" })}\n  //           >\n  //             Events\n  //           </button>\n  //         );\n  //       default:\n  //         return (\n  //           <React.Fragment>\n  //             <button\n  //               className={css.typeButton}\n  //               onClick={() => setState({ resultsType: \"Places\" })}\n  //             >\n  //               Places\n  //             </button>\n  //             <button\n  //               className={css.typeButton}\n  //               onClick={() => setState({ resultsType: \"Events\" })}\n  //             >\n  //               Events\n  //             </button>\n  //           </React.Fragment>\n  //         );\n  //     }\n  //   } else {\n  //     return (\n  //       <React.Fragment>\n  //         <button\n  //           className={css.typeButton}\n  //           onClick={() => setState({ resultsType: \"Places\" })}\n  //         >\n  //           Places\n  //         </button>\n  //         <button\n  //           className={css.typeButton}\n  //           onClick={() => setState({ resultsType: \"Events\" })}\n  //         >\n  //           Events\n  //         </button>\n  //       </React.Fragment>\n  //     );\n  //   }\n  // };\n  // return (\n  //   <Layout>\n  //     <main className={css.queriedPage}>\n  //       <section className={css.queryDisplay}></section>\n  //       <section className={css.header}>\n  //         {setTypeButtons()}\n  //         <button className={css.sort}>Sort</button>\n  //       </section>\n  //       <section className={css.results}>\n  //         <div className={css.resultsSlider}>{determineItems()}</div>\n  //       </section>\n  //     </main>\n  //   </Layout>\n  // );\n}\n\nQueried.getInitialProps = async ({\n  query,\n  pathname,\n  asPath\n}) => {\n  const {\n    location,\n    radius,\n    placeType,\n    startFormatted,\n    endFormatted,\n    unixStartDate,\n    unixEndDate,\n    eventsCategory,\n    queried\n  } = query;\n  console.log(pathname);\n  console.log(queried);\n  console.log(asPath);\n\n  if (query.queried) {\n    const checkURLIsString = query.queried.toString();\n    const paramValueArray = checkURLIsString.split(\"+\");\n    const searchParamsValues = {};\n    paramValueArray.forEach(param => {\n      const indexOfEqual = param.search(\"=\");\n      if (indexOfEqual === -1) return;else {\n        const paramKey = param.substring(0, indexOfEqual);\n        const paramValue = param.substring(indexOfEqual + 1);\n        searchParamsValues[paramKey] = paramValue;\n      }\n    });\n\n    class APICalls {\n      constructor(searchParams) {\n        _defineProperty(this, \"searchParams\", void 0);\n\n        _defineProperty(this, \"results\", void 0);\n\n        this.searchParams = searchParams;\n        this.results = {\n          items: {\n            places: [],\n            events: []\n          },\n          errors: {\n            yelpPlaces: \"\",\n            yelpEvents: \"\",\n            ticketmaster: \"\"\n          }\n        };\n      }\n\n      async yelpBusinesses() {\n        const yelpBusinessesResponse = await yelpBusinessesCall(this.searchParams);\n        Array.isArray(yelpBusinessesResponse) ? this.results.items.places = yelpBusinessesResponse : this.results.errors.yelpPlaces = `${yelpBusinessesResponse}`;\n      }\n\n      async yelpEvents() {\n        const yelpEventsResponse = await yelpEventsCall(this.searchParams);\n        Array.isArray(yelpEventsResponse) ? this.results.items.events = [...this.results.items.events, ...yelpEventsResponse] : this.results.errors.yelpEvents = `${yelpEventsResponse}`;\n      }\n\n      async ticketMaster() {\n        const ticketMasterResponse = await ticketMasterCall(this.searchParams);\n        Array.isArray(ticketMasterResponse) ? this.results.items.events = [...this.results.items.events, ...ticketMasterResponse] : this.results.errors.ticketmaster = `${ticketMasterResponse}`;\n      }\n\n    }\n\n    const callAPIS = async (searchType) => {\n      const APICall = new APICalls(searchParamsValues);\n\n      try {\n        switch (searchType) {\n          case \"PLACES\":\n            APICall.yelpBusinesses();\n            return APICall.results;\n\n          case \"EVENTS\":\n            APICall.yelpEvents();\n            APICall.ticketMaster();\n            return APICall.results;\n\n          case \"ALL\":\n            APICall.yelpBusinesses();\n            APICall.yelpEvents();\n            APICall.ticketMaster();\n            return APICall.results;\n\n          default:\n            APICall.yelpBusinesses();\n            APICall.yelpEvents();\n            APICall.ticketMaster();\n            return APICall.results;\n        }\n      } catch {\n        APICall.results.errors.yelpPlaces = \"CALL ERROR\";\n        APICall.results.errors.yelpEvents = \"CALL ERROR\";\n        APICall.results.errors.ticketmaster = \"CALL ERROR\";\n        return APICall.results;\n      }\n    };\n\n    const results = await callAPIS(searchParamsValues.searchType);\n    return {\n      results,\n      searchType: searchParamsValues.searchType,\n      pathname,\n      queried,\n      asPath\n    };\n  } else {\n    return {\n      results: {\n        error: \"bruh search is weird.\"\n      },\n      searchType: \"ALL\",\n      pathname,\n      queried,\n      asPath\n    };\n  }\n};","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","yelpBusinessesCall","yelpEventsCall","ticketMasterCall","Queried","results","searchType","queried","asPath","pathname","state","setState","useState","resultsType","console","log","getInitialProps","query","location","radius","placeType","startFormatted","endFormatted","unixStartDate","unixEndDate","eventsCategory","checkURLIsString","toString","paramValueArray","split","searchParamsValues","forEach","param","indexOfEqual","search","paramKey","substring","paramValue","APICalls","constructor","searchParams","items","places","events","errors","yelpPlaces","yelpEvents","ticketmaster","yelpBusinesses","yelpBusinessesResponse","Array","isArray","yelpEventsResponse","ticketMaster","ticketMasterResponse","callAPIS","APICall","error"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { Layout, ResultCard } from \"../../components\";\r\nimport {\r\n  yelpBusinessesCall,\r\n  yelpEventsCall,\r\n  ticketMasterCall,\r\n} from \"../../apicalls\";\r\nimport css from \"../../styles/Queried.module.scss\";\r\n\r\nexport default function Queried({\r\n  results,\r\n  searchType,\r\n  queried,\r\n  asPath,\r\n  pathname,\r\n}): JSX.Element {\r\n  const [state, setState] = React.useState({ resultsType: \"Events\" });\r\n  console.log(results);\r\n  console.log(queried);\r\n  console.log(asPath);\r\n  console.log(pathname);\r\n\r\n  return <div></div>;\r\n\r\n  // console.log(items);\r\n\r\n  // const determineItems: () => JSX.Element | null = () => {\r\n  //   if (!items) return null;\r\n  //   switch (searchType) {\r\n  //     case \"ALL\":\r\n  //       if (Array.isArray(items.places) && Array.isArray(items.events)) {\r\n  //         return state.resultsType === \"Places\"\r\n  //           ? items.places.map((item) => (\r\n  //               <ResultCard key={item.id} item={item}></ResultCard>\r\n  //             ))\r\n  //           : items.events.map((item) => (\r\n  //               <ResultCard key={item.id} item={item}></ResultCard>\r\n  //             ));\r\n  //       } else {\r\n  //         return null;\r\n  //       }\r\n\r\n  //     case \"PLACES\":\r\n  //       return Array.isArray(items.places)\r\n  //         ? items.places.map((item) => (\r\n  //             <ResultCard key={item.id} item={item}></ResultCard>\r\n  //           ))\r\n  //         : null;\r\n  //     case \"EVENTS\":\r\n  //       return Array.isArray(items.events)\r\n  //         ? items.events.map((item) => (\r\n  //             <ResultCard key={item.id} item={item}></ResultCard>\r\n  //           ))\r\n  //         : null;\r\n  //     default:\r\n  //       if (Array.isArray(items.places) && Array.isArray(items.events)) {\r\n  //         return state.resultsType === \"Places\"\r\n  //           ? items.places.map((item) => (\r\n  //               <ResultCard key={item.id} item={item}></ResultCard>\r\n  //             ))\r\n  //           : items.events.map((item) => (\r\n  //               <ResultCard key={item.id} item={item}></ResultCard>\r\n  //             ));\r\n  //       } else {\r\n  //         return null;\r\n  //       }\r\n  //   }\r\n  // };\r\n\r\n  // // React.useEffect(() => {\r\n  // //   if (searchType) {\r\n  // //     switch (searchType) {\r\n  // //       case \"ALL\":\r\n  // //         return setState({ resultsType: \"Places\" });\r\n  // //       case \"EVENTS\":\r\n  // //         return setState({ resultsType: \"Events\" });\r\n  // //     }\r\n  // //   }\r\n  // // });\r\n\r\n  // const setTypeButtons: () => JSX.Element = () => {\r\n  //   if (searchType) {\r\n  //     switch (searchType) {\r\n  //       case \"ALL\":\r\n  //         return (\r\n  //           <React.Fragment>\r\n  //             <button\r\n  //               className={css.typeButton}\r\n  //               onClick={() => setState({ resultsType: \"Places\" })}\r\n  //             >\r\n  //               Places\r\n  //             </button>\r\n  //             <button\r\n  //               className={css.typeButton}\r\n  //               onClick={() => setState({ resultsType: \"Events\" })}\r\n  //             >\r\n  //               Events\r\n  //             </button>\r\n  //           </React.Fragment>\r\n  //         );\r\n  //       case \"PLACES\":\r\n  //         return (\r\n  //           <button\r\n  //             className={css.typeButton}\r\n  //             onClick={() => setState({ resultsType: \"Places\" })}\r\n  //           >\r\n  //             Places\r\n  //           </button>\r\n  //         );\r\n\r\n  //       case \"EVENTS\":\r\n  //         return (\r\n  //           <button\r\n  //             className={css.typeButton}\r\n  //             onClick={() => setState({ resultsType: \"Events\" })}\r\n  //           >\r\n  //             Events\r\n  //           </button>\r\n  //         );\r\n  //       default:\r\n  //         return (\r\n  //           <React.Fragment>\r\n  //             <button\r\n  //               className={css.typeButton}\r\n  //               onClick={() => setState({ resultsType: \"Places\" })}\r\n  //             >\r\n  //               Places\r\n  //             </button>\r\n  //             <button\r\n  //               className={css.typeButton}\r\n  //               onClick={() => setState({ resultsType: \"Events\" })}\r\n  //             >\r\n  //               Events\r\n  //             </button>\r\n  //           </React.Fragment>\r\n  //         );\r\n  //     }\r\n  //   } else {\r\n  //     return (\r\n  //       <React.Fragment>\r\n  //         <button\r\n  //           className={css.typeButton}\r\n  //           onClick={() => setState({ resultsType: \"Places\" })}\r\n  //         >\r\n  //           Places\r\n  //         </button>\r\n  //         <button\r\n  //           className={css.typeButton}\r\n  //           onClick={() => setState({ resultsType: \"Events\" })}\r\n  //         >\r\n  //           Events\r\n  //         </button>\r\n  //       </React.Fragment>\r\n  //     );\r\n  //   }\r\n  // };\r\n\r\n  // return (\r\n  //   <Layout>\r\n  //     <main className={css.queriedPage}>\r\n  //       <section className={css.queryDisplay}></section>\r\n  //       <section className={css.header}>\r\n  //         {setTypeButtons()}\r\n  //         <button className={css.sort}>Sort</button>\r\n  //       </section>\r\n  //       <section className={css.results}>\r\n  //         <div className={css.resultsSlider}>{determineItems()}</div>\r\n  //       </section>\r\n  //     </main>\r\n  //   </Layout>\r\n  // );\r\n}\r\n\r\ntype Results = {\r\n  items: { places: { [key: string]: any }[]; events: { [key: string]: any }[] };\r\n  errors: { yelpPlaces: string; yelpEvents: string; ticketmaster: string };\r\n};\r\n\r\ntype APIResponse = Promise<{ [key: string]: any }[] | string>;\r\n\r\ntype SearchParams = { [key: string]: any };\r\n\r\nQueried.getInitialProps = async ({\r\n  query,\r\n  pathname,\r\n  asPath,\r\n}): Promise<{\r\n  results: any;\r\n  searchType: string;\r\n  pathname: string;\r\n  queried: string;\r\n  asPath: string;\r\n}> => {\r\n  const {\r\n    location,\r\n    radius,\r\n    placeType,\r\n    startFormatted,\r\n    endFormatted,\r\n    unixStartDate,\r\n    unixEndDate,\r\n    eventsCategory,\r\n    queried,\r\n  } = query;\r\n  console.log(pathname);\r\n  console.log(queried);\r\n  console.log(asPath);\r\n  if (query.queried) {\r\n    const checkURLIsString: string = query.queried.toString();\r\n    const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n    const searchParamsValues: SearchParams = {};\r\n\r\n    paramValueArray.forEach((param) => {\r\n      const indexOfEqual: number = param.search(\"=\");\r\n      if (indexOfEqual === -1) return;\r\n      else {\r\n        const paramKey: string = param.substring(0, indexOfEqual);\r\n        const paramValue: string = param.substring(indexOfEqual + 1);\r\n        searchParamsValues[paramKey] = paramValue;\r\n      }\r\n    });\r\n\r\n    class APICalls {\r\n      searchParams: SearchParams;\r\n      results: Results;\r\n      constructor(searchParams: SearchParams) {\r\n        this.searchParams = searchParams;\r\n        this.results = {\r\n          items: { places: [], events: [] },\r\n          errors: { yelpPlaces: \"\", yelpEvents: \"\", ticketmaster: \"\" },\r\n        };\r\n      }\r\n\r\n      public async yelpBusinesses() {\r\n        const yelpBusinessesResponse: APIResponse = await yelpBusinessesCall(\r\n          this.searchParams\r\n        );\r\n        Array.isArray(yelpBusinessesResponse)\r\n          ? (this.results.items.places = yelpBusinessesResponse)\r\n          : (this.results.errors.yelpPlaces = `${yelpBusinessesResponse}`);\r\n      }\r\n      public async yelpEvents() {\r\n        const yelpEventsResponse: APIResponse = await yelpEventsCall(\r\n          this.searchParams\r\n        );\r\n        Array.isArray(yelpEventsResponse)\r\n          ? (this.results.items.events = [\r\n              ...this.results.items.events,\r\n              ...yelpEventsResponse,\r\n            ])\r\n          : (this.results.errors.yelpEvents = `${yelpEventsResponse}`);\r\n      }\r\n      public async ticketMaster() {\r\n        const ticketMasterResponse: APIResponse = await ticketMasterCall(\r\n          this.searchParams\r\n        );\r\n        Array.isArray(ticketMasterResponse)\r\n          ? (this.results.items.events = [\r\n              ...this.results.items.events,\r\n              ...ticketMasterResponse,\r\n            ])\r\n          : (this.results.errors.ticketmaster = `${ticketMasterResponse}`);\r\n      }\r\n    }\r\n\r\n    const callAPIS: (searchType: string) => Promise<Results> = async (\r\n      searchType\r\n    ) => {\r\n      const APICall = new APICalls(searchParamsValues);\r\n\r\n      try {\r\n        switch (searchType) {\r\n          case \"PLACES\":\r\n            APICall.yelpBusinesses();\r\n\r\n            return APICall.results;\r\n\r\n          case \"EVENTS\":\r\n            APICall.yelpEvents();\r\n            APICall.ticketMaster();\r\n            return APICall.results;\r\n          case \"ALL\":\r\n            APICall.yelpBusinesses();\r\n            APICall.yelpEvents();\r\n            APICall.ticketMaster();\r\n            return APICall.results;\r\n          default:\r\n            APICall.yelpBusinesses();\r\n            APICall.yelpEvents();\r\n            APICall.ticketMaster();\r\n            return APICall.results;\r\n        }\r\n      } catch {\r\n        APICall.results.errors.yelpPlaces = \"CALL ERROR\";\r\n        APICall.results.errors.yelpEvents = \"CALL ERROR\";\r\n        APICall.results.errors.ticketmaster = \"CALL ERROR\";\r\n        return APICall.results;\r\n      }\r\n    };\r\n\r\n    const results: Results = await callAPIS(searchParamsValues.searchType);\r\n\r\n    return {\r\n      results,\r\n      searchType: searchParamsValues.searchType,\r\n      pathname,\r\n      queried,\r\n      asPath,\r\n    };\r\n  } else {\r\n    return {\r\n      results: { error: \"bruh search is weird.\" },\r\n      searchType: \"ALL\",\r\n      pathname,\r\n      queried,\r\n      asPath,\r\n    };\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}