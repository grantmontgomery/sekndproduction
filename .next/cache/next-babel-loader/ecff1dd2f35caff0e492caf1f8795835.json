{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nimport { useGridDispatch } from \"../../../state/SearchGridContext\";\n\nvar ScheduleGrid = /*#__PURE__*/function () {\n  function ScheduleGrid(unixStartDate, unixEndDate) {\n    _classCallCheck(this, ScheduleGrid);\n\n    _defineProperty(this, \"unixStartDate\", void 0);\n\n    _defineProperty(this, \"unixEndDate\", void 0);\n\n    _defineProperty(this, \"numberofSquares\", void 0);\n\n    _defineProperty(this, \"templateAreas\", void 0);\n\n    _defineProperty(this, \"startHour\", void 0);\n\n    _defineProperty(this, \"hourDifference\", void 0);\n\n    _defineProperty(this, \"columnAmount\", void 0);\n\n    _defineProperty(this, \"endHour\", void 0);\n\n    _defineProperty(this, \"hourStrings\", void 0);\n\n    this.unixStartDate = unixStartDate;\n    this.unixEndDate = unixEndDate;\n    this.startHour = 0;\n    this.hourDifference = 0;\n    this.templateAreas = \"\";\n    this.columnAmount = 0;\n    this.endHour = 0;\n    this.hourStrings = [];\n    this.numberofSquares = 0;\n  }\n\n  _createClass(ScheduleGrid, [{\n    key: \"setSquares\",\n    value: function setSquares() {\n      var timeDifference = this.unixEndDate - this.unixStartDate;\n      var hours = Math.floor(timeDifference / 3600);\n      var numColumns = hours * 2 + 4;\n      var numberOfSquares = numColumns * 5;\n      this.numberofSquares = numberOfSquares;\n      this.columnAmount = numColumns;\n      this.hourDifference = hours;\n    }\n  }, {\n    key: \"setHours\",\n    value: function setHours() {\n      var startDate = new Date(this.unixStartDate * 1000);\n      var endDate = new Date(this.unixEndDate * 1000);\n      var startHour = startDate.getHours();\n      var endHour = endDate.getHours();\n      this.startHour = startHour;\n      this.endHour = endHour;\n    }\n  }, {\n    key: \"setGridTemplate\",\n    value: function setGridTemplate() {\n      var square = \"square \";\n      var rowString = \"\\\"\".concat(square.repeat(this.columnAmount - 1), \" square\\\"\");\n      this.templateAreas = \"\".concat(rowString.repeat(5));\n    }\n  }, {\n    key: \"setHoursHeader\",\n    value: function setHoursHeader() {\n      var hourCounter = 0;\n      var startHourCounter = this.startHour;\n      var hourNumbers = [];\n\n      while (hourCounter <= this.hourDifference) {\n        hourNumbers.push(startHourCounter);\n        hourCounter++;\n        startHourCounter < 24 ? startHourCounter++ : startHourCounter = 1;\n      }\n\n      var hourStrings = [];\n      hourNumbers.forEach(function (hour) {\n        if (hour === 24) {\n          return hourStrings.push(\"12:00 a.m\");\n        } else if (hour === 12) {\n          return hourStrings.push(\"12:00 p.m\");\n        } else {\n          return hour < 12 ? hourStrings.push(\"\".concat(hour, \":00 a.m\")) : hourStrings.push(\"\".concat(hour - 12, \":00 p.m\"));\n        }\n      });\n      this.hourStrings = hourStrings;\n    }\n  }, {\n    key: \"setGrid\",\n    value: function setGrid() {\n      this.setSquares();\n      this.setHours();\n      this.setGridTemplate();\n      this.setHoursHeader();\n    }\n  }]);\n\n  return ScheduleGrid;\n}();\n\nexport default function setSquares(unixStartDate, unixEndDate) {\n  _s();\n\n  var newDateInputs = new ScheduleGrid(unixStartDate, unixEndDate);\n  newDateInputs.setGrid();\n  return useGridDispatch()({\n    type: \"ADD_GRID_TEMPLATE\",\n    payload: {\n      hourStrings: newDateInputs.hourStrings,\n      gridTemplate: newDateInputs.templateAreas\n    }\n  });\n}\n\n_s(setSquares, \"e9hWd6rJjsvodBL0nOSwRPTCfPc=\", false, function () {\n  return [useGridDispatch];\n});","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/components/SearchBox/Logic/setScheduleGrid.ts"],"names":["useGridDispatch","ScheduleGrid","unixStartDate","unixEndDate","startHour","hourDifference","templateAreas","columnAmount","endHour","hourStrings","numberofSquares","timeDifference","hours","Math","floor","numColumns","numberOfSquares","startDate","Date","endDate","getHours","square","rowString","repeat","hourCounter","startHourCounter","hourNumbers","push","forEach","hour","setSquares","setHours","setGridTemplate","setHoursHeader","newDateInputs","setGrid","type","payload","gridTemplate"],"mappings":"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","sourcesContent":["import { Dispatch } from \"react\";\r\nimport { useGridDispatch } from \"../../../state/SearchGridContext\";\r\nimport { useSquaresDispatch } from \"../../../state/GridSquaresContext\";\r\n\r\nclass ScheduleGrid {\r\n  unixStartDate: number;\r\n  unixEndDate: number;\r\n  numberofSquares: number;\r\n  templateAreas: string;\r\n  startHour: number;\r\n  hourDifference: number;\r\n  columnAmount: number;\r\n  endHour: number;\r\n  hourStrings: string[];\r\n\r\n  constructor(unixStartDate: number, unixEndDate: number) {\r\n    this.unixStartDate = unixStartDate;\r\n    this.unixEndDate = unixEndDate;\r\n    this.startHour = 0;\r\n    this.hourDifference = 0;\r\n    this.templateAreas = \"\";\r\n    this.columnAmount = 0;\r\n    this.endHour = 0;\r\n    this.hourStrings = [];\r\n    this.numberofSquares = 0;\r\n  }\r\n\r\n  private setSquares() {\r\n    const timeDifference: number = this.unixEndDate - this.unixStartDate;\r\n    const hours: number = Math.floor(timeDifference / 3600);\r\n    const numColumns: number = hours * 2 + 4;\r\n    const numberOfSquares: number = numColumns * 5;\r\n    this.numberofSquares = numberOfSquares;\r\n    this.columnAmount = numColumns;\r\n    this.hourDifference = hours;\r\n  }\r\n\r\n  private setHours() {\r\n    const startDate: Date = new Date(this.unixStartDate * 1000);\r\n    const endDate: Date = new Date(this.unixEndDate * 1000);\r\n\r\n    const startHour: number = startDate.getHours();\r\n    const endHour: number = endDate.getHours();\r\n\r\n    this.startHour = startHour;\r\n    this.endHour = endHour;\r\n  }\r\n\r\n  private setGridTemplate() {\r\n    const square: string = \"square \";\r\n    const rowString: string = `\"${square.repeat(\r\n      this.columnAmount - 1\r\n    )} square\"`;\r\n    this.templateAreas = `${rowString.repeat(5)}`;\r\n  }\r\n\r\n  private setHoursHeader() {\r\n    let hourCounter: number = 0;\r\n    let startHourCounter: number = this.startHour;\r\n\r\n    const hourNumbers: number[] = [];\r\n\r\n    while (hourCounter <= this.hourDifference) {\r\n      hourNumbers.push(startHourCounter);\r\n      hourCounter++;\r\n      startHourCounter < 24 ? startHourCounter++ : (startHourCounter = 1);\r\n    }\r\n\r\n    const hourStrings: string[] = [];\r\n\r\n    hourNumbers.forEach((hour) => {\r\n      if (hour === 24) {\r\n        return hourStrings.push(\"12:00 a.m\");\r\n      } else if (hour === 12) {\r\n        return hourStrings.push(\"12:00 p.m\");\r\n      } else {\r\n        return hour < 12\r\n          ? hourStrings.push(`${hour}:00 a.m`)\r\n          : hourStrings.push(`${hour - 12}:00 p.m`);\r\n      }\r\n    });\r\n    this.hourStrings = hourStrings;\r\n  }\r\n\r\n  public setGrid() {\r\n    this.setSquares();\r\n    this.setHours();\r\n    this.setGridTemplate();\r\n    this.setHoursHeader();\r\n  }\r\n}\r\n\r\nexport default function setSquares(\r\n  unixStartDate: number,\r\n  unixEndDate: number\r\n): void {\r\n  const newDateInputs = new ScheduleGrid(unixStartDate, unixEndDate);\r\n  newDateInputs.setGrid();\r\n  return useGridDispatch()({\r\n    type: \"ADD_GRID_TEMPLATE\",\r\n    payload: {\r\n      hourStrings: newDateInputs.hourStrings,\r\n      gridTemplate: newDateInputs.templateAreas,\r\n    },\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}