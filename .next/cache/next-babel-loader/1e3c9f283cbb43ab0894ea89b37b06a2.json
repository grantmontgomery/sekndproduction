{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { yelpBusinessesCall, yelpEventsCall, ticketMasterCall } from \"../../apicalls\";\nexport var __N_SSP = true;\nexport default function Queried(props) {\n  _s();\n\n  var _React$useState = React.useState({\n    resultsType: \"Events\"\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  console.log(props);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 10\n    }\n  }); // console.log(items);\n  // console.log(errors);\n  // const determineItems: () => JSX.Element | null = () => {\n  //   if (!items) return null;\n  //   switch (searchType) {\n  //     case \"ALL\":\n  //       if (Array.isArray(items.places) && Array.isArray(items.events)) {\n  //         return state.resultsType === \"PLACES\"\n  //           ? items.places.map((item) => (\n  //               <ResultCard key={item.id} item={item}></ResultCard>\n  //             ))\n  //           : items.events.map((item) => (\n  //               <ResultCard key={item.id} item={item}></ResultCard>\n  //             ));\n  //       } else {\n  //         return null;\n  //       }\n  //     case \"PLACES\":\n  //       return Array.isArray(items.places)\n  //         ? items.places.map((item) => (\n  //             <ResultCard key={item.id} item={item}></ResultCard>\n  //           ))\n  //         : null;\n  //     case \"EVENTS\":\n  //       return Array.isArray(items.events)\n  //         ? items.events.map((item) => (\n  //             <ResultCard key={item.id} item={item}></ResultCard>\n  //           ))\n  //         : null;\n  //     default:\n  //       if (Array.isArray(items.places) && Array.isArray(items.events)) {\n  //         return state.resultsType === \"PLACES\"\n  //           ? items.places.map((item) => (\n  //               <ResultCard key={item.id} item={item}></ResultCard>\n  //             ))\n  //           : items.events.map((item) => (\n  //               <ResultCard key={item.id} item={item}></ResultCard>\n  //             ));\n  //       } else {\n  //         return null;\n  //       }\n  //   }\n  // };\n  // const setTypeButtons: () => JSX.Element = () => {\n  //   if (searchType) {\n  //     switch (searchType) {\n  //       case \"ALL\":\n  //         return (\n  //           <React.Fragment>\n  //             <button\n  //               className={css.typeButton}\n  //               onClick={() => setState({ resultsType: \"PLACES\" })}\n  //             >\n  //               Places\n  //             </button>\n  //             <button\n  //               className={css.typeButton}\n  //               onClick={() => setState({ resultsType: \"EVENTS\" })}\n  //             >\n  //               Events\n  //             </button>\n  //           </React.Fragment>\n  //         );\n  //       case \"PLACES\":\n  //         return (\n  //           <button\n  //             className={css.typeButton}\n  //             onClick={() => setState({ resultsType: \"PLACES\" })}\n  //           >\n  //             Places\n  //           </button>\n  //         );\n  //       case \"EVENTS\":\n  //         return (\n  //           <button\n  //             className={css.typeButton}\n  //             onClick={() => setState({ resultsType: \"EVENTS\" })}\n  //           >\n  //             Events\n  //           </button>\n  //         );\n  //       default:\n  //         return (\n  //           <React.Fragment>\n  //             <button\n  //               className={css.typeButton}\n  //               onClick={() => setState({ resultsType: \"PLACES\" })}\n  //             >\n  //               Places\n  //             </button>\n  //             <button\n  //               className={css.typeButton}\n  //               onClick={() => setState({ resultsType: \"EVENTS\" })}\n  //             >\n  //               Events\n  //             </button>\n  //           </React.Fragment>\n  //         );\n  //     }\n  //   } else {\n  //     return (\n  //       <React.Fragment>\n  //         <button\n  //           className={css.typeButton}\n  //           onClick={() => setState({ resultsType: \"PLACES\" })}\n  //         >\n  //           Places\n  //         </button>\n  //         <button\n  //           className={css.typeButton}\n  //           onClick={() => setState({ resultsType: \"EVENTS\" })}\n  //         >\n  //           Events\n  //         </button>\n  //       </React.Fragment>\n  //     );\n  //   }\n  // };\n  // return (\n  //   <Layout>\n  //     <main className={css.queriedPage}>\n  //       <section className={css.queryDisplay}></section>\n  //       <section className={css.header}>\n  //         {setTypeButtons()}\n  //         <button className={css.sort}>Sort</button>\n  //       </section>\n  //       <section className={css.results}>\n  //         <div className={css.resultsSlider}>{determineItems()}</div>\n  //       </section>\n  //     </main>\n  //   </Layout>\n  // );\n}\n\n_s(Queried, \"re+IQ5ru8i+EzlqBUuC4ZMmC1jk=\");\n\n_c = Queried;\n\n// Queried.getInitialProps = async ({\n//   query,\n//   pathname,\n//   asPath,\n// }): Promise<{\n//   results: any;\n//   searchType: string;\n// }> => {\n//   const {\n//     searchType,\n//     location,\n//     radius,\n//     placeType,\n//     startFormatted,\n//     endFormatted,\n//     unixStartDate,\n//     unixEndDate,\n//     eventsCategory,\n//   } = query;\n//   if (location && radius && startFormatted && endFormatted) {\n//     console.log(\"api call\");\n//     class APICalls {\n//       searchParams: SearchParams;\n//       results: Results;\n//       constructor(searchParams: SearchParams) {\n//         this.searchParams = searchParams;\n//         this.results = {\n//           items: { places: [], events: [] },\n//           errors: { yelpPlaces: \"\", yelpEvents: \"\", ticketmaster: \"\" },\n//         };\n//       }\n//       public async yelpBusinesses() {\n//         const { location, radius, placeType } = this.searchParams;\n//         const yelpBusinessesResponse: APIResponse = await yelpBusinessesCall({\n//           location,\n//           radius,\n//           placeType,\n//         });\n//         Array.isArray(yelpBusinessesResponse)\n//           ? (this.results.items.places = yelpBusinessesResponse)\n//           : (this.results.errors.yelpPlaces = `${yelpBusinessesResponse}`);\n//       }\n//       public async yelpEvents() {\n//         const {\n//           location,\n//           radius,\n//           unixStartDate,\n//           unixEndDate,\n//         } = this.searchParams;\n//         const yelpEventsResponse: APIResponse = await yelpEventsCall({\n//           location,\n//           radius,\n//           unixStartDate,\n//           unixEndDate,\n//         });\n//         Array.isArray(yelpEventsResponse)\n//           ? (this.results.items.events = [\n//               ...this.results.items.events,\n//               ...yelpEventsResponse,\n//             ])\n//           : (this.results.errors.yelpEvents = `${yelpEventsResponse}`);\n//       }\n//       public async ticketMaster() {\n//         const {\n//           location,\n//           radius,\n//           startFormatted,\n//           endFormatted,\n//         } = this.searchParams;\n//         const ticketMasterResponse: APIResponse = await ticketMasterCall({\n//           location,\n//           radius,\n//           startFormatted,\n//           endFormatted,\n//         });\n//         Array.isArray(ticketMasterResponse)\n//           ? (this.results.items.events = [\n//               ...this.results.items.events,\n//               ...ticketMasterResponse,\n//             ])\n//           : (this.results.errors.ticketmaster = `${ticketMasterResponse}`);\n//       }\n//     }\n//     const callAPIS: (searchType: string) => Promise<Results> = async (\n//       searchType\n//     ) => {\n//       const APICall = new APICalls({\n//         location,\n//         radius,\n//         placeType,\n//         startFormatted,\n//         endFormatted,\n//         unixStartDate,\n//         unixEndDate,\n//         eventsCategory,\n//       });\n//       try {\n//         switch (searchType) {\n//           case \"PLACES\":\n//             APICall.yelpBusinesses();\n//             return APICall.results;\n//           case \"EVENTS\":\n//             APICall.yelpEvents();\n//             APICall.ticketMaster();\n//             return APICall.results;\n//           case \"ALL\":\n//             APICall.yelpBusinesses();\n//             APICall.yelpEvents();\n//             APICall.ticketMaster();\n//             return APICall.results;\n//           default:\n//             APICall.yelpBusinesses();\n//             APICall.yelpEvents();\n//             APICall.ticketMaster();\n//             return APICall.results;\n//         }\n//       } catch {\n//         APICall.results.errors.yelpPlaces = \"CALL ERROR\";\n//         APICall.results.errors.yelpEvents = \"CALL ERROR\";\n//         APICall.results.errors.ticketmaster = \"CALL ERROR\";\n//         return APICall.results;\n//       }\n//     };\n//     const results: Results = await callAPIS(searchType);\n//     return {\n//       results,\n//       searchType,\n//     };\n//   } else {\n//     const checkURLIsString: string = query.queried.toString();\n//     const paramValueArray: string[] = checkURLIsString.split(\"+\");\n//     const searchParamsValues: SearchParams = {};\n//     paramValueArray.forEach((param) => {\n//       const indexOfEqual: number = param.search(\"=\");\n//       if (indexOfEqual === -1) return;\n//       else {\n//         const paramKey: string = param.substring(0, indexOfEqual);\n//         const paramValue: string = param.substring(indexOfEqual + 1);\n//         searchParamsValues[paramKey] = paramValue;\n//       }\n//     });\n//     return {\n//       results: { error: \"BadCall\" },\n//       searchType: \"ALL\",\n//     };\n//   }\n// };\nvar APICalls = /*#__PURE__*/function () {\n  function APICalls(searchParams) {\n    _classCallCheck(this, APICalls);\n\n    _defineProperty(this, \"searchParams\", void 0);\n\n    _defineProperty(this, \"results\", void 0);\n\n    this.searchParams = searchParams;\n    this.results = {\n      items: {\n        places: [],\n        events: []\n      },\n      errors: {\n        yelpPlaces: \"\",\n        yelpEvents: \"\",\n        ticketmaster: \"\"\n      }\n    };\n  }\n\n  _createClass(APICalls, [{\n    key: \"yelpBusinesses\",\n    value: function () {\n      var _yelpBusinesses = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this$searchParams, location, radius, placeType, yelpBusinessesResponse;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this$searchParams = this.searchParams, location = _this$searchParams.location, radius = _this$searchParams.radius, placeType = _this$searchParams.placeType;\n                _context.next = 3;\n                return yelpBusinessesCall({\n                  location: location,\n                  radius: radius,\n                  placeType: placeType\n                });\n\n              case 3:\n                yelpBusinessesResponse = _context.sent;\n                Array.isArray(yelpBusinessesResponse) ? this.results.items.places = yelpBusinessesResponse : this.results.errors.yelpPlaces = \"\".concat(yelpBusinessesResponse);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function yelpBusinesses() {\n        return _yelpBusinesses.apply(this, arguments);\n      }\n\n      return yelpBusinesses;\n    }()\n  }, {\n    key: \"yelpEvents\",\n    value: function () {\n      var _yelpEvents = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this$searchParams2, location, radius, unixStartDate, unixEndDate, yelpEventsResponse;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this$searchParams2 = this.searchParams, location = _this$searchParams2.location, radius = _this$searchParams2.radius, unixStartDate = _this$searchParams2.unixStartDate, unixEndDate = _this$searchParams2.unixEndDate;\n                _context2.next = 3;\n                return yelpEventsCall({\n                  location: location,\n                  radius: radius,\n                  unixStartDate: unixStartDate,\n                  unixEndDate: unixEndDate\n                });\n\n              case 3:\n                yelpEventsResponse = _context2.sent;\n                Array.isArray(yelpEventsResponse) ? this.results.items.events = [].concat(_toConsumableArray(this.results.items.events), _toConsumableArray(yelpEventsResponse)) : this.results.errors.yelpEvents = \"\".concat(yelpEventsResponse);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function yelpEvents() {\n        return _yelpEvents.apply(this, arguments);\n      }\n\n      return yelpEvents;\n    }()\n  }, {\n    key: \"ticketMaster\",\n    value: function () {\n      var _ticketMaster = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this$searchParams3, location, radius, startFormatted, endFormatted, ticketMasterResponse;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this$searchParams3 = this.searchParams, location = _this$searchParams3.location, radius = _this$searchParams3.radius, startFormatted = _this$searchParams3.startFormatted, endFormatted = _this$searchParams3.endFormatted;\n                _context3.next = 3;\n                return ticketMasterCall({\n                  location: location,\n                  radius: radius,\n                  startFormatted: startFormatted,\n                  endFormatted: endFormatted\n                });\n\n              case 3:\n                ticketMasterResponse = _context3.sent;\n                Array.isArray(ticketMasterResponse) ? this.results.items.events = [].concat(_toConsumableArray(this.results.items.events), _toConsumableArray(ticketMasterResponse)) : this.results.errors.ticketmaster = \"\".concat(ticketMasterResponse);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function ticketMaster() {\n        return _ticketMaster.apply(this, arguments);\n      }\n\n      return ticketMaster;\n    }()\n  }]);\n\n  return APICalls;\n}();\n\nvar _c;\n\n$RefreshReg$(_c, \"Queried\");","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","yelpBusinessesCall","yelpEventsCall","ticketMasterCall","Queried","props","useState","resultsType","state","setState","console","log","APICalls","searchParams","results","items","places","events","errors","yelpPlaces","yelpEvents","ticketmaster","location","radius","placeType","yelpBusinessesResponse","Array","isArray","unixStartDate","unixEndDate","yelpEventsResponse","startFormatted","endFormatted","ticketMasterResponse"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { Layout, ResultCard } from \"../../components\";\r\nimport {\r\n  yelpBusinessesCall,\r\n  yelpEventsCall,\r\n  ticketMasterCall,\r\n} from \"../../apicalls\";\r\nimport css from \"../../styles/Queried.module.scss\";\r\n\r\nexport default function Queried(props): JSX.Element {\r\n  const [state, setState] = React.useState({ resultsType: \"Events\" });\r\n\r\n  console.log(props);\r\n  return <div></div>;\r\n  // console.log(items);\r\n  // console.log(errors);\r\n\r\n  // const determineItems: () => JSX.Element | null = () => {\r\n  //   if (!items) return null;\r\n  //   switch (searchType) {\r\n  //     case \"ALL\":\r\n  //       if (Array.isArray(items.places) && Array.isArray(items.events)) {\r\n  //         return state.resultsType === \"PLACES\"\r\n  //           ? items.places.map((item) => (\r\n  //               <ResultCard key={item.id} item={item}></ResultCard>\r\n  //             ))\r\n  //           : items.events.map((item) => (\r\n  //               <ResultCard key={item.id} item={item}></ResultCard>\r\n  //             ));\r\n  //       } else {\r\n  //         return null;\r\n  //       }\r\n\r\n  //     case \"PLACES\":\r\n  //       return Array.isArray(items.places)\r\n  //         ? items.places.map((item) => (\r\n  //             <ResultCard key={item.id} item={item}></ResultCard>\r\n  //           ))\r\n  //         : null;\r\n  //     case \"EVENTS\":\r\n  //       return Array.isArray(items.events)\r\n  //         ? items.events.map((item) => (\r\n  //             <ResultCard key={item.id} item={item}></ResultCard>\r\n  //           ))\r\n  //         : null;\r\n  //     default:\r\n  //       if (Array.isArray(items.places) && Array.isArray(items.events)) {\r\n  //         return state.resultsType === \"PLACES\"\r\n  //           ? items.places.map((item) => (\r\n  //               <ResultCard key={item.id} item={item}></ResultCard>\r\n  //             ))\r\n  //           : items.events.map((item) => (\r\n  //               <ResultCard key={item.id} item={item}></ResultCard>\r\n  //             ));\r\n  //       } else {\r\n  //         return null;\r\n  //       }\r\n  //   }\r\n  // };\r\n\r\n  // const setTypeButtons: () => JSX.Element = () => {\r\n  //   if (searchType) {\r\n  //     switch (searchType) {\r\n  //       case \"ALL\":\r\n  //         return (\r\n  //           <React.Fragment>\r\n  //             <button\r\n  //               className={css.typeButton}\r\n  //               onClick={() => setState({ resultsType: \"PLACES\" })}\r\n  //             >\r\n  //               Places\r\n  //             </button>\r\n  //             <button\r\n  //               className={css.typeButton}\r\n  //               onClick={() => setState({ resultsType: \"EVENTS\" })}\r\n  //             >\r\n  //               Events\r\n  //             </button>\r\n  //           </React.Fragment>\r\n  //         );\r\n  //       case \"PLACES\":\r\n  //         return (\r\n  //           <button\r\n  //             className={css.typeButton}\r\n  //             onClick={() => setState({ resultsType: \"PLACES\" })}\r\n  //           >\r\n  //             Places\r\n  //           </button>\r\n  //         );\r\n\r\n  //       case \"EVENTS\":\r\n  //         return (\r\n  //           <button\r\n  //             className={css.typeButton}\r\n  //             onClick={() => setState({ resultsType: \"EVENTS\" })}\r\n  //           >\r\n  //             Events\r\n  //           </button>\r\n  //         );\r\n  //       default:\r\n  //         return (\r\n  //           <React.Fragment>\r\n  //             <button\r\n  //               className={css.typeButton}\r\n  //               onClick={() => setState({ resultsType: \"PLACES\" })}\r\n  //             >\r\n  //               Places\r\n  //             </button>\r\n  //             <button\r\n  //               className={css.typeButton}\r\n  //               onClick={() => setState({ resultsType: \"EVENTS\" })}\r\n  //             >\r\n  //               Events\r\n  //             </button>\r\n  //           </React.Fragment>\r\n  //         );\r\n  //     }\r\n  //   } else {\r\n  //     return (\r\n  //       <React.Fragment>\r\n  //         <button\r\n  //           className={css.typeButton}\r\n  //           onClick={() => setState({ resultsType: \"PLACES\" })}\r\n  //         >\r\n  //           Places\r\n  //         </button>\r\n  //         <button\r\n  //           className={css.typeButton}\r\n  //           onClick={() => setState({ resultsType: \"EVENTS\" })}\r\n  //         >\r\n  //           Events\r\n  //         </button>\r\n  //       </React.Fragment>\r\n  //     );\r\n  //   }\r\n  // };\r\n\r\n  // return (\r\n  //   <Layout>\r\n  //     <main className={css.queriedPage}>\r\n  //       <section className={css.queryDisplay}></section>\r\n  //       <section className={css.header}>\r\n  //         {setTypeButtons()}\r\n  //         <button className={css.sort}>Sort</button>\r\n  //       </section>\r\n  //       <section className={css.results}>\r\n  //         <div className={css.resultsSlider}>{determineItems()}</div>\r\n  //       </section>\r\n  //     </main>\r\n  //   </Layout>\r\n  // );\r\n}\r\n\r\ntype Results = {\r\n  items: { places: { [key: string]: any }[]; events: { [key: string]: any }[] };\r\n  errors: { yelpPlaces: string; yelpEvents: string; ticketmaster: string };\r\n};\r\n\r\ntype APIResponse = Promise<{ [key: string]: any }[] | string>;\r\n\r\ntype SearchParams = { [key: string]: any };\r\n\r\n// Queried.getInitialProps = async ({\r\n//   query,\r\n//   pathname,\r\n//   asPath,\r\n// }): Promise<{\r\n//   results: any;\r\n//   searchType: string;\r\n// }> => {\r\n//   const {\r\n//     searchType,\r\n//     location,\r\n//     radius,\r\n//     placeType,\r\n//     startFormatted,\r\n//     endFormatted,\r\n//     unixStartDate,\r\n//     unixEndDate,\r\n//     eventsCategory,\r\n//   } = query;\r\n\r\n//   if (location && radius && startFormatted && endFormatted) {\r\n//     console.log(\"api call\");\r\n//     class APICalls {\r\n//       searchParams: SearchParams;\r\n//       results: Results;\r\n//       constructor(searchParams: SearchParams) {\r\n//         this.searchParams = searchParams;\r\n//         this.results = {\r\n//           items: { places: [], events: [] },\r\n//           errors: { yelpPlaces: \"\", yelpEvents: \"\", ticketmaster: \"\" },\r\n//         };\r\n//       }\r\n\r\n//       public async yelpBusinesses() {\r\n//         const { location, radius, placeType } = this.searchParams;\r\n//         const yelpBusinessesResponse: APIResponse = await yelpBusinessesCall({\r\n//           location,\r\n//           radius,\r\n//           placeType,\r\n//         });\r\n//         Array.isArray(yelpBusinessesResponse)\r\n//           ? (this.results.items.places = yelpBusinessesResponse)\r\n//           : (this.results.errors.yelpPlaces = `${yelpBusinessesResponse}`);\r\n//       }\r\n//       public async yelpEvents() {\r\n//         const {\r\n//           location,\r\n//           radius,\r\n//           unixStartDate,\r\n//           unixEndDate,\r\n//         } = this.searchParams;\r\n//         const yelpEventsResponse: APIResponse = await yelpEventsCall({\r\n//           location,\r\n//           radius,\r\n//           unixStartDate,\r\n//           unixEndDate,\r\n//         });\r\n//         Array.isArray(yelpEventsResponse)\r\n//           ? (this.results.items.events = [\r\n//               ...this.results.items.events,\r\n//               ...yelpEventsResponse,\r\n//             ])\r\n//           : (this.results.errors.yelpEvents = `${yelpEventsResponse}`);\r\n//       }\r\n//       public async ticketMaster() {\r\n//         const {\r\n//           location,\r\n//           radius,\r\n//           startFormatted,\r\n//           endFormatted,\r\n//         } = this.searchParams;\r\n//         const ticketMasterResponse: APIResponse = await ticketMasterCall({\r\n//           location,\r\n//           radius,\r\n//           startFormatted,\r\n//           endFormatted,\r\n//         });\r\n//         Array.isArray(ticketMasterResponse)\r\n//           ? (this.results.items.events = [\r\n//               ...this.results.items.events,\r\n//               ...ticketMasterResponse,\r\n//             ])\r\n//           : (this.results.errors.ticketmaster = `${ticketMasterResponse}`);\r\n//       }\r\n//     }\r\n\r\n//     const callAPIS: (searchType: string) => Promise<Results> = async (\r\n//       searchType\r\n//     ) => {\r\n//       const APICall = new APICalls({\r\n//         location,\r\n//         radius,\r\n//         placeType,\r\n//         startFormatted,\r\n//         endFormatted,\r\n//         unixStartDate,\r\n//         unixEndDate,\r\n//         eventsCategory,\r\n//       });\r\n\r\n//       try {\r\n//         switch (searchType) {\r\n//           case \"PLACES\":\r\n//             APICall.yelpBusinesses();\r\n\r\n//             return APICall.results;\r\n\r\n//           case \"EVENTS\":\r\n//             APICall.yelpEvents();\r\n//             APICall.ticketMaster();\r\n//             return APICall.results;\r\n//           case \"ALL\":\r\n//             APICall.yelpBusinesses();\r\n//             APICall.yelpEvents();\r\n//             APICall.ticketMaster();\r\n//             return APICall.results;\r\n//           default:\r\n//             APICall.yelpBusinesses();\r\n//             APICall.yelpEvents();\r\n//             APICall.ticketMaster();\r\n//             return APICall.results;\r\n//         }\r\n//       } catch {\r\n//         APICall.results.errors.yelpPlaces = \"CALL ERROR\";\r\n//         APICall.results.errors.yelpEvents = \"CALL ERROR\";\r\n//         APICall.results.errors.ticketmaster = \"CALL ERROR\";\r\n//         return APICall.results;\r\n//       }\r\n//     };\r\n\r\n//     const results: Results = await callAPIS(searchType);\r\n\r\n//     return {\r\n//       results,\r\n//       searchType,\r\n//     };\r\n//   } else {\r\n//     const checkURLIsString: string = query.queried.toString();\r\n//     const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n//     const searchParamsValues: SearchParams = {};\r\n\r\n//     paramValueArray.forEach((param) => {\r\n//       const indexOfEqual: number = param.search(\"=\");\r\n//       if (indexOfEqual === -1) return;\r\n//       else {\r\n//         const paramKey: string = param.substring(0, indexOfEqual);\r\n//         const paramValue: string = param.substring(indexOfEqual + 1);\r\n//         searchParamsValues[paramKey] = paramValue;\r\n//       }\r\n//     });\r\n\r\n//     return {\r\n//       results: { error: \"BadCall\" },\r\n//       searchType: \"ALL\",\r\n//     };\r\n//   }\r\n// };\r\nclass APICalls {\r\n  searchParams: SearchParams;\r\n  results: Results;\r\n  constructor(searchParams: SearchParams) {\r\n    this.searchParams = searchParams;\r\n    this.results = {\r\n      items: { places: [], events: [] },\r\n      errors: { yelpPlaces: \"\", yelpEvents: \"\", ticketmaster: \"\" },\r\n    };\r\n  }\r\n\r\n  public async yelpBusinesses() {\r\n    const { location, radius, placeType } = this.searchParams;\r\n    const yelpBusinessesResponse: APIResponse = await yelpBusinessesCall({\r\n      location,\r\n      radius,\r\n      placeType,\r\n    });\r\n    Array.isArray(yelpBusinessesResponse)\r\n      ? (this.results.items.places = yelpBusinessesResponse)\r\n      : (this.results.errors.yelpPlaces = `${yelpBusinessesResponse}`);\r\n  }\r\n  public async yelpEvents() {\r\n    const { location, radius, unixStartDate, unixEndDate } = this.searchParams;\r\n    const yelpEventsResponse: APIResponse = await yelpEventsCall({\r\n      location,\r\n      radius,\r\n      unixStartDate,\r\n      unixEndDate,\r\n    });\r\n    Array.isArray(yelpEventsResponse)\r\n      ? (this.results.items.events = [\r\n          ...this.results.items.events,\r\n          ...yelpEventsResponse,\r\n        ])\r\n      : (this.results.errors.yelpEvents = `${yelpEventsResponse}`);\r\n  }\r\n  public async ticketMaster() {\r\n    const {\r\n      location,\r\n      radius,\r\n      startFormatted,\r\n      endFormatted,\r\n    } = this.searchParams;\r\n    const ticketMasterResponse: APIResponse = await ticketMasterCall({\r\n      location,\r\n      radius,\r\n      startFormatted,\r\n      endFormatted,\r\n    });\r\n    Array.isArray(ticketMasterResponse)\r\n      ? (this.results.items.events = [\r\n          ...this.results.items.events,\r\n          ...ticketMasterResponse,\r\n        ])\r\n      : (this.results.errors.ticketmaster = `${ticketMasterResponse}`);\r\n  }\r\n}\r\n\r\nexport async function getServerSideProps({ params, req, query }) {\r\n  console.log(params);\r\n  console.log(req);\r\n  console.log(query);\r\n  return {\r\n    props: {\r\n      params,\r\n      req,\r\n      query,\r\n    },\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}