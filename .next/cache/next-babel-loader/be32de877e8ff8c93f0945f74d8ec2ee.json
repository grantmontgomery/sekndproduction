{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { Layout, ResultCard } from \"../../components\";\nimport { useRouter } from \"next/router\";\nimport useSWR from \"swr\";\nimport css from \"../../styles/Queried.module.scss\";\nexport default function Queried() {\n  _s();\n\n  var _this = this;\n\n  var _React$useState = React.useState({\n    resultsType: \"\"\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  var router = useRouter();\n  var urlStart = true ? \"http://localhost:3000\" : \"https://sekndapp.com\";\n\n  var setSearchParameters = function setSearchParameters() {\n    var query = router.query;\n    if (!query.queried) return null;\n    if (query.searchType) return query;\n    var checkURLIsString = query.queried.toString();\n    var paramValueArray = checkURLIsString.split(\"+\");\n    var SearchParams = {};\n    paramValueArray.forEach(function (param) {\n      var indexOfEqual = param.search(\"=\");\n      if (indexOfEqual === -1) return;else {\n        var paramKey = param.substring(0, indexOfEqual);\n        var paramValue = param.substring(indexOfEqual + 1);\n        SearchParams[paramKey] = paramValue;\n      }\n    });\n    return SearchParams;\n  };\n\n  var _useSWR = useSWR(setSearchParameters().searchType !== \"EVENTS\" ? \"\".concat(urlStart, \"/api/yelpBusinessesAPI\") : null, /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n      var _setSearchParameters, location, radius, placeType, response, responseJSON, businesses;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _setSearchParameters = setSearchParameters(), location = _setSearchParameters.location, radius = _setSearchParameters.radius, placeType = _setSearchParameters.placeType;\n              _context.prev = 1;\n              _context.next = 4;\n              return fetch(url, {\n                headers: {\n                  Accept: \"application/json\",\n                  \"Content-Type\": \"application/json\"\n                },\n                method: \"POST\",\n                body: JSON.stringify({\n                  location: location,\n                  radius: parseInt(radius),\n                  term: placeType\n                })\n              });\n\n            case 4:\n              response = _context.sent;\n              _context.next = 7;\n              return response.json();\n\n            case 7:\n              responseJSON = _context.sent;\n              businesses = responseJSON.businesses;\n              businesses.forEach(function (business) {\n                return business[\"type\"] = \"place\", business[\"source\"] = \"yelp\", business[\"inParts\"] = false;\n              });\n              return _context.abrupt(\"return\", businesses);\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](1);\n              return _context.abrupt(\"return\", _context.t0.message);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 13]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }()),\n      yelpPlaces = _useSWR.data,\n      yelpPlacesError = _useSWR.error,\n      yelpPlacesLoading = _useSWR.isValidating;\n\n  var _useSWR2 = useSWR(setSearchParameters().searchType !== \"PLACES\" ? \"\".concat(urlStart, \"/api/yelpEventsAPI\") : null, /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url) {\n      var _setSearchParameters2, location, radius, unixStartDate, unixEndDate, response, responseJSON, events;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _setSearchParameters2 = setSearchParameters(), location = _setSearchParameters2.location, radius = _setSearchParameters2.radius, unixStartDate = _setSearchParameters2.unixStartDate, unixEndDate = _setSearchParameters2.unixEndDate;\n              _context2.prev = 1;\n              _context2.next = 4;\n              return fetch(url, {\n                headers: {\n                  Accept: \"application/json\",\n                  \"Content-Type\": \"application/json\"\n                },\n                method: \"POST\",\n                body: JSON.stringify({\n                  location: location,\n                  radius: parseInt(radius),\n                  start_date: parseInt(unixStartDate),\n                  end_date: parseInt(unixEndDate)\n                })\n              });\n\n            case 4:\n              response = _context2.sent;\n              _context2.next = 7;\n              return response.json();\n\n            case 7:\n              responseJSON = _context2.sent;\n              events = responseJSON.events;\n              events.forEach(function (event) {\n                return event[\"type\"] = \"event\", event[\"source\"] = \"yelp\", event[\"inParts\"] = false;\n              });\n              return _context2.abrupt(\"return\", events);\n\n            case 13:\n              _context2.prev = 13;\n              _context2.t0 = _context2[\"catch\"](1);\n              return _context2.abrupt(\"return\", _context2.t0.message);\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 13]]);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }()),\n      yelpEvents = _useSWR2.data,\n      yelpEventsError = _useSWR2.error,\n      yelpEventsLoading = _useSWR2.isValidating;\n\n  var _useSWR3 = useSWR(setSearchParameters().searchType !== \"PLACES\" ? \"\".concat(urlStart, \"/api/ticketmasterAPI\") : null, /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(url) {\n      var _setSearchParameters3, location, radius, startFormatted, endFormatted, response, responseJSON, events;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _setSearchParameters3 = setSearchParameters(), location = _setSearchParameters3.location, radius = _setSearchParameters3.radius, startFormatted = _setSearchParameters3.startFormatted, endFormatted = _setSearchParameters3.endFormatted;\n              _context3.prev = 1;\n              _context3.next = 4;\n              return fetch(url, {\n                headers: {\n                  Accept: \"application/json\",\n                  \"Content-Type\": \"application/json\"\n                },\n                method: \"POST\",\n                body: JSON.stringify({\n                  location: location,\n                  radius: Math.floor(parseInt(radius) * 0.001).toString(),\n                  startDateTime: startFormatted,\n                  endDateTime: endFormatted\n                })\n              });\n\n            case 4:\n              response = _context3.sent;\n              _context3.next = 7;\n              return response.json();\n\n            case 7:\n              responseJSON = _context3.sent;\n              events = responseJSON._embedded.events;\n              events.forEach(function (event) {\n                return event[\"source\"] = \"ticketmaster\", event[\"type\"] = \"event\", event[\"inParts\"] = false;\n              });\n              return _context3.abrupt(\"return\", events);\n\n            case 13:\n              _context3.prev = 13;\n              _context3.t0 = _context3[\"catch\"](1);\n              return _context3.abrupt(\"return\", _context3.t0.message);\n\n            case 16:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[1, 13]]);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }()),\n      ticketmaster = _useSWR3.data,\n      ticketmasterError = _useSWR3.error,\n      ticketmasterLoading = _useSWR3.isValidating;\n\n  var checkYelpPlacesArray = Array.isArray(yelpPlaces) ? yelpPlaces : [];\n  var checkYelpEventsArray = Array.isArray(yelpEvents) ? yelpEvents : [];\n  var checkTicketMasterArray = Array.isArray(ticketmaster) ? ticketmaster : [];\n\n  switch (setSearchParameters().searchType) {\n    case \"ALL\":\n      if (yelpPlacesLoading || yelpEventsLoading || ticketmasterLoading) {\n        return __jsx(Layout, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 11\n          }\n        }, __jsx(\"main\", {\n          className: css.queriedPage,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }\n        }, __jsx(\"section\", {\n          className: css.header,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }\n        }, __jsx(\"button\", {\n          className: css.sort,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 17\n          }\n        }, \"Sort\")), __jsx(\"div\", {\n          className: css.resultsSlider,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 15\n          }\n        })));\n      } else {\n        var results = {\n          items: [].concat(_toConsumableArray(checkYelpPlacesArray), _toConsumableArray(checkYelpEventsArray), _toConsumableArray(checkTicketMasterArray)),\n          errors: {\n            yelpPlacesError: yelpPlacesError,\n            yelpEventsError: yelpEventsError,\n            ticketmasterError: ticketmasterError\n          }\n        };\n        console.log(results);\n        return __jsx(Layout, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 11\n          }\n        }, __jsx(\"main\", {\n          className: css.queriedPage,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }\n        }, __jsx(\"section\", {\n          className: css.header,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 15\n          }\n        }, __jsx(\"button\", {\n          className: css.sort,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 17\n          }\n        }, \"Sort\")), __jsx(\"div\", {\n          className: css.resultsSlider,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 15\n          }\n        }, results.items.map(function (item) {\n          return __jsx(ResultCard, {\n            key: item.id,\n            item: item,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 19\n            }\n          });\n        }))));\n      }\n\n    case \"PLACES\":\n      if (yelpPlacesLoading) {\n        return __jsx(Layout, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 16\n          }\n        });\n      } else {\n        var _results = {\n          items: checkYelpPlacesArray,\n          errors: {\n            yelpPlacesError: yelpPlacesError,\n            yelpEventsError: yelpEventsError,\n            ticketmasterError: ticketmasterError\n          }\n        };\n        return __jsx(Layout, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 16\n          }\n        });\n      }\n\n    case \"EVENTS\":\n      if (ticketmasterLoading || yelpEventsLoading) {\n        return __jsx(Layout, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 16\n          }\n        });\n      } else {\n        var _results2 = {\n          items: [].concat(_toConsumableArray(checkYelpEventsArray), _toConsumableArray(checkTicketMasterArray)),\n          errors: {\n            yelpEventsError: yelpEventsError,\n            ticketmasterError: ticketmasterError\n          }\n        };\n      }\n\n    default:\n      if (yelpPlacesLoading || yelpEventsLoading || ticketmasterLoading) {\n        return __jsx(Layout, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 16\n          }\n        });\n      } else {\n        var _results3 = {\n          items: [].concat(_toConsumableArray(checkYelpPlacesArray), _toConsumableArray(checkYelpEventsArray), _toConsumableArray(checkTicketMasterArray)),\n          errors: {\n            yelpPlacesError: yelpPlacesError,\n            yelpEventsError: yelpEventsError,\n            ticketmasterError: ticketmasterError\n          }\n        };\n        return __jsx(Layout, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 16\n          }\n        });\n      }\n\n  }\n}\n\n_s(Queried, \"hennG0DkGKNEYm4GrFhGPkcNxLQ=\", false, function () {\n  return [useRouter, useSWR, useSWR, useSWR];\n});\n\n_c = Queried;\n\nvar _c;\n\n$RefreshReg$(_c, \"Queried\");","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","Layout","ResultCard","useRouter","useSWR","css","Queried","useState","resultsType","state","setState","router","urlStart","setSearchParameters","query","queried","searchType","checkURLIsString","toString","paramValueArray","split","SearchParams","forEach","param","indexOfEqual","search","paramKey","substring","paramValue","url","location","radius","placeType","fetch","headers","Accept","method","body","JSON","stringify","parseInt","term","response","json","responseJSON","businesses","business","message","yelpPlaces","data","yelpPlacesError","error","yelpPlacesLoading","isValidating","unixStartDate","unixEndDate","start_date","end_date","events","event","yelpEvents","yelpEventsError","yelpEventsLoading","startFormatted","endFormatted","Math","floor","startDateTime","endDateTime","_embedded","ticketmaster","ticketmasterError","ticketmasterLoading","checkYelpPlacesArray","Array","isArray","checkYelpEventsArray","checkTicketMasterArray","queriedPage","header","sort","resultsSlider","results","items","errors","console","log","map","item","id"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { Layout, ResultCard } from \"../../components\";\r\nimport {\r\n  yelpBusinessesCall,\r\n  yelpEventsCall,\r\n  ticketMasterCall,\r\n} from \"../../apicalls\";\r\nimport { NextRouter, useRouter } from \"next/router\";\r\nimport useSWR, { responseInterface } from \"swr\";\r\nimport css from \"../../styles/Queried.module.scss\";\r\nimport { ParsedUrlQuery } from \"querystring\";\r\nimport { SearchBox } from \"../../components/SearchBox\";\r\n\r\ntype Results = {\r\n  items: { [key: string]: any }[];\r\n  errors: {\r\n    yelpPlacesError?: string | undefined;\r\n    yelpEventsError?: string | undefined;\r\n    ticketmasterError?: string | undefined;\r\n  };\r\n};\r\n\r\ntype APIResponse = { [key: string]: any }[];\r\n\r\ntype SearchParams = { [key: string]: any };\r\n\r\nexport default function Queried(): JSX.Element {\r\n  const [state, setState] = React.useState<{ resultsType: string }>({\r\n    resultsType: \"\",\r\n  });\r\n\r\n  const router: NextRouter = useRouter();\r\n\r\n  const urlStart: string =\r\n    process.env.NODE_ENV !== \"production\"\r\n      ? \"http://localhost:3000\"\r\n      : \"https://sekndapp.com\";\r\n\r\n  const setSearchParameters: () => { [key: string]: any } | null = () => {\r\n    const { query } = router;\r\n    if (!query.queried) return null;\r\n    if (query.searchType) return query;\r\n\r\n    const checkURLIsString: string = query.queried.toString();\r\n    const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n    const SearchParams: SearchParams = {};\r\n\r\n    paramValueArray.forEach((param) => {\r\n      const indexOfEqual: number = param.search(\"=\");\r\n      if (indexOfEqual === -1) return;\r\n      else {\r\n        const paramKey: string = param.substring(0, indexOfEqual);\r\n        const paramValue: string = param.substring(indexOfEqual + 1);\r\n        SearchParams[paramKey] = paramValue;\r\n      }\r\n    });\r\n    return SearchParams;\r\n  };\r\n\r\n  const {\r\n    data: yelpPlaces,\r\n    error: yelpPlacesError,\r\n    isValidating: yelpPlacesLoading,\r\n  }: responseInterface<APIResponse, string> = useSWR(\r\n    setSearchParameters().searchType !== \"EVENTS\"\r\n      ? `${urlStart}/api/yelpBusinessesAPI`\r\n      : null,\r\n    async (url) => {\r\n      const { location, radius, placeType } = setSearchParameters();\r\n      try {\r\n        const response: Response = await fetch(url, {\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            location,\r\n            radius: parseInt(radius),\r\n            term: placeType,\r\n          }),\r\n        });\r\n\r\n        const responseJSON = await response.json();\r\n\r\n        const {\r\n          businesses,\r\n        }: { businesses: { [key: string]: any }[] } = responseJSON;\r\n        businesses.forEach(\r\n          (business) => (\r\n            (business[\"type\"] = \"place\"),\r\n            (business[\"source\"] = \"yelp\"),\r\n            (business[\"inParts\"] = false)\r\n          )\r\n        );\r\n\r\n        return businesses;\r\n      } catch (err) {\r\n        return err.message;\r\n      }\r\n    }\r\n  );\r\n\r\n  const {\r\n    data: yelpEvents,\r\n    error: yelpEventsError,\r\n    isValidating: yelpEventsLoading,\r\n  }: responseInterface<APIResponse, string> = useSWR(\r\n    setSearchParameters().searchType !== \"PLACES\"\r\n      ? `${urlStart}/api/yelpEventsAPI`\r\n      : null,\r\n    async (url) => {\r\n      const {\r\n        location,\r\n        radius,\r\n        unixStartDate,\r\n        unixEndDate,\r\n      } = setSearchParameters();\r\n      try {\r\n        const response: Response = await fetch(url, {\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            location,\r\n            radius: parseInt(radius),\r\n            start_date: parseInt(unixStartDate),\r\n            end_date: parseInt(unixEndDate),\r\n          }),\r\n        });\r\n\r\n        const responseJSON = await response.json();\r\n\r\n        const { events }: { events: { [key: string]: any }[] } = responseJSON;\r\n        events.forEach(\r\n          (event) => (\r\n            (event[\"type\"] = \"event\"),\r\n            (event[\"source\"] = \"yelp\"),\r\n            (event[\"inParts\"] = false)\r\n          )\r\n        );\r\n        return events;\r\n      } catch (err) {\r\n        return err.message;\r\n      }\r\n    }\r\n  );\r\n\r\n  const {\r\n    data: ticketmaster,\r\n    error: ticketmasterError,\r\n    isValidating: ticketmasterLoading,\r\n  }: responseInterface<APIResponse, string> = useSWR(\r\n    setSearchParameters().searchType !== \"PLACES\"\r\n      ? `${urlStart}/api/ticketmasterAPI`\r\n      : null,\r\n    async (url) => {\r\n      const {\r\n        location,\r\n        radius,\r\n        startFormatted,\r\n        endFormatted,\r\n      } = setSearchParameters();\r\n      try {\r\n        const response: Response = await fetch(url, {\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            location,\r\n            radius: Math.floor(parseInt(radius) * 0.001).toString(),\r\n            startDateTime: startFormatted,\r\n            endDateTime: endFormatted,\r\n          }),\r\n        });\r\n\r\n        const responseJSON = await response.json();\r\n        const {\r\n          _embedded: { events },\r\n        }: { _embedded: { events: { [key: string]: any }[] } } = responseJSON;\r\n\r\n        events.forEach(\r\n          (event) => (\r\n            (event[\"source\"] = \"ticketmaster\"),\r\n            (event[\"type\"] = \"event\"),\r\n            (event[\"inParts\"] = false)\r\n          )\r\n        );\r\n\r\n        return events;\r\n      } catch (err) {\r\n        return err.message;\r\n      }\r\n    }\r\n  );\r\n\r\n  const checkYelpPlacesArray: Results[\"items\"] | [] = Array.isArray(yelpPlaces)\r\n    ? yelpPlaces\r\n    : [];\r\n  const checkYelpEventsArray: Results[\"items\"] | [] = Array.isArray(yelpEvents)\r\n    ? yelpEvents\r\n    : [];\r\n  const checkTicketMasterArray: Results[\"items\"] | [] = Array.isArray(\r\n    ticketmaster\r\n  )\r\n    ? ticketmaster\r\n    : [];\r\n\r\n  switch (setSearchParameters().searchType) {\r\n    case \"ALL\":\r\n      if (yelpPlacesLoading || yelpEventsLoading || ticketmasterLoading) {\r\n        return (\r\n          <Layout>\r\n            <main className={css.queriedPage}>\r\n              {/* <section className={css.queryDisplay}></section> */}\r\n              <section className={css.header}>\r\n                <button className={css.sort}>Sort</button>\r\n              </section>\r\n\r\n              <div className={css.resultsSlider}></div>\r\n            </main>\r\n          </Layout>\r\n        );\r\n      } else {\r\n        const results: Results = {\r\n          items: [\r\n            ...checkYelpPlacesArray,\r\n            ...checkYelpEventsArray,\r\n            ...checkTicketMasterArray,\r\n          ],\r\n          errors: {\r\n            yelpPlacesError,\r\n            yelpEventsError,\r\n            ticketmasterError,\r\n          },\r\n        };\r\n        console.log(results);\r\n        return (\r\n          <Layout>\r\n            <main className={css.queriedPage}>\r\n              {/* <section className={css.queryDisplay}></section> */}\r\n              <section className={css.header}>\r\n                <button className={css.sort}>Sort</button>\r\n              </section>\r\n\r\n              <div className={css.resultsSlider}>\r\n                {results.items.map((item) => (\r\n                  <ResultCard key={item.id} item={item}></ResultCard>\r\n                ))}\r\n              </div>\r\n            </main>\r\n          </Layout>\r\n        );\r\n      }\r\n    case \"PLACES\":\r\n      if (yelpPlacesLoading) {\r\n        return <Layout></Layout>;\r\n      } else {\r\n        const results: Results = {\r\n          items: checkYelpPlacesArray,\r\n          errors: {\r\n            yelpPlacesError,\r\n            yelpEventsError,\r\n            ticketmasterError,\r\n          },\r\n        };\r\n        return <Layout></Layout>;\r\n      }\r\n    case \"EVENTS\":\r\n      if (ticketmasterLoading || yelpEventsLoading) {\r\n        return <Layout></Layout>;\r\n      } else {\r\n        const results: Results = {\r\n          items: [...checkYelpEventsArray, ...checkTicketMasterArray],\r\n          errors: {\r\n            yelpEventsError,\r\n            ticketmasterError,\r\n          },\r\n        };\r\n      }\r\n\r\n    default:\r\n      if (yelpPlacesLoading || yelpEventsLoading || ticketmasterLoading) {\r\n        return <Layout></Layout>;\r\n      } else {\r\n        const results: Results = {\r\n          items: [\r\n            ...checkYelpPlacesArray,\r\n            ...checkYelpEventsArray,\r\n            ...checkTicketMasterArray,\r\n          ],\r\n          errors: {\r\n            yelpPlacesError,\r\n            yelpEventsError,\r\n            ticketmasterError,\r\n          },\r\n        };\r\n\r\n        return <Layout></Layout>;\r\n      }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}