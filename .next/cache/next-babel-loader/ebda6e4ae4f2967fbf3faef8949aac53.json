{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nexport var yelpBusinessesAPI = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var location, radius, placeType, yelpBusinesses, params, yelpUrlString, yelpResponse, jsonResponse;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            location = _ref.location, radius = _ref.radius, placeType = _ref.placeType;\n            _context.prev = 1;\n            yelpBusinesses = new URL(\"https://api.yelp.com/v3/businesses/search\"), params = {\n              location: location,\n              radius: radius,\n              term: placeType\n            };\n            Object.keys(params).forEach(function (key) {\n              return yelpBusinesses.searchParams.append(key, params[key]);\n            });\n            yelpUrlString = yelpBusinesses.toString(); //function\n\n            _context.next = 7;\n            return fetch(yelpUrlString, {\n              headers: {\n                Authorization: \"Bearer \".concat(process.env.YELP_API_KEY)\n              }\n            });\n\n          case 7:\n            yelpResponse = _context.sent;\n            _context.next = 10;\n            return yelpResponse.json();\n\n          case 10:\n            jsonResponse = _context.sent;\n            return _context.abrupt(\"return\", jsonResponse);\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](1);\n            return _context.abrupt(\"return\", {\n              err: _context.t0\n            });\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 14]]);\n  }));\n\n  return function yelpBusinessesAPI(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/apicalls/yelpBusinessesAPI.ts"],"names":["yelpBusinessesAPI","location","radius","placeType","yelpBusinesses","URL","params","term","Object","keys","forEach","key","searchParams","append","yelpUrlString","toString","fetch","headers","Authorization","process","env","YELP_API_KEY","yelpResponse","json","jsonResponse","err"],"mappings":";;AAIA,OAAO,IAAMA,iBAIoB;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,QAAT,QAASA,QAAT,EAAmBC,MAAnB,QAAmBA,MAAnB,EAA2BC,SAA3B,QAA2BA,SAA3B;AAAA;AAE1BC,YAAAA,cAF0B,GAEJ,IAAIC,GAAJ,CACxB,2CADwB,CAFI,EAK9BC,MAL8B,GAKrB;AACPL,cAAAA,QAAQ,EAARA,QADO;AAEPC,cAAAA,MAAM,EAANA,MAFO;AAGPK,cAAAA,IAAI,EAAEJ;AAHC,aALqB;AAUhCK,YAAAA,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoBI,OAApB,CAA4B,UAACC,GAAD;AAAA,qBAC1BP,cAAc,CAACQ,YAAf,CAA4BC,MAA5B,CAAmCF,GAAnC,EAAwCL,MAAM,CAACK,GAAD,CAA9C,CAD0B;AAAA,aAA5B;AAIMG,YAAAA,aAd0B,GAcFV,cAAc,CAACW,QAAf,EAdE,EAgBhC;;AAhBgC;AAAA,mBAkBKC,KAAK,CAACF,aAAD,EAAgB;AACxDG,cAAAA,OAAO,EAAE;AACPC,gBAAAA,aAAa,mBAAYC,OAAO,CAACC,GAAR,CAAYC,YAAxB;AADN;AAD+C,aAAhB,CAlBV;;AAAA;AAkB1BC,YAAAA,YAlB0B;AAAA;AAAA,mBAuBCA,YAAY,CAACC,IAAb,EAvBD;;AAAA;AAuB1BC,YAAAA,YAvB0B;AAAA,6CAwBzBA,YAxByB;;AAAA;AAAA;AAAA;AAAA,6CA0BzB;AAAEC,cAAAA,GAAG;AAAL,aA1ByB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAJpBzB,iBAIoB;AAAA;AAAA;AAAA,GAJ1B","sourcesContent":["type Query = {\r\n  [key: string]: string;\r\n};\r\n\r\nexport const yelpBusinessesAPI: ({\r\n  location,\r\n  radius,\r\n  placeType,\r\n}: Query) => Error | Promise<any> = async ({ location, radius, placeType }) => {\r\n  try {\r\n    const yelpBusinesses: URL = new URL(\r\n        \"https://api.yelp.com/v3/businesses/search\"\r\n      ),\r\n      params = {\r\n        location,\r\n        radius,\r\n        term: placeType,\r\n      };\r\n    Object.keys(params).forEach((key) =>\r\n      yelpBusinesses.searchParams.append(key, params[key])\r\n    );\r\n\r\n    const yelpUrlString: string = yelpBusinesses.toString();\r\n\r\n    //function\r\n\r\n    const yelpResponse: Response = await fetch(yelpUrlString, {\r\n      headers: {\r\n        Authorization: `Bearer ${process.env.YELP_API_KEY}`,\r\n      },\r\n    });\r\n    const jsonResponse: JSON = await yelpResponse.json();\r\n    return jsonResponse;\r\n  } catch (err) {\r\n    return { err };\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}