{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nexport var yelpEventsCall = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var location, unixStartDate, unixEndDate, eventsCategory, radius, response, responseJson, events;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            location = _ref.location, unixStartDate = _ref.unixStartDate, unixEndDate = _ref.unixEndDate, eventsCategory = _ref.eventsCategory, radius = _ref.radius;\n            _context.prev = 1;\n            _context.next = 4;\n            return fetch(\"/api/yelpEventsAPI\", {\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n              },\n              method: \"POST\",\n              body: JSON.stringify({\n                location: location,\n                radius: radius,\n                start_date: unixStartDate,\n                end_date: unixEndDate,\n                categories: eventsCategory\n              })\n            });\n\n          case 4:\n            response = _context.sent;\n            _context.next = 7;\n            return response.json();\n\n          case 7:\n            responseJson = _context.sent;\n            events = responseJson.events;\n            console.log(events);\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](1);\n            console.log(_context.t0);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 12]]);\n  }));\n\n  return function yelpEventsCall(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/components/SearchBox/APICalls/yelpEventsCall.ts"],"names":["yelpEventsCall","location","unixStartDate","unixEndDate","eventsCategory","radius","fetch","headers","Accept","method","body","JSON","stringify","start_date","end_date","categories","response","json","responseJson","events","console","log"],"mappings":";;AAOA,OAAO,IAAMA,cAMa;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3BC,YAAAA,QAD2B,QAC3BA,QAD2B,EAE3BC,aAF2B,QAE3BA,aAF2B,EAG3BC,WAH2B,QAG3BA,WAH2B,EAI3BC,cAJ2B,QAI3BA,cAJ2B,EAK3BC,MAL2B,QAK3BA,MAL2B;AAAA;AAAA;AAAA,mBAQQC,KAAK,CAAC,oBAAD,EAAuB;AAC3DC,cAAAA,OAAO,EAAE;AACPC,gBAAAA,MAAM,EAAE,kBADD;AAEP,gCAAgB;AAFT,eADkD;AAK3DC,cAAAA,MAAM,EAAE,MALmD;AAM3DC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBX,gBAAAA,QAAQ,EAARA,QADmB;AAEnBI,gBAAAA,MAAM,EAANA,MAFmB;AAGnBQ,gBAAAA,UAAU,EAAEX,aAHO;AAInBY,gBAAAA,QAAQ,EAAEX,WAJS;AAKnBY,gBAAAA,UAAU,EAAEX;AALO,eAAf;AANqD,aAAvB,CARb;;AAAA;AAQnBY,YAAAA,QARmB;AAAA;AAAA,mBAsBEA,QAAQ,CAACC,IAAT,EAtBF;;AAAA;AAsBnBC,YAAAA,YAtBmB;AAuBjBC,YAAAA,MAvBiB,GAuBND,YAvBM,CAuBjBC,MAvBiB;AAwBzBC,YAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AAxByB;AAAA;;AAAA;AAAA;AAAA;AA0BzBC,YAAAA,OAAO,CAACC,GAAR;;AA1ByB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBANbrB,cAMa;AAAA;AAAA;AAAA,GANnB","sourcesContent":["import { SearchQuery } from \"../SearchBox\";\r\n\r\ntype Params = Pick<\r\n  SearchQuery,\r\n  \"location\" | \"unixStartDate\" | \"unixEndDate\" | \"eventsCategory\" | \"radius\"\r\n>;\r\n\r\nexport const yelpEventsCall: ({\r\n  location,\r\n  unixStartDate,\r\n  unixEndDate,\r\n  eventsCategory,\r\n  radius,\r\n}: Params) => Promise<any> = async ({\r\n  location,\r\n  unixStartDate,\r\n  unixEndDate,\r\n  eventsCategory,\r\n  radius,\r\n}) => {\r\n  try {\r\n    const response: Response = await fetch(\"/api/yelpEventsAPI\", {\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        location,\r\n        radius,\r\n        start_date: unixStartDate,\r\n        end_date: unixEndDate,\r\n        categories: eventsCategory,\r\n      }),\r\n    });\r\n    const responseJson = await response.json();\r\n    const { events } = responseJson;\r\n    console.log(events);\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}