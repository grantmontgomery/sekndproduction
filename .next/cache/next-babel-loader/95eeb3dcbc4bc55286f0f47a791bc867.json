{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { Layout } from \"../../components\";\nexport default function Queried(props) {\n  console.log(props);\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 5\n    }\n  }, __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }\n  }), __jsx(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }\n  }));\n} // export const getServerSideProps: GetServerSideProps = async ({ params }) => {\n//   const {\n//     yelpBusinessesAPI,\n//   }: {\n//     yelpBusinessesAPI: ({}: { [key: string]: string }) => Error | Promise<any>;\n//   } = require(\"../../apicalls/yelpBusinessesAPI\");\n//   const checkURLIsString: string = params.queried.toString();\n//   const paramValueArray: string[] = checkURLIsString.split(\"+\");\n//   const searchParamsValues: { [key: string]: string } = {};\n//   paramValueArray.forEach((param) => {\n//     const indexOfEqual: number = param.search(\"=\");\n//     if (indexOfEqual === -1) return;\n//     else {\n//       const paramKey: string = param.substring(0, indexOfEqual);\n//       const paramValue: string = param.substring(indexOfEqual + 1);\n//       searchParamsValues[paramKey] = paramValue;\n//     }\n//   });\n//   const results = await yelpBusinessesAPI(searchParamsValues);\n//   return {\n//     props: { results },\n//   };\n// };\n\nexport const getStaticProps = async ({\n  params\n}) => {\n  const {\n    yelpBusinessesAPI\n  } = require(\"../../apicalls/yelpBusinessesAPI\");\n\n  const checkURLIsString = params.queried.toString();\n  const paramValueArray = checkURLIsString.split(\"+\");\n  const searchParamsValues = {};\n  paramValueArray.forEach(param => {\n    const indexOfEqual = param.search(\"=\");\n    if (indexOfEqual === -1) return;else {\n      const paramKey = param.substring(0, indexOfEqual);\n      const paramValue = param.substring(indexOfEqual + 1);\n      searchParamsValues[paramKey] = paramValue;\n    }\n  });\n  const results = await yelpBusinessesAPI(searchParamsValues);\n  return {\n    props: {\n      results\n    }\n  };\n};\nexport async function getStaticPaths() {\n  return {\n    paths: [{\n      params: {\n        queried: \"1\"\n      }\n    }],\n    fallback: false\n  };\n}","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","Layout","Queried","props","console","log","getStaticProps","params","yelpBusinessesAPI","require","checkURLIsString","queried","toString","paramValueArray","split","searchParamsValues","forEach","param","indexOfEqual","search","paramKey","substring","paramValue","results","getStaticPaths","paths","fallback"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,MAAT,QAAuB,kBAAvB;AAEA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACrCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,SACE,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,C,CAED;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMG,cAA8B,GAAG,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAsB;AAClE,QAAM;AACJC,IAAAA;AADI,MAIFC,OAAO,CAAC,kCAAD,CAJX;;AAMA,QAAMC,gBAAwB,GAAGH,MAAM,CAACI,OAAP,CAAeC,QAAf,EAAjC;AACA,QAAMC,eAAyB,GAAGH,gBAAgB,CAACI,KAAjB,CAAuB,GAAvB,CAAlC;AAEA,QAAMC,kBAA6C,GAAG,EAAtD;AAEAF,EAAAA,eAAe,CAACG,OAAhB,CAAyBC,KAAD,IAAW;AACjC,UAAMC,YAAoB,GAAGD,KAAK,CAACE,MAAN,CAAa,GAAb,CAA7B;AACA,QAAID,YAAY,KAAK,CAAC,CAAtB,EAAyB,OAAzB,KACK;AACH,YAAME,QAAgB,GAAGH,KAAK,CAACI,SAAN,CAAgB,CAAhB,EAAmBH,YAAnB,CAAzB;AACA,YAAMI,UAAkB,GAAGL,KAAK,CAACI,SAAN,CAAgBH,YAAY,GAAG,CAA/B,CAA3B;AACAH,MAAAA,kBAAkB,CAACK,QAAD,CAAlB,GAA+BE,UAA/B;AACD;AACF,GARD;AAUA,QAAMC,OAAO,GAAG,MAAMf,iBAAiB,CAACO,kBAAD,CAAvC;AAEA,SAAO;AACLZ,IAAAA,KAAK,EAAE;AAAEoB,MAAAA;AAAF;AADF,GAAP;AAGD,CA3BM;AA6BP,OAAO,eAAeC,cAAf,GAAgC;AACrC,SAAO;AACLC,IAAAA,KAAK,EAAE,CAAC;AAAElB,MAAAA,MAAM,EAAE;AAAEI,QAAAA,OAAO,EAAE;AAAX;AAAV,KAAD,CADF;AAELe,IAAAA,QAAQ,EAAE;AAFL,GAAP;AAID","sourcesContent":["import * as React from \"react\";\r\nimport { GetServerSideProps, GetStaticProps } from \"next\";\r\nimport { Layout } from \"../../components\";\r\n\r\nexport default function Queried(props) {\r\n  console.log(props);\r\n  return (\r\n    <React.Fragment>\r\n      <Layout></Layout>\r\n      <main></main>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\n// export const getServerSideProps: GetServerSideProps = async ({ params }) => {\r\n//   const {\r\n//     yelpBusinessesAPI,\r\n//   }: {\r\n//     yelpBusinessesAPI: ({}: { [key: string]: string }) => Error | Promise<any>;\r\n//   } = require(\"../../apicalls/yelpBusinessesAPI\");\r\n\r\n//   const checkURLIsString: string = params.queried.toString();\r\n//   const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n//   const searchParamsValues: { [key: string]: string } = {};\r\n\r\n//   paramValueArray.forEach((param) => {\r\n//     const indexOfEqual: number = param.search(\"=\");\r\n//     if (indexOfEqual === -1) return;\r\n//     else {\r\n//       const paramKey: string = param.substring(0, indexOfEqual);\r\n//       const paramValue: string = param.substring(indexOfEqual + 1);\r\n//       searchParamsValues[paramKey] = paramValue;\r\n//     }\r\n//   });\r\n\r\n//   const results = await yelpBusinessesAPI(searchParamsValues);\r\n\r\n//   return {\r\n//     props: { results },\r\n//   };\r\n// };\r\n\r\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\r\n  const {\r\n    yelpBusinessesAPI,\r\n  }: {\r\n    yelpBusinessesAPI: ({}: { [key: string]: string }) => Error | Promise<any>;\r\n  } = require(\"../../apicalls/yelpBusinessesAPI\");\r\n\r\n  const checkURLIsString: string = params.queried.toString();\r\n  const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n  const searchParamsValues: { [key: string]: string } = {};\r\n\r\n  paramValueArray.forEach((param) => {\r\n    const indexOfEqual: number = param.search(\"=\");\r\n    if (indexOfEqual === -1) return;\r\n    else {\r\n      const paramKey: string = param.substring(0, indexOfEqual);\r\n      const paramValue: string = param.substring(indexOfEqual + 1);\r\n      searchParamsValues[paramKey] = paramValue;\r\n    }\r\n  });\r\n\r\n  const results = await yelpBusinessesAPI(searchParamsValues);\r\n\r\n  return {\r\n    props: { results },\r\n  };\r\n};\r\n\r\nexport async function getStaticPaths() {\r\n  return {\r\n    paths: [{ params: { queried: \"1\" } }],\r\n    fallback: false,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}