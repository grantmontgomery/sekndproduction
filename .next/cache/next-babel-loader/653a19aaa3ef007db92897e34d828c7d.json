{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\components\\\\SearchResults\\\\ResultCard\\\\Parts\\\\EventsInfo\\\\EventPriceGenre\\\\EventPriceGenre.tsx\";\n\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport css from \"./EventPriceGenre.module.scss\";\nexport var EventPriceGenre = function EventPriceGenre(_ref) {\n  var venue = _ref.venue,\n      price = _ref.price,\n      source = _ref.source,\n      genre = _ref.genre;\n\n  var parsePrice = function parsePrice() {\n    switch (source) {\n      case \"yelp\":\n        if (!price) return \"Check link for price.\";\n        return \"Starting at $\".concat(price, \".00\");\n\n      case \"ticketmaster\":\n        if (!price || !price.min) return \"Check link for price\";\n\n        var truePrice = function truePrice() {\n          if (price.min % 1 === 0) return \"Starting at $\".concat(price.min, \".00\");\n          var priceString = price.min.toString();\n          var decimalIndex = priceString.indexOf(\".\");\n          var cents = priceString.substring(decimalIndex + 1);\n          return \"Starting at $\".concat(priceString.substring(0, decimalIndex), \".\").concat(cents.length > 1 ? cents : \"\".concat(cents, \"0\"));\n        };\n\n        return truePrice();\n    }\n  };\n\n  var setGenre = function setGenre() {\n    if (source === \"yelp\") {\n      if (genre.indexOf(\"-\") !== -1 || genre.indexOf(\" \") !== -1) {\n        var characterSplit = genre.indexOf(\" \") !== -1 ? \" \" : \"-\";\n        var splitted = genre.split(characterSplit);\n        var upperCase = splitted.map(function (word) {\n          return \"\".concat(word.substring(0, 1).toUpperCase()).concat(word.substring(1));\n        });\n        return __jsx(\"span\", {\n          className: css.genre,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 16\n          }\n        }, \"\\u2022 \".concat(upperCase.join(\" \")));\n      } else {\n        return __jsx(\"span\", {\n          className: css.genre,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 11\n          }\n        }, \"\\u2022 \".concat(genre[0].toUpperCase()).concat(genre.substring(1)));\n      }\n    }\n\n    if (!genre) return null;\n    var segmentString = \"\";\n    var genreString = \"\";\n    genre[0].segment ? segmentString = genre[0].segment.name : null;\n    genre[0][\"genre\"] ? genreString = genre[0][\"genre\"].name : null;\n    return __jsx(\"span\", {\n      className: css.genre,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }, \"\\u2022 \".concat(segmentString, \" \").concat(genreString));\n  };\n\n  return __jsx(\"div\", {\n    className: css.eventPrice,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, parsePrice()), setGenre());\n};\n_c = EventPriceGenre;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventPriceGenre\");","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/components/SearchResults/ResultCard/Parts/EventsInfo/EventPriceGenre/EventPriceGenre.tsx"],"names":["React","css","EventPriceGenre","venue","price","source","genre","parsePrice","min","truePrice","priceString","toString","decimalIndex","indexOf","cents","substring","length","setGenre","characterSplit","splitted","split","upperCase","map","word","toUpperCase","join","segmentString","genreString","segment","name","eventPrice"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport css from \"./EventPriceGenre.module.scss\";\r\nexport const EventPriceGenre: React.FC<{\r\n  venue: string;\r\n  price: any;\r\n  source: string;\r\n  genre: any | null;\r\n}> = ({ venue, price, source, genre }) => {\r\n  const parsePrice: () => string = () => {\r\n    switch (source) {\r\n      case \"yelp\":\r\n        if (!price) return \"Check link for price.\";\r\n        return `Starting at $${price}.00`;\r\n      case \"ticketmaster\":\r\n        if (!price || !price.min) return \"Check link for price\";\r\n        const truePrice: () => string = () => {\r\n          if (price.min % 1 === 0) return `Starting at $${price.min}.00`;\r\n          const priceString: string = price.min.toString();\r\n          const decimalIndex: number = priceString.indexOf(\".\");\r\n          const cents: string = priceString.substring(decimalIndex + 1);\r\n\r\n          return `Starting at $${priceString.substring(0, decimalIndex)}.${\r\n            cents.length > 1 ? cents : `${cents}0`\r\n          }`;\r\n        };\r\n        return truePrice();\r\n    }\r\n  };\r\n\r\n  const setGenre: () => JSX.Element | null = () => {\r\n    if (source === \"yelp\") {\r\n      if (genre.indexOf(\"-\") !== -1 || genre.indexOf(\" \") !== -1) {\r\n        const characterSplit: string = genre.indexOf(\" \") !== -1 ? \" \" : \"-\";\r\n        const splitted: string[] = genre.split(characterSplit);\r\n        const upperCase: string[] = splitted.map(\r\n          (word) => `${word.substring(0, 1).toUpperCase()}${word.substring(1)}`\r\n        );\r\n        return <span className={css.genre}>{`• ${upperCase.join(\" \")}`}</span>;\r\n      } else {\r\n        return (\r\n          <span\r\n            className={css.genre}\r\n          >{`• ${genre[0].toUpperCase()}${genre.substring(1)}`}</span>\r\n        );\r\n      }\r\n    }\r\n    if (!genre) return null;\r\n    let segmentString: string = \"\";\r\n    let genreString: string = \"\";\r\n\r\n    genre[0].segment ? (segmentString = genre[0].segment.name) : null;\r\n    genre[0][\"genre\"] ? (genreString = genre[0][\"genre\"].name) : null;\r\n\r\n    return (\r\n      <span className={css.genre}>{`• ${segmentString} ${genreString}`}</span>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={css.eventPrice}>\r\n      <span>{parsePrice()}</span>\r\n      {setGenre()}\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}