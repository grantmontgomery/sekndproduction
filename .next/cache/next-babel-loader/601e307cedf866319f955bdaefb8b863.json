{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from \"react\";\nimport { SearchSelector, WhereInput, WhenInput, EventsInput, PlacesInput } from \"./Parts\";\nimport Link from \"next/link\";\nimport css from \"./SearchBox.module.scss\";\nexport const SearchBox = props => {\n  const [searchQuery, setSearchQuery] = React.useState({\n    searchType: \"ALL\",\n    eventsCategory: \"\",\n    radius: \"\",\n    location: \"\",\n    endDate: null,\n    startDate: null,\n    placeType: \"\",\n    startFormatted: \"\",\n    endFormatted: \"\",\n    unixStartDate: null,\n    unixEndDate: null,\n    ticketMasterCategories: \"\",\n    yelpCategories: \"\"\n  });\n\n  const checkFieldsDisplayLink = searchType => {\n    const {\n      location,\n      radius,\n      placeType,\n      startFormatted,\n      endFormatted,\n      unixStartDate,\n      unixEndDate,\n      eventsCategory\n    } = searchQuery;\n\n    switch (searchType) {\n      case \"ALL\":\n        return searchQuery.location !== \"\" && searchQuery.startDate !== null && searchQuery.radius !== \"\" && searchQuery.endDate !== null && searchQuery.placeType !== \"\" ? __jsx(Link, {\n          href: {\n            pathname: \"/search/[queried]\",\n            query: {\n              searchType,\n              location,\n              radius,\n              placeType,\n              startFormatted,\n              endFormatted,\n              unixEndDate,\n              unixStartDate,\n              eventsCategory\n            }\n          },\n          as: `/search/searchType=ALL+location=${searchQuery.location}+radius=${searchQuery.radius}+placeType=${searchQuery.placeType}+startFormatted=${searchQuery.startFormatted}+endFormatted=${searchQuery.endFormatted}+unixStartDate=${searchQuery.unixStartDate}+unixEndDate=${searchQuery.unixEndDate}+eventsCategory=${searchQuery.eventsCategory}`\n        }, __jsx(\"button\", null, \"Search\")) : __jsx(\"button\", {\n          onClick: () => alert(\"please fill out missing fields\")\n        }, \"Search\");\n\n      case \"PLACES\":\n        return searchQuery.location !== \"\" && searchQuery.startDate !== null && searchQuery.radius !== \"\" && searchQuery.endDate !== null && searchQuery.placeType !== \"\" ? __jsx(Link, {\n          href: {\n            pathname: \"/search/[queried]\",\n            query: {\n              searchType,\n              location,\n              radius,\n              placeType,\n              startFormatted,\n              endFormatted\n            }\n          },\n          as: `/search/searchType=PLACES+location=${searchQuery.location}+radius=${searchQuery.radius}+placeType=${searchQuery.placeType}+startFormatted=${searchQuery.startFormatted}+endFormatted=${searchQuery.endFormatted}`\n        }, __jsx(\"button\", {\n          style: {\n            color: \"green\"\n          }\n        }, \"Search\")) : __jsx(\"button\", {\n          onClick: () => alert(\"please fill out missing fields\")\n        }, \"Search\");\n\n      case \"EVENTS\":\n        return searchQuery.location !== \"\" && searchQuery.startDate !== null && searchQuery.radius !== \"\" && searchQuery.endDate !== null ? __jsx(Link, {\n          href: {\n            pathname: \"/search/[queried]\",\n            query: {\n              searchType,\n              location,\n              radius,\n              startFormatted,\n              endFormatted,\n              unixStartDate,\n              unixEndDate,\n              eventsCategory\n            }\n          },\n          as: `/search/searchType=EVENTS+location=${searchQuery.location}+radius=${searchQuery.radius}+startFormatted=${searchQuery.startFormatted}+endFormatted=${searchQuery.endFormatted}+unixStartDate=${searchQuery.unixStartDate}+unixEndDate=${searchQuery.unixEndDate}+eventsCategory=${searchQuery.eventsCategory}`\n        }, __jsx(\"button\", {\n          style: {\n            color: \"green\"\n          }\n        }, \"Search\")) : __jsx(\"button\", {\n          onClick: () => alert(\"please fill out missing fields\")\n        }, \"Search\");\n\n      default:\n        return searchQuery.location !== \"\" && searchQuery.startDate !== null && searchQuery.radius !== \"\" && searchQuery.endDate !== null && searchQuery.placeType !== \"\" ? __jsx(Link, {\n          href: {\n            pathname: \"/search/[queried]\",\n            query: {\n              searchType,\n              location,\n              radius,\n              placeType,\n              startFormatted,\n              endFormatted,\n              unixEndDate,\n              unixStartDate,\n              eventsCategory\n            }\n          },\n          as: `/search/searchType=ALL+location=${searchQuery.location}+radius=${searchQuery.radius}+placeType=${searchQuery.placeType}+startFormatted=${searchQuery.startFormatted}+endFormatted=${searchQuery.endFormatted}+unixStartDate=${searchQuery.unixStartDate}+unixEndDate=${searchQuery.unixEndDate}+eventsCategory=${searchQuery.eventsCategory}`\n        }, __jsx(\"button\", {\n          style: {\n            color: \"green\"\n          }\n        }, \"Search\")) : __jsx(\"button\", {\n          onClick: () => alert(\"please fill out missing fields\")\n        }, \"Search\");\n    }\n  };\n\n  const handleInputChange = (key, input) => {\n    return setSearchQuery(state => _objectSpread(_objectSpread({}, state), {}, {\n      [key]: input\n    }));\n  };\n\n  const handleQueryDate = (key, date) => {\n    if (key === \"startDate\") {\n      const unixStartDate = Math.round(new Date(date).getTime() / 1000);\n      const timeOffSet = date.getTimezoneOffset() * 60;\n      const localStartTimeISO = new Date((unixStartDate - timeOffSet) * 1000).toISOString();\n      const localStartTimeISOFormatted = `${localStartTimeISO.substring(0, 19)}Z`;\n      return setSearchQuery(state => _objectSpread(_objectSpread({}, state), {}, {\n        [key]: date,\n        unixStartDate,\n        startFormatted: localStartTimeISOFormatted\n      }));\n    } else {\n      const unixEndDate = Math.round(new Date(date).getTime() / 1000);\n      const timeOffSet = date.getTimezoneOffset() * 60;\n      const localEndTimeISO = new Date((unixEndDate - timeOffSet) * 1000).toISOString();\n      const localEndTimeISOFormatted = `${localEndTimeISO.substring(0, 19)}Z`;\n      return setSearchQuery(state => _objectSpread(_objectSpread({}, state), {}, {\n        [key]: date,\n        unixEndDate,\n        endFormatted: localEndTimeISOFormatted\n      }));\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: css.searchBox\n  }, __jsx(SearchSelector, {\n    searchType: searchQuery.searchType,\n    handleInputChange: handleInputChange\n  }), __jsx(WhereInput, {\n    handleInputChange: handleInputChange,\n    location: searchQuery.location,\n    radius: searchQuery.radius\n  }), __jsx(WhenInput, {\n    handleQueryDate: handleQueryDate,\n    startDate: searchQuery.startDate,\n    endDate: searchQuery.endDate\n  }), __jsx(EventsInput, {\n    handleInputChange: handleInputChange,\n    eventsCategory: searchQuery.eventsCategory\n  }), __jsx(PlacesInput, {\n    handleInputChange: handleInputChange,\n    placeType: searchQuery.placeType\n  }), checkFieldsDisplayLink(searchQuery.searchType));\n};","map":null,"metadata":{},"sourceType":"module"}