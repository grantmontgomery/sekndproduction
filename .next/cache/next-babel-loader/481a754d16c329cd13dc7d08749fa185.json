{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { Layout } from \"../../components\";\nimport { useRouter } from \"next/router\";\nimport useSWR from \"swr\";\nexport default function Queried() {\n  _s();\n\n  var _React$useState = React.useState({\n    resultsType: \"\"\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  var router = useRouter();\n  var urlStart = true ? \"http://localhost:3000\" : \"https://sekndapp.com\";\n\n  var setSearchParameters = function setSearchParameters() {\n    var query = router.query;\n    if (!query.queried) return null;\n    if (query.searchType) return query;\n    var checkURLIsString = query.queried.toString();\n    var paramValueArray = checkURLIsString.split(\"+\");\n    var SearchParams = {};\n    paramValueArray.forEach(function (param) {\n      var indexOfEqual = param.search(\"=\");\n      if (indexOfEqual === -1) return;else {\n        var paramKey = param.substring(0, indexOfEqual);\n        var paramValue = param.substring(indexOfEqual + 1);\n        SearchParams[paramKey] = paramValue;\n      }\n    });\n    return SearchParams;\n  };\n\n  if (setSearchParameters() === null) {\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 12\n      }\n    });\n  } else {\n    var _useSWR = useSWR(setSearchParameters().searchType !== \"EVENTS\" ? \"\".concat(urlStart, \"/api/yelpBusinessesAPI\") : null, /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n        var _setSearchParameters, location, radius, placeType, response, responseJSON, businesses;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _setSearchParameters = setSearchParameters(), location = _setSearchParameters.location, radius = _setSearchParameters.radius, placeType = _setSearchParameters.placeType;\n                _context.prev = 1;\n                _context.next = 4;\n                return fetch(url, {\n                  headers: {\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/json\"\n                  },\n                  method: \"POST\",\n                  body: JSON.stringify({\n                    location: location,\n                    radius: parseInt(radius),\n                    term: placeType\n                  })\n                });\n\n              case 4:\n                response = _context.sent;\n                _context.next = 7;\n                return response.json();\n\n              case 7:\n                responseJSON = _context.sent;\n                businesses = responseJSON.businesses;\n                businesses.forEach(function (business) {\n                  return business[\"type\"] = \"place\", business[\"source\"] = \"yelp\", business[\"inParts\"] = false;\n                });\n                return _context.abrupt(\"return\", businesses);\n\n              case 13:\n                _context.prev = 13;\n                _context.t0 = _context[\"catch\"](1);\n                return _context.abrupt(\"return\", _context.t0.message);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 13]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()),\n        yelpPlaces = _useSWR.data,\n        yelpPlacesError = _useSWR.error,\n        yelpPlacesLoading = _useSWR.isValidating;\n\n    var _useSWR2 = useSWR(setSearchParameters().searchType !== \"PLACES\" ? \"\".concat(urlStart, \"/api/yelpEventsAPI\") : null, /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url) {\n        var _setSearchParameters2, location, radius, unixStartDate, unixEndDate, response, responseJSON, events;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _setSearchParameters2 = setSearchParameters(), location = _setSearchParameters2.location, radius = _setSearchParameters2.radius, unixStartDate = _setSearchParameters2.unixStartDate, unixEndDate = _setSearchParameters2.unixEndDate;\n                _context2.prev = 1;\n                _context2.next = 4;\n                return fetch(url, {\n                  headers: {\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/json\"\n                  },\n                  method: \"POST\",\n                  body: JSON.stringify({\n                    location: location,\n                    radius: parseInt(radius),\n                    start_date: parseInt(unixStartDate),\n                    end_date: parseInt(unixEndDate)\n                  })\n                });\n\n              case 4:\n                response = _context2.sent;\n                _context2.next = 7;\n                return response.json();\n\n              case 7:\n                responseJSON = _context2.sent;\n                events = responseJSON.events;\n                events.forEach(function (event) {\n                  return event[\"type\"] = \"event\", event[\"source\"] = \"yelp\", event[\"inParts\"] = false;\n                });\n                return _context2.abrupt(\"return\", events);\n\n              case 13:\n                _context2.prev = 13;\n                _context2.t0 = _context2[\"catch\"](1);\n                return _context2.abrupt(\"return\", _context2.t0.message);\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[1, 13]]);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()),\n        yelpEvents = _useSWR2.data,\n        yelpEventsError = _useSWR2.error,\n        yelpEventsLoading = _useSWR2.isValidating;\n\n    var _useSWR3 = useSWR(setSearchParameters().searchType !== \"PLACES\" ? \"\".concat(urlStart, \"/api/ticketmasterAPI\") : null, /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(url) {\n        var _setSearchParameters3, location, radius, startFormatted, endFormatted, response, responseJSON, events;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _setSearchParameters3 = setSearchParameters(), location = _setSearchParameters3.location, radius = _setSearchParameters3.radius, startFormatted = _setSearchParameters3.startFormatted, endFormatted = _setSearchParameters3.endFormatted;\n                _context3.prev = 1;\n                _context3.next = 4;\n                return fetch(url, {\n                  headers: {\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/json\"\n                  },\n                  method: \"POST\",\n                  body: JSON.stringify({\n                    location: location,\n                    radius: Math.floor(parseInt(radius) * 0.001).toString(),\n                    startDateTime: startFormatted,\n                    endDateTime: endFormatted\n                  })\n                });\n\n              case 4:\n                response = _context3.sent;\n                _context3.next = 7;\n                return response.json();\n\n              case 7:\n                responseJSON = _context3.sent;\n                events = responseJSON._embedded.events;\n                events.forEach(function (event) {\n                  return event[\"source\"] = \"ticketmaster\", event[\"type\"] = \"event\", event[\"inParts\"] = false;\n                });\n                return _context3.abrupt(\"return\", events);\n\n              case 13:\n                _context3.prev = 13;\n                _context3.t0 = _context3[\"catch\"](1);\n                return _context3.abrupt(\"return\", _context3.t0.message);\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[1, 13]]);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }()),\n        ticketmaster = _useSWR3.data,\n        ticketmasterError = _useSWR3.error,\n        ticketmasterLoading = _useSWR3.isValidating; // const results:{items: {[key:string]:any}[], errors:{yelpPlacesError: string, yelpEventsError: string, ticketmasterError:string}} = {items: [...yelpPlaces, ...yelpEvents, ...ticketmaster], errors:{yelpEventsError, yelpPlacesError, ticketmasterError}}\n\n\n    yelpPlacesLoading ? console.log(\"yelpplaces loading\") : console.log(yelpPlaces);\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 12\n      }\n    });\n  }\n}\n\n_s(Queried, \"zk41hivrvVSawpA3iN+ZKS//ews=\", false, function () {\n  return [useRouter, useSWR, useSWR, useSWR];\n});\n\n_c = Queried;\n\nvar _c;\n\n$RefreshReg$(_c, \"Queried\");","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","Layout","useRouter","useSWR","Queried","useState","resultsType","state","setState","router","urlStart","setSearchParameters","query","queried","searchType","checkURLIsString","toString","paramValueArray","split","SearchParams","forEach","param","indexOfEqual","search","paramKey","substring","paramValue","url","location","radius","placeType","fetch","headers","Accept","method","body","JSON","stringify","parseInt","term","response","json","responseJSON","businesses","business","message","yelpPlaces","data","yelpPlacesError","error","yelpPlacesLoading","isValidating","unixStartDate","unixEndDate","start_date","end_date","events","event","yelpEvents","yelpEventsError","yelpEventsLoading","startFormatted","endFormatted","Math","floor","startDateTime","endDateTime","_embedded","ticketmaster","ticketmasterError","ticketmasterLoading","console","log"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { Layout, ResultCard } from \"../../components\";\r\nimport {\r\n  yelpBusinessesCall,\r\n  yelpEventsCall,\r\n  ticketMasterCall,\r\n} from \"../../apicalls\";\r\nimport { NextRouter, useRouter } from \"next/router\";\r\nimport useSWR, { responseInterface } from \"swr\";\r\nimport css from \"../../styles/Queried.module.scss\";\r\nimport { ParsedUrlQuery } from \"querystring\";\r\n\r\ntype Results = {\r\n  items: { [key: string]: any }[];\r\n  errors: { yelpPlaces: string; yelpEvents: string; ticketmaster: string };\r\n};\r\n\r\ntype APIResponse = Promise<{ [key: string]: any }[] | string>;\r\n\r\ntype SearchParams = { [key: string]: any };\r\n\r\nexport default function Queried(): JSX.Element {\r\n  const [state, setState] = React.useState<{ resultsType: string }>({\r\n    resultsType: \"\",\r\n  });\r\n\r\n  const router: NextRouter = useRouter();\r\n\r\n  const urlStart: string =\r\n    process.env.NODE_ENV !== \"production\"\r\n      ? \"http://localhost:3000\"\r\n      : \"https://sekndapp.com\";\r\n\r\n  const setSearchParameters: () => { [key: string]: any } | null = () => {\r\n    const { query } = router;\r\n    if (!query.queried) return null;\r\n    if (query.searchType) return query;\r\n\r\n    const checkURLIsString: string = query.queried.toString();\r\n    const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n    const SearchParams: SearchParams = {};\r\n\r\n    paramValueArray.forEach((param) => {\r\n      const indexOfEqual: number = param.search(\"=\");\r\n      if (indexOfEqual === -1) return;\r\n      else {\r\n        const paramKey: string = param.substring(0, indexOfEqual);\r\n        const paramValue: string = param.substring(indexOfEqual + 1);\r\n        SearchParams[paramKey] = paramValue;\r\n      }\r\n    });\r\n    return SearchParams;\r\n  };\r\n\r\n  if (setSearchParameters() === null) {\r\n    return <Layout></Layout>;\r\n  } else {\r\n    const {\r\n      data: yelpPlaces,\r\n      error: yelpPlacesError,\r\n      isValidating: yelpPlacesLoading,\r\n    } = useSWR(\r\n      setSearchParameters().searchType !== \"EVENTS\"\r\n        ? `${urlStart}/api/yelpBusinessesAPI`\r\n        : null,\r\n      async (url) => {\r\n        const { location, radius, placeType } = setSearchParameters();\r\n        try {\r\n          const response: Response = await fetch(url, {\r\n            headers: {\r\n              Accept: \"application/json\",\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n              location,\r\n              radius: parseInt(radius),\r\n              term: placeType,\r\n            }),\r\n          });\r\n\r\n          const responseJSON = await response.json();\r\n\r\n          const {\r\n            businesses,\r\n          }: { businesses: { [key: string]: any }[] } = responseJSON;\r\n          businesses.forEach(\r\n            (business) => (\r\n              (business[\"type\"] = \"place\"),\r\n              (business[\"source\"] = \"yelp\"),\r\n              (business[\"inParts\"] = false)\r\n            )\r\n          );\r\n\r\n          return businesses;\r\n        } catch (err) {\r\n          return err.message;\r\n        }\r\n      }\r\n    );\r\n\r\n    const {\r\n      data: yelpEvents,\r\n      error: yelpEventsError,\r\n      isValidating: yelpEventsLoading,\r\n    } = useSWR(\r\n      setSearchParameters().searchType !== \"PLACES\"\r\n        ? `${urlStart}/api/yelpEventsAPI`\r\n        : null,\r\n      async (url) => {\r\n        const {\r\n          location,\r\n          radius,\r\n          unixStartDate,\r\n          unixEndDate,\r\n        } = setSearchParameters();\r\n        try {\r\n          const response: Response = await fetch(url, {\r\n            headers: {\r\n              Accept: \"application/json\",\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n              location,\r\n              radius: parseInt(radius),\r\n              start_date: parseInt(unixStartDate),\r\n              end_date: parseInt(unixEndDate),\r\n            }),\r\n          });\r\n\r\n          const responseJSON = await response.json();\r\n\r\n          const { events }: { events: { [key: string]: any }[] } = responseJSON;\r\n          events.forEach(\r\n            (event) => (\r\n              (event[\"type\"] = \"event\"),\r\n              (event[\"source\"] = \"yelp\"),\r\n              (event[\"inParts\"] = false)\r\n            )\r\n          );\r\n          return events;\r\n        } catch (err) {\r\n          return err.message;\r\n        }\r\n      }\r\n    );\r\n\r\n    const {\r\n      data: ticketmaster,\r\n      error: ticketmasterError,\r\n      isValidating: ticketmasterLoading,\r\n    } = useSWR(\r\n      setSearchParameters().searchType !== \"PLACES\"\r\n        ? `${urlStart}/api/ticketmasterAPI`\r\n        : null,\r\n      async (url) => {\r\n        const {\r\n          location,\r\n          radius,\r\n          startFormatted,\r\n          endFormatted,\r\n        } = setSearchParameters();\r\n        try {\r\n          const response: Response = await fetch(url, {\r\n            headers: {\r\n              Accept: \"application/json\",\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n              location,\r\n              radius: Math.floor(parseInt(radius) * 0.001).toString(),\r\n              startDateTime: startFormatted,\r\n              endDateTime: endFormatted,\r\n            }),\r\n          });\r\n\r\n          const responseJSON = await response.json();\r\n          const {\r\n            _embedded: { events },\r\n          }: { _embedded: { events: { [key: string]: any }[] } } = responseJSON;\r\n\r\n          events.forEach(\r\n            (event) => (\r\n              (event[\"source\"] = \"ticketmaster\"),\r\n              (event[\"type\"] = \"event\"),\r\n              (event[\"inParts\"] = false)\r\n            )\r\n          );\r\n\r\n          return events;\r\n        } catch (err) {\r\n          return err.message;\r\n        }\r\n      }\r\n    );\r\n\r\n    // const results:{items: {[key:string]:any}[], errors:{yelpPlacesError: string, yelpEventsError: string, ticketmasterError:string}} = {items: [...yelpPlaces, ...yelpEvents, ...ticketmaster], errors:{yelpEventsError, yelpPlacesError, ticketmasterError}}\r\n\r\n    yelpPlacesLoading\r\n      ? console.log(\"yelpplaces loading\")\r\n      : console.log(yelpPlaces);\r\n\r\n    return <Layout></Layout>;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}