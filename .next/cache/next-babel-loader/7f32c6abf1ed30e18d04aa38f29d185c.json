{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { Layout, ResultCard } from \"../../components\";\nimport css from \"../../styles/Queried.module.scss\";\n\nconst Queried = ({\n  results\n}) => {\n  const [state, setState] = React.useState({\n    resultsType: \"\"\n  }); // React.useEffect(() => {\n  //   if (searchType) {\n  //     switch (searchType) {\n  //       case \"ALL\":\n  //     }\n  //   }\n  // });\n\n  console.log(results); // const setTypeButtons: () => JSX.Element = () => {\n  //   if (searchType) {\n  //     switch (searchType) {\n  //       case \"ALL\":\n  //         return (\n  //           <React.Fragment>\n  //             <button className={css.typeButton}>Places</button>\n  //             <button className={css.typeButton}>Events</button>\n  //           </React.Fragment>\n  //         );\n  //       case \"PLACES\":\n  //         return <button className={css.typeButton}>Places</button>;\n  //       case \"EVENTS\":\n  //         return <button className={css.typeButton}>Events</button>;\n  //       default:\n  //         return (\n  //           <React.Fragment>\n  //             <button className={css.typeButton}>Places</button>\n  //             <button className={css.typeButton}>Events</button>\n  //           </React.Fragment>\n  //         );\n  //     }\n  //   } else {\n  //     return (\n  //       <React.Fragment>\n  //         <button className={css.typeButton}>Places</button>\n  //         <button className={css.typeButton}>Events</button>\n  //       </React.Fragment>\n  //     );\n  //   }\n  // };\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, __jsx(\"main\", {\n    className: css.queriedPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, __jsx(\"section\", {\n    className: css.queryDisplay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }), __jsx(\"section\", {\n    className: css.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, __jsx(\"button\", {\n    className: css.sort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, \"Sort\")), __jsx(\"section\", {\n    className: css.results,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: css.resultsSlider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, results ? results.map(item => {\n    return __jsx(ResultCard, {\n      key: item.id,\n      item: item,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 26\n      }\n    });\n  }) : null))));\n}; // Queried.getInitialProps = async ({\n//   query,\n// }): Promise<{ results: any; searchType: string }> => {\n//   if (query.queried) {\n//     const checkURLIsString: string = query.queried.toString();\n//     const paramValueArray: string[] = checkURLIsString.split(\"+\");\n//     const searchParamsValues: { [key: string]: string } = {};\n//     paramValueArray.forEach((param) => {\n//       const indexOfEqual: number = param.search(\"=\");\n//       if (indexOfEqual === -1) return;\n//       else {\n//         const paramKey: string = param.substring(0, indexOfEqual);\n//         const paramValue: string = param.substring(indexOfEqual + 1);\n//         searchParamsValues[paramKey] = paramValue;\n//       }\n//     });\n//     const apiResponse: Promise<\n//       { [key: string]: any }[] | string\n//     > = await yelpBusinessesCall(searchParamsValues);\n//     return { results: apiResponse, searchType: searchParamsValues.searchType };\n//   } else {\n//     return { results: {}, searchType: \"ALL\" };\n//   }\n// };\n\n\nexport async function getServerSideProps({\n  query,\n  params\n}) {\n  if (query.queried) {\n    const checkURLIsString = query.queried.toString();\n    const paramValueArray = checkURLIsString.split(\"+\");\n    const searchParamsValues = {};\n    paramValueArray.forEach(param => {\n      const indexOfEqual = param.search(\"=\");\n      if (indexOfEqual === -1) return;else {\n        const paramKey = param.substring(0, indexOfEqual);\n        const paramValue = param.substring(indexOfEqual + 1);\n        searchParamsValues[paramKey] = paramValue;\n      }\n    });\n    const {\n      location,\n      radius,\n      placeType\n    } = searchParamsValues;\n    const yelpBusinesses = new URL(\"https://api.yelp.com/v3/businesses/search\"),\n          params = {\n      location,\n      radius,\n      term: placeType\n    };\n    Object.keys(params).forEach(key => yelpBusinesses.searchParams.append(key, params[key]));\n    const yelpUrlString = yelpBusinesses.toString(); //function\n\n    const yelpResponse = await fetch(yelpUrlString, {\n      headers: {\n        Authorization: `Bearer ${process.env.YELP_API_KEY}`\n      }\n    });\n    const responseJson = await yelpResponse.json();\n    const {\n      businesses\n    } = responseJson;\n    businesses.forEach(business => (business[\"type\"] = \"place\", business[\"source\"] = \"yelp\", business[\"inParts\"] = false));\n    return {\n      props: {\n        results: businesses\n      }\n    };\n  } else {\n    return {\n      props: {\n        results: {},\n        searchType: \"ALL\"\n      }\n    };\n  }\n}\nexport default Queried; // const { location, radius, term } = req.body;\n// const yelpBusinesses: URL = new URL(\n//     \"https://api.yelp.com/v3/businesses/search\"\n//   ),\n//   params: Params = {\n//     location,\n//     radius,\n//     term,\n//   };\n// Object.keys(params).forEach((key) =>\n//   yelpBusinesses.searchParams.append(key, params[key])\n// );\n// const yelpUrlString: string = yelpBusinesses.toString();\n// //function\n// const yelpResponse: Response = await fetch(yelpUrlString, {\n//   headers: {\n//     Authorization: `Bearer ${process.env.YELP_API_KEY}`,\n//   },\n// });","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","Layout","ResultCard","css","Queried","results","state","setState","useState","resultsType","console","log","queriedPage","queryDisplay","header","sort","resultsSlider","map","item","id","getServerSideProps","query","params","queried","checkURLIsString","toString","paramValueArray","split","searchParamsValues","forEach","param","indexOfEqual","search","paramKey","substring","paramValue","location","radius","placeType","yelpBusinesses","URL","term","Object","keys","key","searchParams","append","yelpUrlString","yelpResponse","fetch","headers","Authorization","process","env","YELP_API_KEY","responseJson","json","businesses","business","props","searchType"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { Layout, ResultCard } from \"../../components\";\r\nimport {\r\n  yelpBusinessesCall,\r\n  yelpEventsCall,\r\n  ticketMasterCall,\r\n} from \"../../apicalls\";\r\nimport css from \"../../styles/Queried.module.scss\";\r\n\r\nconst Queried: React.FC<{ results: any }> = ({ results }) => {\r\n  const [state, setState] = React.useState({ resultsType: \"\" });\r\n  // React.useEffect(() => {\r\n  //   if (searchType) {\r\n  //     switch (searchType) {\r\n  //       case \"ALL\":\r\n  //     }\r\n  //   }\r\n  // });\r\n  console.log(results);\r\n\r\n  // const setTypeButtons: () => JSX.Element = () => {\r\n  //   if (searchType) {\r\n  //     switch (searchType) {\r\n  //       case \"ALL\":\r\n  //         return (\r\n  //           <React.Fragment>\r\n  //             <button className={css.typeButton}>Places</button>\r\n  //             <button className={css.typeButton}>Events</button>\r\n  //           </React.Fragment>\r\n  //         );\r\n  //       case \"PLACES\":\r\n  //         return <button className={css.typeButton}>Places</button>;\r\n\r\n  //       case \"EVENTS\":\r\n  //         return <button className={css.typeButton}>Events</button>;\r\n  //       default:\r\n  //         return (\r\n  //           <React.Fragment>\r\n  //             <button className={css.typeButton}>Places</button>\r\n  //             <button className={css.typeButton}>Events</button>\r\n  //           </React.Fragment>\r\n  //         );\r\n  //     }\r\n  //   } else {\r\n  //     return (\r\n  //       <React.Fragment>\r\n  //         <button className={css.typeButton}>Places</button>\r\n  //         <button className={css.typeButton}>Events</button>\r\n  //       </React.Fragment>\r\n  //     );\r\n  //   }\r\n  // };\r\n\r\n  return (\r\n    <Layout>\r\n      <main className={css.queriedPage}>\r\n        <section className={css.queryDisplay}></section>\r\n        <section className={css.header}>\r\n          <button className={css.sort}>Sort</button>\r\n        </section>\r\n        <section className={css.results}>\r\n          <div className={css.resultsSlider}>\r\n            {results\r\n              ? results.map((item) => {\r\n                  return <ResultCard key={item.id} item={item}></ResultCard>;\r\n                })\r\n              : null}\r\n          </div>\r\n        </section>\r\n      </main>\r\n    </Layout>\r\n  );\r\n};\r\n\r\n// Queried.getInitialProps = async ({\r\n//   query,\r\n// }): Promise<{ results: any; searchType: string }> => {\r\n//   if (query.queried) {\r\n//     const checkURLIsString: string = query.queried.toString();\r\n//     const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n//     const searchParamsValues: { [key: string]: string } = {};\r\n\r\n//     paramValueArray.forEach((param) => {\r\n//       const indexOfEqual: number = param.search(\"=\");\r\n//       if (indexOfEqual === -1) return;\r\n//       else {\r\n//         const paramKey: string = param.substring(0, indexOfEqual);\r\n//         const paramValue: string = param.substring(indexOfEqual + 1);\r\n//         searchParamsValues[paramKey] = paramValue;\r\n//       }\r\n//     });\r\n\r\n//     const apiResponse: Promise<\r\n//       { [key: string]: any }[] | string\r\n//     > = await yelpBusinessesCall(searchParamsValues);\r\n\r\n//     return { results: apiResponse, searchType: searchParamsValues.searchType };\r\n//   } else {\r\n//     return { results: {}, searchType: \"ALL\" };\r\n//   }\r\n// };\r\n\r\nexport async function getServerSideProps({\r\n  query,\r\n  params,\r\n}): Promise<{ props: { results: any; searchType?: string } }> {\r\n  if (query.queried) {\r\n    const checkURLIsString: string = query.queried.toString();\r\n    const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n    const searchParamsValues: { [key: string]: string } = {};\r\n\r\n    paramValueArray.forEach((param) => {\r\n      const indexOfEqual: number = param.search(\"=\");\r\n      if (indexOfEqual === -1) return;\r\n      else {\r\n        const paramKey: string = param.substring(0, indexOfEqual);\r\n        const paramValue: string = param.substring(indexOfEqual + 1);\r\n        searchParamsValues[paramKey] = paramValue;\r\n      }\r\n    });\r\n\r\n    const { location, radius, placeType } = searchParamsValues;\r\n    const yelpBusinesses: URL = new URL(\r\n        \"https://api.yelp.com/v3/businesses/search\"\r\n      ),\r\n      params: Params = {\r\n        location,\r\n        radius,\r\n        term: placeType,\r\n      };\r\n    Object.keys(params).forEach((key) =>\r\n      yelpBusinesses.searchParams.append(key, params[key])\r\n    );\r\n\r\n    const yelpUrlString: string = yelpBusinesses.toString();\r\n\r\n    //function\r\n\r\n    const yelpResponse: Response = await fetch(yelpUrlString, {\r\n      headers: {\r\n        Authorization: `Bearer ${process.env.YELP_API_KEY}`,\r\n      },\r\n    });\r\n\r\n    const responseJson = await yelpResponse.json();\r\n\r\n    const {\r\n      businesses,\r\n    }: { businesses: { [key: string]: any }[] } = responseJson;\r\n    businesses.forEach(\r\n      (business) => (\r\n        (business[\"type\"] = \"place\"),\r\n        (business[\"source\"] = \"yelp\"),\r\n        (business[\"inParts\"] = false)\r\n      )\r\n    );\r\n\r\n    return {\r\n      props: {\r\n        results: businesses,\r\n      },\r\n    };\r\n  } else {\r\n    return { props: { results: {}, searchType: \"ALL\" } };\r\n  }\r\n}\r\n\r\nexport default Queried;\r\n\r\n// const { location, radius, term } = req.body;\r\n// const yelpBusinesses: URL = new URL(\r\n//     \"https://api.yelp.com/v3/businesses/search\"\r\n//   ),\r\n//   params: Params = {\r\n//     location,\r\n//     radius,\r\n//     term,\r\n//   };\r\n// Object.keys(params).forEach((key) =>\r\n//   yelpBusinesses.searchParams.append(key, params[key])\r\n// );\r\n\r\n// const yelpUrlString: string = yelpBusinesses.toString();\r\n\r\n// //function\r\n\r\n// const yelpResponse: Response = await fetch(yelpUrlString, {\r\n//   headers: {\r\n//     Authorization: `Bearer ${process.env.YELP_API_KEY}`,\r\n//   },\r\n// });\r\n"]},"metadata":{},"sourceType":"module"}