{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { Layout, ResultCard, SekndLoader } from \"../../components\";\nimport { useRouter } from \"next/router\";\nimport useSWR from \"swr\";\nimport css from \"../../styles/Queried.module.scss\";\n\nvar QueryDisplay = function QueryDisplay(_ref) {\n  _s();\n\n  var loading = _ref.loading,\n      items = _ref.items,\n      searchType = _ref.searchType;\n\n  var _React$useState = React.useState({\n    resultsType: \"\"\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (searchType === \"EVENTS\") setState({\n      resultsType: \"EVENTS\"\n    });\n    setState({\n      resultsType: \"PLACES\"\n    });\n  }, []);\n\n  var setTypeButtons = function setTypeButtons() {\n    if (searchType !== \"ALL\") return null;\n    return __jsx(React.Fragment, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }\n    }, __jsx(\"button\", {\n      className: css.typeButton,\n      onClick: function onClick() {\n        return setState({\n          resultsType: \"PLACES\"\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }\n    }, \"Places\"), __jsx(\"button\", {\n      className: css.typeButton,\n      onClick: function onClick() {\n        return setState({\n          resultsType: \"EVENTS\"\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, \"Events\"));\n  };\n\n  var setItems = function setItems() {\n    if (loading) return __jsx(SekndLoader, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 25\n      }\n    });\n\n    if (searchType === \"ALL\") {\n      __jsx(\"div\", {\n        className: css.resultsSlider,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 7\n        }\n      }, state.resultsType === \"PLACES\" ? items === null || items === void 0 ? void 0 : items.filter(function (item) {\n        return item.type === \"place\";\n      }).map(function (item) {\n        return __jsx(ResultCard, {\n          key: item.id,\n          item: item,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 17\n          }\n        });\n      }) : items === null || items === void 0 ? void 0 : items.filter(function (item) {\n        return item.type === \"event\";\n      }).map(function (item) {\n        return __jsx(ResultCard, {\n          key: item.id,\n          item: item,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 17\n          }\n        });\n      }));\n    }\n\n    return __jsx(\"div\", {\n      className: css.resultsSlider,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }\n    }, items === null || items === void 0 ? void 0 : items.map(function (item) {\n      return __jsx(ResultCard, {\n        key: item.id,\n        item: item,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }\n      });\n    }));\n  };\n\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, __jsx(\"main\", {\n    className: css.queriedPage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, __jsx(\"section\", {\n    className: css.header,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, setTypeButtons(), __jsx(\"button\", {\n    className: css.sort,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, \"Sort\")), setItems()));\n};\n\n_s(QueryDisplay, \"I97e2cl6KHkNVF7ElKr87MCTP7M=\");\n\n_c = QueryDisplay;\nexport default function Queried() {\n  _s2();\n\n  var _this2 = this;\n\n  var router = useRouter();\n  var urlStart = true ? \"http://localhost:3000\" : \"https://sekndapp.com\";\n\n  var setSearchParameters = function setSearchParameters() {\n    var query = router.query;\n    if (!query.queried) return null;\n    if (query.searchType) return query;\n    var checkURLIsString = query.queried.toString();\n    var paramValueArray = checkURLIsString.split(\"+\");\n    var SearchParams = {};\n    paramValueArray.forEach(function (param) {\n      var indexOfEqual = param.search(\"=\");\n      if (indexOfEqual === -1) return;else {\n        var paramKey = param.substring(0, indexOfEqual);\n        var paramValue = param.substring(indexOfEqual + 1);\n        SearchParams[paramKey] = paramValue;\n      }\n    });\n    return SearchParams;\n  };\n\n  var _useSWR = useSWR(function () {\n    if (!setSearchParameters()) return null;\n    console.log(\"calling yelp\");\n    return setSearchParameters().searchType !== \"EVENTS\" ? \"\".concat(urlStart, \"/api/yelpBusinessesAPI\") : null;\n  }, /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n      var _setSearchParameters, location, radius, placeType, response, responseJSON, businesses;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _setSearchParameters = setSearchParameters(), location = _setSearchParameters.location, radius = _setSearchParameters.radius, placeType = _setSearchParameters.placeType;\n              _context.prev = 1;\n              _context.next = 4;\n              return fetch(url, {\n                headers: {\n                  Accept: \"application/json\",\n                  \"Content-Type\": \"application/json\"\n                },\n                method: \"POST\",\n                body: JSON.stringify({\n                  location: location,\n                  radius: parseInt(radius),\n                  term: placeType\n                })\n              });\n\n            case 4:\n              response = _context.sent;\n              _context.next = 7;\n              return response.json();\n\n            case 7:\n              responseJSON = _context.sent;\n              businesses = responseJSON.businesses;\n              businesses.forEach(function (business) {\n                return business[\"type\"] = \"place\", business[\"source\"] = \"yelp\", business[\"inParts\"] = false;\n              });\n              return _context.abrupt(\"return\", businesses);\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](1);\n              return _context.abrupt(\"return\", _context.t0.message);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 13]]);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }()),\n      yelpPlaces = _useSWR.data,\n      yelpPlacesError = _useSWR.error,\n      yelpPlacesLoading = _useSWR.isValidating;\n\n  var _useSWR2 = useSWR(function () {\n    if (!setSearchParameters()) return null;\n    console.log(\"calling yelp events\");\n    return setSearchParameters().searchType !== \"PLACES\" ? \"\".concat(urlStart, \"/api/yelpEventsAPI\") : null;\n  }, /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url) {\n      var _setSearchParameters2, location, radius, unixStartDate, unixEndDate, response, responseJSON, events;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _setSearchParameters2 = setSearchParameters(), location = _setSearchParameters2.location, radius = _setSearchParameters2.radius, unixStartDate = _setSearchParameters2.unixStartDate, unixEndDate = _setSearchParameters2.unixEndDate;\n              _context2.prev = 1;\n              _context2.next = 4;\n              return fetch(url, {\n                headers: {\n                  Accept: \"application/json\",\n                  \"Content-Type\": \"application/json\"\n                },\n                method: \"POST\",\n                body: JSON.stringify({\n                  location: location,\n                  radius: parseInt(radius),\n                  start_date: parseInt(unixStartDate),\n                  end_date: parseInt(unixEndDate)\n                })\n              });\n\n            case 4:\n              response = _context2.sent;\n              _context2.next = 7;\n              return response.json();\n\n            case 7:\n              responseJSON = _context2.sent;\n              events = responseJSON.events;\n              events.forEach(function (event) {\n                return event[\"type\"] = \"event\", event[\"source\"] = \"yelp\", event[\"inParts\"] = false;\n              });\n              return _context2.abrupt(\"return\", events);\n\n            case 13:\n              _context2.prev = 13;\n              _context2.t0 = _context2[\"catch\"](1);\n              return _context2.abrupt(\"return\", _context2.t0.message);\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 13]]);\n    }));\n\n    return function (_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }()),\n      yelpEvents = _useSWR2.data,\n      yelpEventsError = _useSWR2.error,\n      yelpEventsLoading = _useSWR2.isValidating;\n\n  var _useSWR3 = useSWR(function () {\n    if (!setSearchParameters()) return null;\n    console.log(\"calling ticket master\");\n    return setSearchParameters().searchType !== \"PLACES\" ? \"\".concat(urlStart, \"/api/ticketmasterAPI\") : null;\n  }, /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(url) {\n      var _setSearchParameters3, location, radius, startFormatted, endFormatted, response, responseJSON, events;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _setSearchParameters3 = setSearchParameters(), location = _setSearchParameters3.location, radius = _setSearchParameters3.radius, startFormatted = _setSearchParameters3.startFormatted, endFormatted = _setSearchParameters3.endFormatted;\n              _context3.prev = 1;\n              _context3.next = 4;\n              return fetch(url, {\n                headers: {\n                  Accept: \"application/json\",\n                  \"Content-Type\": \"application/json\"\n                },\n                method: \"POST\",\n                body: JSON.stringify({\n                  location: location,\n                  radius: Math.floor(parseInt(radius) * 0.001).toString(),\n                  startDateTime: startFormatted,\n                  endDateTime: endFormatted\n                })\n              });\n\n            case 4:\n              response = _context3.sent;\n              _context3.next = 7;\n              return response.json();\n\n            case 7:\n              responseJSON = _context3.sent;\n              events = responseJSON._embedded.events;\n              events.forEach(function (event) {\n                return event[\"source\"] = \"ticketmaster\", event[\"type\"] = \"event\", event[\"inParts\"] = false;\n              });\n              return _context3.abrupt(\"return\", events);\n\n            case 13:\n              _context3.prev = 13;\n              _context3.t0 = _context3[\"catch\"](1);\n              return _context3.abrupt(\"return\", _context3.t0.message);\n\n            case 16:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[1, 13]]);\n    }));\n\n    return function (_x3) {\n      return _ref4.apply(this, arguments);\n    };\n  }()),\n      ticketmaster = _useSWR3.data,\n      ticketmasterError = _useSWR3.error,\n      ticketmasterLoading = _useSWR3.isValidating;\n\n  var checkYelpPlacesArray = Array.isArray(yelpPlaces) ? yelpPlaces : [];\n  var checkYelpEventsArray = Array.isArray(yelpEvents) ? yelpEvents : [];\n  var checkTicketMasterArray = Array.isArray(ticketmaster) ? ticketmaster : [];\n\n  var setResults = function setResults() {\n    if (!setSearchParameters()) return __jsx(SekndLoader, {\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 40\n      }\n    });\n\n    switch (setSearchParameters().searchType) {\n      case \"ALL\":\n        if (yelpPlacesLoading || yelpEventsLoading || ticketmasterLoading) {\n          return __jsx(SekndLoader, {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 18\n            }\n          });\n        } else {\n          var results = {\n            items: [].concat(_toConsumableArray(checkYelpPlacesArray), _toConsumableArray(checkYelpEventsArray), _toConsumableArray(checkTicketMasterArray)),\n            errors: {\n              yelpPlacesError: yelpPlacesError,\n              yelpEventsError: yelpEventsError,\n              ticketmasterError: ticketmasterError\n            }\n          };\n          return results.items.map(function (item) {\n            return __jsx(ResultCard, {\n              key: item.id,\n              item: item,\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 319,\n                columnNumber: 13\n              }\n            });\n          });\n        }\n\n      case \"PLACES\":\n        if (yelpPlacesLoading) {\n          return __jsx(SekndLoader, {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 18\n            }\n          });\n        } else {\n          var _results = {\n            items: checkYelpPlacesArray,\n            errors: {\n              yelpPlacesError: yelpPlacesError,\n              yelpEventsError: yelpEventsError,\n              ticketmasterError: ticketmasterError\n            }\n          };\n          return __jsx(\"div\", {\n            className: css.resultsSlider,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 13\n            }\n          }, _results.items.map(function (item) {\n            return __jsx(ResultCard, {\n              key: item.id,\n              item: item,\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 338,\n                columnNumber: 17\n              }\n            });\n          }));\n        }\n\n      case \"EVENTS\":\n        if (ticketmasterLoading || yelpEventsLoading) {\n          return __jsx(SekndLoader, {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 18\n            }\n          });\n        } else {\n          var _results2 = {\n            items: [].concat(_toConsumableArray(checkYelpEventsArray), _toConsumableArray(checkTicketMasterArray)),\n            errors: {\n              yelpEventsError: yelpEventsError,\n              ticketmasterError: ticketmasterError\n            }\n          };\n          return _results2.items.map(function (item) {\n            return __jsx(ResultCard, {\n              key: item.id,\n              item: item,\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 357,\n                columnNumber: 13\n              }\n            });\n          });\n        }\n\n      default:\n        return null;\n    }\n  };\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 5\n    }\n  }, __jsx(\"main\", {\n    className: css.queriedPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 7\n    }\n  }, __jsx(\"section\", {\n    className: css.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 9\n    }\n  }, __jsx(\"button\", {\n    className: css.sort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 11\n    }\n  }, \"Sort\")), setResults()));\n}\n\n_s2(Queried, \"d1zIIr7Ep0yBhrhKodMwOCwgT90=\", false, function () {\n  return [useRouter, useSWR, useSWR, useSWR];\n});\n\n_c2 = Queried;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"QueryDisplay\");\n$RefreshReg$(_c2, \"Queried\");","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","Layout","ResultCard","SekndLoader","useRouter","useSWR","css","QueryDisplay","loading","items","searchType","useState","resultsType","state","setState","useEffect","setTypeButtons","typeButton","setItems","resultsSlider","filter","item","type","map","id","queriedPage","header","sort","Queried","router","urlStart","setSearchParameters","query","queried","checkURLIsString","toString","paramValueArray","split","SearchParams","forEach","param","indexOfEqual","search","paramKey","substring","paramValue","console","log","url","location","radius","placeType","fetch","headers","Accept","method","body","JSON","stringify","parseInt","term","response","json","responseJSON","businesses","business","message","yelpPlaces","data","yelpPlacesError","error","yelpPlacesLoading","isValidating","unixStartDate","unixEndDate","start_date","end_date","events","event","yelpEvents","yelpEventsError","yelpEventsLoading","startFormatted","endFormatted","Math","floor","startDateTime","endDateTime","_embedded","ticketmaster","ticketmasterError","ticketmasterLoading","checkYelpPlacesArray","Array","isArray","checkYelpEventsArray","checkTicketMasterArray","setResults","results","errors"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { Layout, ResultCard, SekndLoader } from \"../../components\";\r\nimport {\r\n  yelpBusinessesCall,\r\n  yelpEventsCall,\r\n  ticketMasterCall,\r\n} from \"../../apicalls\";\r\nimport { NextRouter, useRouter } from \"next/router\";\r\nimport useSWR, { responseInterface } from \"swr\";\r\nimport css from \"../../styles/Queried.module.scss\";\r\nimport { ParsedUrlQuery } from \"querystring\";\r\nimport { SearchBox } from \"../../components/SearchBox\";\r\n\r\ntype Results = {\r\n  items: { [key: string]: any }[];\r\n  errors: {\r\n    yelpPlacesError?: string | undefined;\r\n    yelpEventsError?: string | undefined;\r\n    ticketmasterError?: string | undefined;\r\n  };\r\n};\r\n\r\ntype APIResponse = { [key: string]: any }[];\r\n\r\ntype SearchParams = { [key: string]: any };\r\n\r\nconst QueryDisplay: React.FC<{\r\n  loading: boolean;\r\n  searchType: string;\r\n  items?: Results[\"items\"];\r\n}> = ({ loading, items, searchType }) => {\r\n  const [state, setState] = React.useState<{ resultsType: string }>({\r\n    resultsType: \"\",\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (searchType === \"EVENTS\") setState({ resultsType: \"EVENTS\" });\r\n    setState({ resultsType: \"PLACES\" });\r\n  }, []);\r\n\r\n  const setTypeButtons: () => JSX.Element = () => {\r\n    if (searchType !== \"ALL\") return null;\r\n    return (\r\n      <React.Fragment>\r\n        <button\r\n          className={css.typeButton}\r\n          onClick={() => setState({ resultsType: \"PLACES\" })}\r\n        >\r\n          Places\r\n        </button>\r\n        <button\r\n          className={css.typeButton}\r\n          onClick={() => setState({ resultsType: \"EVENTS\" })}\r\n        >\r\n          Events\r\n        </button>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  const setItems: () => JSX.Element = () => {\r\n    if (loading) return <SekndLoader></SekndLoader>;\r\n    if (searchType === \"ALL\") {\r\n      <div className={css.resultsSlider}>\r\n        {state.resultsType === \"PLACES\"\r\n          ? items\r\n              ?.filter((item) => item.type === \"place\")\r\n              .map((item) => (\r\n                <ResultCard key={item.id} item={item}></ResultCard>\r\n              ))\r\n          : items\r\n              ?.filter((item) => item.type === \"event\")\r\n              .map((item) => (\r\n                <ResultCard key={item.id} item={item}></ResultCard>\r\n              ))}\r\n      </div>;\r\n    }\r\n\r\n    return (\r\n      <div className={css.resultsSlider}>\r\n        {items?.map((item) => (\r\n          <ResultCard key={item.id} item={item}></ResultCard>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <main className={css.queriedPage}>\r\n        {/* <section className={css.queryDisplay}></section> */}\r\n        <section className={css.header}>\r\n          {setTypeButtons()}\r\n          <button className={css.sort}>Sort</button>\r\n        </section>\r\n        {setItems()}\r\n      </main>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default function Queried(): JSX.Element {\r\n  const router: NextRouter = useRouter();\r\n\r\n  const urlStart: string =\r\n    process.env.NODE_ENV !== \"production\"\r\n      ? \"http://localhost:3000\"\r\n      : \"https://sekndapp.com\";\r\n\r\n  const setSearchParameters: () => { [key: string]: any } | null = () => {\r\n    const { query } = router;\r\n    if (!query.queried) return null;\r\n    if (query.searchType) return query;\r\n\r\n    const checkURLIsString: string = query.queried.toString();\r\n    const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n    const SearchParams: SearchParams = {};\r\n\r\n    paramValueArray.forEach((param) => {\r\n      const indexOfEqual: number = param.search(\"=\");\r\n      if (indexOfEqual === -1) return;\r\n      else {\r\n        const paramKey: string = param.substring(0, indexOfEqual);\r\n        const paramValue: string = param.substring(indexOfEqual + 1);\r\n        SearchParams[paramKey] = paramValue;\r\n      }\r\n    });\r\n    return SearchParams;\r\n  };\r\n\r\n  const {\r\n    data: yelpPlaces,\r\n    error: yelpPlacesError,\r\n    isValidating: yelpPlacesLoading,\r\n  }: responseInterface<APIResponse, string> = useSWR(\r\n    (): string | null => {\r\n      if (!setSearchParameters()) return null;\r\n      console.log(\"calling yelp\");\r\n\r\n      return setSearchParameters().searchType !== \"EVENTS\"\r\n        ? `${urlStart}/api/yelpBusinessesAPI`\r\n        : null;\r\n    },\r\n    async (url) => {\r\n      const { location, radius, placeType } = setSearchParameters();\r\n      try {\r\n        const response: Response = await fetch(url, {\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            location,\r\n            radius: parseInt(radius),\r\n            term: placeType,\r\n          }),\r\n        });\r\n\r\n        const responseJSON = await response.json();\r\n\r\n        const {\r\n          businesses,\r\n        }: { businesses: { [key: string]: any }[] } = responseJSON;\r\n        businesses.forEach(\r\n          (business) => (\r\n            (business[\"type\"] = \"place\"),\r\n            (business[\"source\"] = \"yelp\"),\r\n            (business[\"inParts\"] = false)\r\n          )\r\n        );\r\n\r\n        return businesses;\r\n      } catch (err) {\r\n        return err.message;\r\n      }\r\n    }\r\n  );\r\n\r\n  const {\r\n    data: yelpEvents,\r\n    error: yelpEventsError,\r\n    isValidating: yelpEventsLoading,\r\n  }: responseInterface<APIResponse, string> = useSWR(\r\n    (): string | null => {\r\n      if (!setSearchParameters()) return null;\r\n      console.log(\"calling yelp events\");\r\n\r\n      return setSearchParameters().searchType !== \"PLACES\"\r\n        ? `${urlStart}/api/yelpEventsAPI`\r\n        : null;\r\n    },\r\n    async (url) => {\r\n      const {\r\n        location,\r\n        radius,\r\n        unixStartDate,\r\n        unixEndDate,\r\n      } = setSearchParameters();\r\n      try {\r\n        const response: Response = await fetch(url, {\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            location,\r\n            radius: parseInt(radius),\r\n            start_date: parseInt(unixStartDate),\r\n            end_date: parseInt(unixEndDate),\r\n          }),\r\n        });\r\n\r\n        const responseJSON = await response.json();\r\n\r\n        const { events }: { events: { [key: string]: any }[] } = responseJSON;\r\n        events.forEach(\r\n          (event) => (\r\n            (event[\"type\"] = \"event\"),\r\n            (event[\"source\"] = \"yelp\"),\r\n            (event[\"inParts\"] = false)\r\n          )\r\n        );\r\n        return events;\r\n      } catch (err) {\r\n        return err.message;\r\n      }\r\n    }\r\n  );\r\n\r\n  const {\r\n    data: ticketmaster,\r\n    error: ticketmasterError,\r\n    isValidating: ticketmasterLoading,\r\n  }: responseInterface<APIResponse, string> = useSWR(\r\n    (): string | null => {\r\n      if (!setSearchParameters()) return null;\r\n      console.log(\"calling ticket master\");\r\n      return setSearchParameters().searchType !== \"PLACES\"\r\n        ? `${urlStart}/api/ticketmasterAPI`\r\n        : null;\r\n    },\r\n    async (url) => {\r\n      const {\r\n        location,\r\n        radius,\r\n        startFormatted,\r\n        endFormatted,\r\n      } = setSearchParameters();\r\n      try {\r\n        const response: Response = await fetch(url, {\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            location,\r\n            radius: Math.floor(parseInt(radius) * 0.001).toString(),\r\n            startDateTime: startFormatted,\r\n            endDateTime: endFormatted,\r\n          }),\r\n        });\r\n\r\n        const responseJSON = await response.json();\r\n        const {\r\n          _embedded: { events },\r\n        }: { _embedded: { events: { [key: string]: any }[] } } = responseJSON;\r\n\r\n        events.forEach(\r\n          (event) => (\r\n            (event[\"source\"] = \"ticketmaster\"),\r\n            (event[\"type\"] = \"event\"),\r\n            (event[\"inParts\"] = false)\r\n          )\r\n        );\r\n\r\n        return events;\r\n      } catch (err) {\r\n        return err.message;\r\n      }\r\n    }\r\n  );\r\n\r\n  const checkYelpPlacesArray: Results[\"items\"] | [] = Array.isArray(yelpPlaces)\r\n    ? yelpPlaces\r\n    : [];\r\n  const checkYelpEventsArray: Results[\"items\"] | [] = Array.isArray(yelpEvents)\r\n    ? yelpEvents\r\n    : [];\r\n  const checkTicketMasterArray: Results[\"items\"] | [] = Array.isArray(\r\n    ticketmaster\r\n  )\r\n    ? ticketmaster\r\n    : [];\r\n\r\n  const setResults: () => JSX.Element | JSX.Element[] = () => {\r\n    if (!setSearchParameters()) return <SekndLoader></SekndLoader>;\r\n    switch (setSearchParameters().searchType) {\r\n      case \"ALL\":\r\n        if (yelpPlacesLoading || yelpEventsLoading || ticketmasterLoading) {\r\n          return <SekndLoader></SekndLoader>;\r\n        } else {\r\n          const results: Results = {\r\n            items: [\r\n              ...checkYelpPlacesArray,\r\n              ...checkYelpEventsArray,\r\n              ...checkTicketMasterArray,\r\n            ],\r\n            errors: {\r\n              yelpPlacesError,\r\n              yelpEventsError,\r\n              ticketmasterError,\r\n            },\r\n          };\r\n          return results.items.map((item) => (\r\n            <ResultCard key={item.id} item={item}></ResultCard>\r\n          ));\r\n        }\r\n\r\n      case \"PLACES\":\r\n        if (yelpPlacesLoading) {\r\n          return <SekndLoader></SekndLoader>;\r\n        } else {\r\n          const results: Results = {\r\n            items: checkYelpPlacesArray,\r\n            errors: {\r\n              yelpPlacesError,\r\n              yelpEventsError,\r\n              ticketmasterError,\r\n            },\r\n          };\r\n          return (\r\n            <div className={css.resultsSlider}>\r\n              {results.items.map((item) => (\r\n                <ResultCard key={item.id} item={item}></ResultCard>\r\n              ))}\r\n            </div>\r\n          );\r\n        }\r\n\r\n      case \"EVENTS\":\r\n        if (ticketmasterLoading || yelpEventsLoading) {\r\n          return <SekndLoader></SekndLoader>;\r\n        } else {\r\n          const results: Results = {\r\n            items: [...checkYelpEventsArray, ...checkTicketMasterArray],\r\n            errors: {\r\n              yelpEventsError,\r\n              ticketmasterError,\r\n            },\r\n          };\r\n\r\n          return results.items.map((item) => (\r\n            <ResultCard key={item.id} item={item}></ResultCard>\r\n          ));\r\n        }\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <main className={css.queriedPage}>\r\n        {/* <section className={css.queryDisplay}></section> */}\r\n        <section className={css.header}>\r\n          {/* {setTypeButtons()} */}\r\n          <button className={css.sort}>Sort</button>\r\n        </section>\r\n        {setResults()}\r\n      </main>\r\n    </Layout>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}