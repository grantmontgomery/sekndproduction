{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from \"react\";\nimport { yelpBusinessesCall } from \"../../apicalls\";\nexport default function Queried({\n  results\n}) {\n  console.log(results);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 10\n    }\n  }); // return (\n  //   <Layout>\n  //     <main className={css.queriedPage}>\n  //       <section className={css.queryDisplay}></section>\n  //       <section className={css.header}></section>\n  //       <section className={css.results}>\n  //         <div className={css.resultsSlider}>\n  //           {results.map((business) => {\n  //             return <ResultCard></ResultCard>;\n  //           })}\n  //         </div>\n  //       </section>\n  //     </main>\n  //   </Layout>\n  // );\n}\n\nQueried.getInitialProps = async ({\n  query\n}) => {\n  if (query.queried) {\n    const checkURLIsString = query.queried.toString();\n    const paramValueArray = checkURLIsString.split(\"+\");\n    const searchParamsValues = {};\n    paramValueArray.forEach(param => {\n      const indexOfEqual = param.search(\"=\");\n      if (indexOfEqual === -1) return;else {\n        const paramKey = param.substring(0, indexOfEqual);\n        const paramValue = param.substring(indexOfEqual + 1);\n        searchParamsValues[paramKey] = paramValue;\n      }\n    });\n    const apiResponse = await yelpBusinessesCall(searchParamsValues);\n\n    const results = _objectSpread({}, apiResponse);\n\n    return {\n      results\n    };\n  } else {\n    return {\n      results: {}\n    };\n  }\n};","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","yelpBusinessesCall","Queried","results","console","log","getInitialProps","query","queried","checkURLIsString","toString","paramValueArray","split","searchParamsValues","forEach","param","indexOfEqual","search","paramKey","substring","paramValue","apiResponse"],"mappings":";;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SACEC,kBADF,QAIO,gBAJP;AAOA,eAAe,SAASC,OAAT,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAA8B;AAC3CC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP,CAF2C,CAG3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAEDD,OAAO,CAACI,eAAR,GAA0B,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAmC;AAC3D,MAAIA,KAAK,CAACC,OAAV,EAAmB;AACjB,UAAMC,gBAAwB,GAAGF,KAAK,CAACC,OAAN,CAAcE,QAAd,EAAjC;AACA,UAAMC,eAAyB,GAAGF,gBAAgB,CAACG,KAAjB,CAAuB,GAAvB,CAAlC;AAEA,UAAMC,kBAA6C,GAAG,EAAtD;AAEAF,IAAAA,eAAe,CAACG,OAAhB,CAAyBC,KAAD,IAAW;AACjC,YAAMC,YAAoB,GAAGD,KAAK,CAACE,MAAN,CAAa,GAAb,CAA7B;AACA,UAAID,YAAY,KAAK,CAAC,CAAtB,EAAyB,OAAzB,KACK;AACH,cAAME,QAAgB,GAAGH,KAAK,CAACI,SAAN,CAAgB,CAAhB,EAAmBH,YAAnB,CAAzB;AACA,cAAMI,UAAkB,GAAGL,KAAK,CAACI,SAAN,CAAgBH,YAAY,GAAG,CAA/B,CAA3B;AACAH,QAAAA,kBAAkB,CAACK,QAAD,CAAlB,GAA+BE,UAA/B;AACD;AACF,KARD;AAUA,UAAMC,WAAqB,GAAG,MAAMpB,kBAAkB,CAACY,kBAAD,CAAtD;;AACA,UAAMV,OAAW,qBAAQkB,WAAR,CAAjB;;AAEA,WAAO;AAAElB,MAAAA;AAAF,KAAP;AACD,GApBD,MAoBO;AACL,WAAO;AAAEA,MAAAA,OAAO,EAAE;AAAX,KAAP;AACD;AACF,CAxBD","sourcesContent":["import * as React from \"react\";\r\nimport { Layout, ResultCard } from \"../../components\";\r\nimport {\r\n  yelpBusinessesCall,\r\n  yelpEventsCall,\r\n  ticketMasterCall,\r\n} from \"../../apicalls\";\r\nimport css from \"../../styles/Queried.module.scss\";\r\n\r\nexport default function Queried({ results }) {\r\n  console.log(results);\r\n  return <div></div>;\r\n  // return (\r\n  //   <Layout>\r\n  //     <main className={css.queriedPage}>\r\n  //       <section className={css.queryDisplay}></section>\r\n  //       <section className={css.header}></section>\r\n  //       <section className={css.results}>\r\n  //         <div className={css.resultsSlider}>\r\n  //           {results.map((business) => {\r\n  //             return <ResultCard></ResultCard>;\r\n  //           })}\r\n  //         </div>\r\n  //       </section>\r\n  //     </main>\r\n  //   </Layout>\r\n  // );\r\n}\r\n\r\nQueried.getInitialProps = async ({ query }): Promise<any> => {\r\n  if (query.queried) {\r\n    const checkURLIsString: string = query.queried.toString();\r\n    const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n    const searchParamsValues: { [key: string]: string } = {};\r\n\r\n    paramValueArray.forEach((param) => {\r\n      const indexOfEqual: number = param.search(\"=\");\r\n      if (indexOfEqual === -1) return;\r\n      else {\r\n        const paramKey: string = param.substring(0, indexOfEqual);\r\n        const paramValue: string = param.substring(indexOfEqual + 1);\r\n        searchParamsValues[paramKey] = paramValue;\r\n      }\r\n    });\r\n\r\n    const apiResponse: Response = await yelpBusinessesCall(searchParamsValues);\r\n    const results: {} = { ...apiResponse };\r\n\r\n    return { results };\r\n  } else {\r\n    return { results: {} };\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}