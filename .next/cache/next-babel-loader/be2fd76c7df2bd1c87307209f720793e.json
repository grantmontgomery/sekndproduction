{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from \"react\";\n\nconst partsReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_PART\":\n      return state.parts.length < 7 ? {\n        parts: [...state.parts, action.payload.part]\n      } : null;\n\n    case \"REMOVE_PART\":\n      return {\n        parts: state.parts.filter(part => part.id !== action.payload.id)\n      };\n\n    case \"CHANGE_CUSTOM_DETAIL\":\n      return {\n        parts: state.parts.map(part => {\n          if (part.id !== action.payload.id) return part;\n          return _objectSpread(_objectSpread({}, part), {}, {\n            details: action.payload.details\n          });\n        })\n      };\n\n    case \"UPDATE_FROM_CACHE\":\n      return {\n        parts: action.payload.parts\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst PartsStateContext = /*#__PURE__*/React.createContext(undefined);\nconst PartsDispatchContext = /*#__PURE__*/React.createContext(undefined);\nconst initialState = {\n  parts: []\n};\nexport const PartsProvider = ({\n  children\n}) => {\n  const [state, dispatch] = React.useReducer(partsReducer, {\n    parts: []\n  }); // window ? console.log(\"parts successful\") : console.log(\"window can't load\");\n  // React.useEffect(() => {\n  //   if (localStorage) {\n  //     localStorage.setItem(\"parts\", JSON.stringify(state));\n  //     localStorage.getItem(\"parts\");\n  //     console.log(localStorage.getItem(\"parts\"));\n  //   }\n  // }, [state]);\n\n  return __jsx(PartsStateContext.Provider, {\n    value: state\n  }, __jsx(PartsDispatchContext.Provider, {\n    value: dispatch\n  }, children));\n};\nexport const usePartsState = () => {\n  const context = React.useContext(PartsStateContext);\n\n  if (context === undefined) {\n    throw new Error(\"Please use within PartsProvider\");\n  }\n\n  return context;\n};\nexport const usePartsDispatch = () => {\n  const context = React.useContext(PartsDispatchContext);\n\n  if (context === undefined) {\n    throw new Error(\"Please use within PartsProvider\");\n  }\n\n  return context;\n};","map":null,"metadata":{},"sourceType":"module"}