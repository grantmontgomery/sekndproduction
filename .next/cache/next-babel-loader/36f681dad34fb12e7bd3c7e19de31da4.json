{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\n\nvar squaresReducer = function squaresReducer(state, action) {\n  switch (action.type) {\n    case \"ADD_SQUARES\":\n      return {\n        squares: _toConsumableArray(new Array(action.payload.numberOfSquares)).map(function () {\n          return {\n            part: null\n          };\n        })\n      };\n\n    case \"ADD_PART_TO_SQUARE\":\n      return {\n        squares: state.squares.map(function (square, i) {\n          return i !== action.payload.index ? square : {\n            part: action.payload.part\n          };\n        })\n      };\n\n    case \"REMOVE_PART_FROM_SQUARE\":\n      return {\n        squares: state.squares.map(function (square, i) {\n          return i !== action.payload.index ? {\n            part: action.payload.part\n          } : square;\n        })\n      };\n\n    default:\n      return state;\n  }\n};\n\nvar SquaresContext = /*#__PURE__*/React.createContext(undefined);\nvar SquaresDispatch = /*#__PURE__*/React.createContext(undefined);\nexport var SquaresProvider = function SquaresProvider(_ref) {\n  var children = _ref.children;\n\n  var _React$useReducer = React.useReducer(squaresReducer, {\n    squares: []\n  }),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  return __jsx(SquaresContext.Provider, {\n    value: state\n  }, __jsx(SquaresDispatch.Provider, {\n    value: dispatch\n  }, children));\n};\nexport var useSquaresState = function useSquaresState() {\n  var context = React.useContext(SquaresContext);\n\n  if (context === undefined) {\n    throw new Error(\"Please use within Squares Provider\");\n  }\n\n  return context;\n};\nexport var useSquaresDispatch = function useSquaresDispatch() {\n  var context = React.useContext(SquaresDispatch);\n\n  if (context === undefined) {\n    throw new Error(\"Please use within Squares Provider\");\n  }\n\n  return context;\n};","map":null,"metadata":{},"sourceType":"module"}