{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { Layout } from \"../../components\";\nexport default function Queried(props) {\n  console.log(props);\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }\n  }, __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }\n  }), __jsx(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }\n  }));\n}\nexport const getServerSideProps = async ({\n  params\n}) => {\n  const checkURLIsString = params.queried.toString();\n  const paramValueArray = checkURLIsString.split(\"+\");\n  const searchParamsValues = {};\n  paramValueArray.forEach(param => {\n    const indexOfEqual = param.search(\"=\");\n    if (indexOfEqual === -1) return;else {\n      const paramKey = param.substring(0, indexOfEqual);\n      const paramValue = param.substring(indexOfEqual + 1);\n      searchParamsValues[paramKey] = paramValue;\n    }\n  });\n  const yelpBusinesses = new URL(\"https://api.yelp.com/v3/businesses/search\"),\n        args = {\n    location: searchParamsValues.location,\n    radius: searchParamsValues.radius,\n    term: searchParamsValues.placeType\n  };\n  Object.keys(args).forEach(key => yelpBusinesses.searchParams.append(key, args[key]));\n  const yelpUrlString = yelpBusinesses.toString();\n  const yelpResponse = await fetch(yelpUrlString, {\n    headers: {\n      Authorization: `Bearer ${process.env.YELP_API_KEY}`\n    }\n  });\n  const jsonResponse = await yelpResponse.json();\n  return {\n    props: {\n      jsonResponse\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","Layout","Queried","props","console","log","getServerSideProps","params","checkURLIsString","queried","toString","paramValueArray","split","searchParamsValues","forEach","param","indexOfEqual","search","paramKey","substring","paramValue","yelpBusinesses","URL","args","location","radius","term","placeType","Object","keys","key","searchParams","append","yelpUrlString","yelpResponse","fetch","headers","Authorization","process","env","YELP_API_KEY","jsonResponse","json"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,MAAT,QAAuB,kBAAvB;AAGA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACrCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,SACE,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD;AAED,OAAO,MAAMG,kBAAsC,GAAG,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAsB;AAC1E,QAAMC,gBAAwB,GAAGD,MAAM,CAACE,OAAP,CAAeC,QAAf,EAAjC;AACA,QAAMC,eAAyB,GAAGH,gBAAgB,CAACI,KAAjB,CAAuB,GAAvB,CAAlC;AAEA,QAAMC,kBAA6C,GAAG,EAAtD;AAEAF,EAAAA,eAAe,CAACG,OAAhB,CAAyBC,KAAD,IAAW;AACjC,UAAMC,YAAoB,GAAGD,KAAK,CAACE,MAAN,CAAa,GAAb,CAA7B;AACA,QAAID,YAAY,KAAK,CAAC,CAAtB,EAAyB,OAAzB,KACK;AACH,YAAME,QAAgB,GAAGH,KAAK,CAACI,SAAN,CAAgB,CAAhB,EAAmBH,YAAnB,CAAzB;AACA,YAAMI,UAAkB,GAAGL,KAAK,CAACI,SAAN,CAAgBH,YAAY,GAAG,CAA/B,CAA3B;AACAH,MAAAA,kBAAkB,CAACK,QAAD,CAAlB,GAA+BE,UAA/B;AACD;AACF,GARD;AAUA,QAAMC,cAAmB,GAAG,IAAIC,GAAJ,CACxB,2CADwB,CAA5B;AAAA,QAGEC,IAAI,GAAG;AACLC,IAAAA,QAAQ,EAAEX,kBAAkB,CAACW,QADxB;AAELC,IAAAA,MAAM,EAAEZ,kBAAkB,CAACY,MAFtB;AAGLC,IAAAA,IAAI,EAAEb,kBAAkB,CAACc;AAHpB,GAHT;AAQAC,EAAAA,MAAM,CAACC,IAAP,CAAYN,IAAZ,EAAkBT,OAAlB,CAA2BgB,GAAD,IACxBT,cAAc,CAACU,YAAf,CAA4BC,MAA5B,CAAmCF,GAAnC,EAAwCP,IAAI,CAACO,GAAD,CAA5C,CADF;AAIA,QAAMG,aAAqB,GAAGZ,cAAc,CAACX,QAAf,EAA9B;AAEA,QAAMwB,YAAsB,GAAG,MAAMC,KAAK,CAACF,aAAD,EAAgB;AACxDG,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAG,UAASC,OAAO,CAACC,GAAR,CAAYC,YAAa;AAD3C;AAD+C,GAAhB,CAA1C;AAKA,QAAMC,YAAkB,GAAG,MAAMP,YAAY,CAACQ,IAAb,EAAjC;AAEA,SAAO;AACLvC,IAAAA,KAAK,EAAE;AAAEsC,MAAAA;AAAF;AADF,GAAP;AAGD,CAxCM","sourcesContent":["import * as React from \"react\";\r\nimport { GetServerSideProps } from \"next\";\r\nimport { Layout } from \"../../components\";\r\nimport { yelpBusinessesAPI } from \"../../apicalls\";\r\n\r\nexport default function Queried(props) {\r\n  console.log(props);\r\n  return (\r\n    <React.Fragment>\r\n      <Layout></Layout>\r\n      <main></main>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport const getServerSideProps: GetServerSideProps = async ({ params }) => {\r\n  const checkURLIsString: string = params.queried.toString();\r\n  const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n  const searchParamsValues: { [key: string]: string } = {};\r\n\r\n  paramValueArray.forEach((param) => {\r\n    const indexOfEqual: number = param.search(\"=\");\r\n    if (indexOfEqual === -1) return;\r\n    else {\r\n      const paramKey: string = param.substring(0, indexOfEqual);\r\n      const paramValue: string = param.substring(indexOfEqual + 1);\r\n      searchParamsValues[paramKey] = paramValue;\r\n    }\r\n  });\r\n\r\n  const yelpBusinesses: URL = new URL(\r\n      \"https://api.yelp.com/v3/businesses/search\"\r\n    ),\r\n    args = {\r\n      location: searchParamsValues.location,\r\n      radius: searchParamsValues.radius,\r\n      term: searchParamsValues.placeType,\r\n    };\r\n  Object.keys(args).forEach((key) =>\r\n    yelpBusinesses.searchParams.append(key, args[key])\r\n  );\r\n\r\n  const yelpUrlString: string = yelpBusinesses.toString();\r\n\r\n  const yelpResponse: Response = await fetch(yelpUrlString, {\r\n    headers: {\r\n      Authorization: `Bearer ${process.env.YELP_API_KEY}`,\r\n    },\r\n  });\r\n  const jsonResponse: JSON = await yelpResponse.json();\r\n\r\n  return {\r\n    props: { jsonResponse },\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}