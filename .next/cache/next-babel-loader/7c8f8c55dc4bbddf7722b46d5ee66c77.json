{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { Layout, ResultCard } from \"../../components\";\nimport css from \"../../styles/Queried.module.scss\";\n\nvar Queried = function Queried(_ref) {\n  var results = _ref.results;\n\n  var _React$useState = React.useState({\n    resultsType: \"\"\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1]; // React.useEffect(() => {\n  //   if (searchType) {\n  //     switch (searchType) {\n  //       case \"ALL\":\n  //     }\n  //   }\n  // });\n\n\n  console.log(results); // const setTypeButtons: () => JSX.Element = () => {\n  //   if (searchType) {\n  //     switch (searchType) {\n  //       case \"ALL\":\n  //         return (\n  //           <React.Fragment>\n  //             <button className={css.typeButton}>Places</button>\n  //             <button className={css.typeButton}>Events</button>\n  //           </React.Fragment>\n  //         );\n  //       case \"PLACES\":\n  //         return <button className={css.typeButton}>Places</button>;\n  //       case \"EVENTS\":\n  //         return <button className={css.typeButton}>Events</button>;\n  //       default:\n  //         return (\n  //           <React.Fragment>\n  //             <button className={css.typeButton}>Places</button>\n  //             <button className={css.typeButton}>Events</button>\n  //           </React.Fragment>\n  //         );\n  //     }\n  //   } else {\n  //     return (\n  //       <React.Fragment>\n  //         <button className={css.typeButton}>Places</button>\n  //         <button className={css.typeButton}>Events</button>\n  //       </React.Fragment>\n  //     );\n  //   }\n  // };\n\n  return __jsx(Layout, null, __jsx(\"main\", {\n    className: css.queriedPage\n  }, __jsx(\"section\", {\n    className: css.queryDisplay\n  }), __jsx(\"section\", {\n    className: css.header\n  }, __jsx(\"button\", {\n    className: css.sort\n  }, \"Sort\")), __jsx(\"section\", {\n    className: css.results\n  }, __jsx(\"div\", {\n    className: css.resultsSlider\n  }, results ? results.map(function (item) {\n    return __jsx(ResultCard, {\n      key: item.id,\n      item: item\n    });\n  }) : null))));\n}; // Queried.getInitialProps = async ({\n//   query,\n// }): Promise<{ results: any; searchType: string }> => {\n//   if (query.queried) {\n//     const checkURLIsString: string = query.queried.toString();\n//     const paramValueArray: string[] = checkURLIsString.split(\"+\");\n//     const searchParamsValues: { [key: string]: string } = {};\n//     paramValueArray.forEach((param) => {\n//       const indexOfEqual: number = param.search(\"=\");\n//       if (indexOfEqual === -1) return;\n//       else {\n//         const paramKey: string = param.substring(0, indexOfEqual);\n//         const paramValue: string = param.substring(indexOfEqual + 1);\n//         searchParamsValues[paramKey] = paramValue;\n//       }\n//     });\n//     const apiResponse: Promise<\n//       { [key: string]: any }[] | string\n//     > = await yelpBusinessesCall(searchParamsValues);\n//     return { results: apiResponse, searchType: searchParamsValues.searchType };\n//   } else {\n//     return { results: {}, searchType: \"ALL\" };\n//   }\n// };\n\n\nexport var __N_SSP = true;\nexport default Queried; // const { location, radius, term } = req.body;\n// const yelpBusinesses: URL = new URL(\n//     \"https://api.yelp.com/v3/businesses/search\"\n//   ),\n//   params: Params = {\n//     location,\n//     radius,\n//     term,\n//   };\n// Object.keys(params).forEach((key) =>\n//   yelpBusinesses.searchParams.append(key, params[key])\n// );\n// const yelpUrlString: string = yelpBusinesses.toString();\n// //function\n// const yelpResponse: Response = await fetch(yelpUrlString, {\n//   headers: {\n//     Authorization: `Bearer ${process.env.YELP_API_KEY}`,\n//   },\n// });","map":null,"metadata":{},"sourceType":"module"}