{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\state\\\\GridSquaresContext.tsx\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\n\nconst squaresReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_SQUARES\":\n      const squares = [];\n      let numberOfSquares = 0;\n\n      while (numberOfSquares < action.payload.numberOfSquares) {\n        squares.push({\n          part: null\n        });\n      }\n\n      return {\n        squares\n      };\n\n    case \"ADD_PART_TO_SQUARE\":\n      return {\n        squares: state.squares.map((square, i) => {\n          return i !== action.payload.index ? square : {\n            part: action.payload.part\n          };\n        })\n      };\n\n    case \"REMOVE_PART_FROM_SQUARE\":\n      return {\n        squares: state.squares.map((square, i) => {\n          return i !== action.payload.index ? {\n            part: action.payload.part\n          } : square;\n        })\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst SquaresContext = /*#__PURE__*/React.createContext(undefined);\nconst SquaresDispatch = /*#__PURE__*/React.createContext(undefined);\nexport const GridProvider = ({\n  children\n}) => {\n  const [state, dispatch] = React.useReducer(squaresReducer, {\n    squares: []\n  });\n  return __jsx(SquaresContext.Provider, {\n    value: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, __jsx(SquaresDispatch.Provider, {\n    value: dispatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, children));\n};\nexport const useSquaresState = () => {\n  const context = React.useContext(SquaresContext);\n\n  if (undefined === context) {\n    throw new Error(\"Please use within Squares Provider\");\n  }\n\n  return context;\n};\nexport const useSquaresDispatch = () => {\n  const context = React.useContext(SquaresDispatch);\n\n  if (undefined === context) {\n    throw new Error(\"Please use within Squares Provider\");\n  }\n\n  return context;\n};","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/state/GridSquaresContext.tsx"],"names":["React","squaresReducer","state","action","type","squares","numberOfSquares","payload","push","part","map","square","i","index","SquaresContext","createContext","undefined","SquaresDispatch","GridProvider","children","dispatch","useReducer","useSquaresState","context","useContext","Error","useSquaresDispatch"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAeA,MAAMC,cAA4C,GAAG,CACnDC,KADmD,EAEnDC,MAFmD,KAGhD;AACH,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,aAAL;AACE,YAAMC,OAAyB,GAAG,EAAlC;AACA,UAAIC,eAAuB,GAAG,CAA9B;;AACA,aAAOA,eAAe,GAAGH,MAAM,CAACI,OAAP,CAAeD,eAAxC,EAAyD;AACvDD,QAAAA,OAAO,CAACG,IAAR,CAAa;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAAb;AACD;;AACD,aAAO;AAAEJ,QAAAA;AAAF,OAAP;;AACF,SAAK,oBAAL;AACE,aAAO;AACLA,QAAAA,OAAO,EAAEH,KAAK,CAACG,OAAN,CAAcK,GAAd,CAAkB,CAACC,MAAD,EAASC,CAAT,KAAe;AACxC,iBAAOA,CAAC,KAAKT,MAAM,CAACI,OAAP,CAAeM,KAArB,GACHF,MADG,GAEH;AAAEF,YAAAA,IAAI,EAAEN,MAAM,CAACI,OAAP,CAAeE;AAAvB,WAFJ;AAGD,SAJQ;AADJ,OAAP;;AAOF,SAAK,yBAAL;AACE,aAAO;AACLJ,QAAAA,OAAO,EAAEH,KAAK,CAACG,OAAN,CAAcK,GAAd,CAAkB,CAACC,MAAD,EAASC,CAAT,KAAe;AACxC,iBAAOA,CAAC,KAAKT,MAAM,CAACI,OAAP,CAAeM,KAArB,GACH;AAAEJ,YAAAA,IAAI,EAAEN,MAAM,CAACI,OAAP,CAAeE;AAAvB,WADG,GAEHE,MAFJ;AAGD,SAJQ;AADJ,OAAP;;AAOF;AACE,aAAOT,KAAP;AAzBJ;AA2BD,CA/BD;;AAiCA,MAAMY,cAAoC,gBAAGd,KAAK,CAACe,aAAN,CAAoBC,SAApB,CAA7C;AAEA,MAAMC,eAEL,gBAAGjB,KAAK,CAACe,aAAN,CAAoBC,SAApB,CAFJ;AAIA,OAAO,MAAME,YAII,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiD;AACnE,QAAM,CAACjB,KAAD,EAAQkB,QAAR,IAAoBpB,KAAK,CAACqB,UAAN,CAAiBpB,cAAjB,EAAiC;AACzDI,IAAAA,OAAO,EAAE;AADgD,GAAjC,CAA1B;AAGA,SACE,MAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAEH,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEkB,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,QADH,CADF,CADF;AAOD,CAfM;AAiBP,OAAO,MAAMG,eAAe,GAAG,MAAa;AAC1C,QAAMC,OAAO,GAAGvB,KAAK,CAACwB,UAAN,CAAiBV,cAAjB,CAAhB;;AACA,MAAIE,SAAS,KAAKO,OAAlB,EAA2B;AACzB,UAAM,IAAIE,KAAJ,CAAU,oCAAV,CAAN;AACD;;AACD,SAAOF,OAAP;AACD,CANM;AAQP,OAAO,MAAMG,kBAAkB,GAAG,MAA8B;AAC9D,QAAMH,OAAO,GAAGvB,KAAK,CAACwB,UAAN,CAAiBP,eAAjB,CAAhB;;AAEA,MAAID,SAAS,KAAKO,OAAlB,EAA2B;AACzB,UAAM,IAAIE,KAAJ,CAAU,oCAAV,CAAN;AACD;;AACD,SAAOF,OAAP;AACD,CAPM","sourcesContent":["import * as React from \"react\";\r\n\r\ntype State = {\r\n  squares: { part: { [key: string]: any } | null }[];\r\n};\r\ntype Action = {\r\n  type: string;\r\n  payload: {\r\n    numberOfSquares?: number;\r\n    part?: { [key: string]: any };\r\n    index?: number;\r\n    id?: string;\r\n  };\r\n};\r\n\r\nconst squaresReducer: React.Reducer<State, Action> = (\r\n  state: State,\r\n  action: Action\r\n) => {\r\n  switch (action.type) {\r\n    case \"ADD_SQUARES\":\r\n      const squares: State[\"squares\"] = [];\r\n      let numberOfSquares: number = 0;\r\n      while (numberOfSquares < action.payload.numberOfSquares) {\r\n        squares.push({ part: null });\r\n      }\r\n      return { squares };\r\n    case \"ADD_PART_TO_SQUARE\":\r\n      return {\r\n        squares: state.squares.map((square, i) => {\r\n          return i !== action.payload.index\r\n            ? square\r\n            : { part: action.payload.part };\r\n        }),\r\n      };\r\n    case \"REMOVE_PART_FROM_SQUARE\":\r\n      return {\r\n        squares: state.squares.map((square, i) => {\r\n          return i !== action.payload.index\r\n            ? { part: action.payload.part }\r\n            : square;\r\n        }),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst SquaresContext: React.Context<State> = React.createContext(undefined);\r\n\r\nconst SquaresDispatch: React.Context<\r\n  React.Dispatch<Action> | undefined\r\n> = React.createContext(undefined);\r\n\r\nexport const GridProvider: ({\r\n  children,\r\n}: {\r\n  children: React.ReactNode;\r\n}) => JSX.Element = ({ children }: { children: React.ReactNode }) => {\r\n  const [state, dispatch] = React.useReducer(squaresReducer, {\r\n    squares: [],\r\n  });\r\n  return (\r\n    <SquaresContext.Provider value={state}>\r\n      <SquaresDispatch.Provider value={dispatch}>\r\n        {children}\r\n      </SquaresDispatch.Provider>\r\n    </SquaresContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useSquaresState = (): State => {\r\n  const context = React.useContext(SquaresContext);\r\n  if (undefined === context) {\r\n    throw new Error(\"Please use within Squares Provider\");\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const useSquaresDispatch = (): React.Dispatch<Action> => {\r\n  const context = React.useContext(SquaresDispatch);\r\n\r\n  if (undefined === context) {\r\n    throw new Error(\"Please use within Squares Provider\");\r\n  }\r\n  return context;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}