{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from \"react\";\nimport { Layout } from \"../../components\";\nimport { yelpBusinessesCall, yelpEventsCall, ticketMasterCall } from \"../../apicalls\";\nimport css from \"../../styles/Queried.module.scss\";\nexport default function Queried({\n  results,\n  searchType\n}) {\n  const [state, setState] = React.useState({\n    resultsType: \"\"\n  });\n  console.log(results);\n  React.useEffect(() => {\n    if (searchType) {\n      switch (searchType) {\n        case \"ALL\":\n      }\n    }\n  });\n\n  const setTypeButtons = () => {\n    if (searchType) {\n      switch (searchType) {\n        case \"ALL\":\n          return __jsx(React.Fragment, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 28,\n              columnNumber: 13\n            }\n          }, __jsx(\"button\", {\n            className: css.typeButton,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 15\n            }\n          }, \"Places\"), __jsx(\"button\", {\n            className: css.typeButton,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 15\n            }\n          }, \"Events\"));\n\n        case \"PLACES\":\n          return __jsx(\"button\", {\n            className: css.typeButton,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 18\n            }\n          }, \"Places\");\n\n        case \"EVENTS\":\n          return __jsx(\"button\", {\n            className: css.typeButton,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 18\n            }\n          }, \"Events\");\n\n        default:\n          return __jsx(React.Fragment, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 13\n            }\n          }, __jsx(\"button\", {\n            className: css.typeButton,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 15\n            }\n          }, \"Places\"), __jsx(\"button\", {\n            className: css.typeButton,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 15\n            }\n          }, \"Events\"));\n      }\n    } else {\n      return __jsx(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }\n      }, __jsx(\"button\", {\n        className: css.typeButton,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }\n      }, \"Places\"), __jsx(\"button\", {\n        className: css.typeButton,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }\n      }, \"Events\"));\n    }\n  };\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, __jsx(\"main\", {\n    className: css.queriedPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, __jsx(\"section\", {\n    className: css.queryDisplay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }), __jsx(\"section\", {\n    className: css.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, setTypeButtons(), __jsx(\"button\", {\n    className: css.sort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, \"Sort\")), __jsx(\"section\", {\n    className: css.results,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: css.resultsSlider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }))));\n}\n\nQueried.getInitialProps = async ({\n  query\n}) => {\n  if (query.queried) {\n    const checkURLIsString = query.queried.toString();\n    const paramValueArray = checkURLIsString.split(\"+\");\n    const searchParamsValues = {};\n    paramValueArray.forEach(param => {\n      const indexOfEqual = param.search(\"=\");\n      if (indexOfEqual === -1) return;else {\n        const paramKey = param.substring(0, indexOfEqual);\n        const paramValue = param.substring(indexOfEqual + 1);\n        searchParamsValues[paramKey] = paramValue;\n      }\n    });\n\n    class APICalls {\n      constructor(searchParams) {\n        _defineProperty(this, \"searchParams\", void 0);\n\n        _defineProperty(this, \"results\", void 0);\n\n        this.searchParams = searchParams;\n        this.results = {\n          items: {\n            places: [],\n            events: []\n          },\n          errors: {\n            yelpPlaces: \"\",\n            yelpEvents: \"\",\n            ticketmaster: \"\"\n          }\n        };\n      }\n\n      async yelpBusinesses() {\n        const yelpBusinessesResponse = await yelpBusinessesCall(this.searchParams);\n        Array.isArray(yelpBusinessesResponse) ? this.results.items.places = yelpBusinessesResponse : this.results.errors.yelpPlaces = `${yelpBusinessesResponse}`;\n      }\n\n      async yelpEvents() {\n        const yelpEventsResponse = await yelpEventsCall(this.searchParams);\n        Array.isArray(yelpEventsResponse) ? this.results.items.events = [...this.results.items.events, ...yelpEventsResponse] : this.results.errors.yelpEvents = `${yelpEventsResponse}`;\n      }\n\n      async ticketMaster() {\n        const ticketMasterResponse = await ticketMasterCall(this.searchParams);\n        Array.isArray(ticketMasterResponse) ? this.results.items.events = [...this.results.items.events, ...ticketMasterResponse] : this.results.errors.ticketmaster = `${ticketMasterResponse}`;\n      }\n\n    }\n\n    const callAPIS = async (searchType) => {\n      const APICall = new APICalls(searchParamsValues);\n\n      try {\n        switch (searchType) {\n          case \"PLACES\":\n            APICall.yelpBusinesses();\n            return APICall.results;\n\n          case \"EVENTS\":\n            APICall.yelpEvents();\n            APICall.ticketMaster();\n            return APICall.results;\n\n          case \"ALL\":\n            APICall.yelpBusinesses();\n            APICall.yelpEvents();\n            APICall.ticketMaster();\n            return APICall.results;\n\n          default:\n            APICall.yelpBusinesses();\n            APICall.yelpEvents();\n            APICall.ticketMaster();\n            return APICall.results;\n        }\n      } catch {\n        APICall.results.errors.yelpPlaces = \"CALL ERROR\";\n        APICall.results.errors.yelpEvents = \"CALL ERROR\";\n        APICall.results.errors.ticketmaster = \"CALL ERROR\";\n        return APICall.results;\n      }\n    };\n\n    console.log(searchParamsValues);\n    return {\n      results: callAPIS(searchParamsValues.searchType),\n      searchType: searchParamsValues.searchType\n    };\n  } else {\n    return {\n      results: {},\n      searchType: \"ALL\"\n    };\n  }\n};","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","Layout","yelpBusinessesCall","yelpEventsCall","ticketMasterCall","css","Queried","results","searchType","state","setState","useState","resultsType","console","log","useEffect","setTypeButtons","typeButton","queriedPage","queryDisplay","header","sort","resultsSlider","getInitialProps","query","queried","checkURLIsString","toString","paramValueArray","split","searchParamsValues","forEach","param","indexOfEqual","search","paramKey","substring","paramValue","APICalls","constructor","searchParams","items","places","events","errors","yelpPlaces","yelpEvents","ticketmaster","yelpBusinesses","yelpBusinessesResponse","Array","isArray","yelpEventsResponse","ticketMaster","ticketMasterResponse","callAPIS","APICall"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { Layout, ResultCard } from \"../../components\";\r\nimport {\r\n  yelpBusinessesCall,\r\n  yelpEventsCall,\r\n  ticketMasterCall,\r\n} from \"../../apicalls\";\r\nimport css from \"../../styles/Queried.module.scss\";\r\n\r\nexport default function Queried({ results, searchType }): JSX.Element {\r\n  const [state, setState] = React.useState({ resultsType: \"\" });\r\n\r\n  console.log(results);\r\n\r\n  React.useEffect(() => {\r\n    if (searchType) {\r\n      switch (searchType) {\r\n        case \"ALL\":\r\n      }\r\n    }\r\n  });\r\n\r\n  const setTypeButtons: () => JSX.Element = () => {\r\n    if (searchType) {\r\n      switch (searchType) {\r\n        case \"ALL\":\r\n          return (\r\n            <React.Fragment>\r\n              <button className={css.typeButton}>Places</button>\r\n              <button className={css.typeButton}>Events</button>\r\n            </React.Fragment>\r\n          );\r\n        case \"PLACES\":\r\n          return <button className={css.typeButton}>Places</button>;\r\n\r\n        case \"EVENTS\":\r\n          return <button className={css.typeButton}>Events</button>;\r\n        default:\r\n          return (\r\n            <React.Fragment>\r\n              <button className={css.typeButton}>Places</button>\r\n              <button className={css.typeButton}>Events</button>\r\n            </React.Fragment>\r\n          );\r\n      }\r\n    } else {\r\n      return (\r\n        <React.Fragment>\r\n          <button className={css.typeButton}>Places</button>\r\n          <button className={css.typeButton}>Events</button>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <main className={css.queriedPage}>\r\n        <section className={css.queryDisplay}></section>\r\n        <section className={css.header}>\r\n          {setTypeButtons()}\r\n          <button className={css.sort}>Sort</button>\r\n        </section>\r\n        <section className={css.results}>\r\n          <div className={css.resultsSlider}>\r\n            {/* {results && Array.isArray(results)\r\n              ? results.map((item) => {\r\n                  return <ResultCard key={item.id} item={item}></ResultCard>;\r\n                })\r\n              : null} */}\r\n          </div>\r\n        </section>\r\n      </main>\r\n    </Layout>\r\n  );\r\n}\r\n\r\ntype Results = {\r\n  items: { places: { [key: string]: any }[]; events: { [key: string]: any }[] };\r\n  errors: { yelpPlaces: string; yelpEvents: string; ticketmaster: string };\r\n};\r\n\r\ntype APIResponse = Promise<{ [key: string]: any }[] | string>;\r\n\r\ntype SearchParams = { [key: string]: any };\r\n\r\nQueried.getInitialProps = async ({\r\n  query,\r\n}): Promise<{ results: any; searchType: string }> => {\r\n  if (query.queried) {\r\n    const checkURLIsString: string = query.queried.toString();\r\n    const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n    const searchParamsValues: SearchParams = {};\r\n\r\n    paramValueArray.forEach((param) => {\r\n      const indexOfEqual: number = param.search(\"=\");\r\n      if (indexOfEqual === -1) return;\r\n      else {\r\n        const paramKey: string = param.substring(0, indexOfEqual);\r\n        const paramValue: string = param.substring(indexOfEqual + 1);\r\n        searchParamsValues[paramKey] = paramValue;\r\n      }\r\n    });\r\n\r\n    class APICalls {\r\n      searchParams: SearchParams;\r\n      results: Results;\r\n      constructor(searchParams: SearchParams) {\r\n        this.searchParams = searchParams;\r\n        this.results = {\r\n          items: { places: [], events: [] },\r\n          errors: { yelpPlaces: \"\", yelpEvents: \"\", ticketmaster: \"\" },\r\n        };\r\n      }\r\n\r\n      public async yelpBusinesses() {\r\n        const yelpBusinessesResponse: APIResponse = await yelpBusinessesCall(\r\n          this.searchParams\r\n        );\r\n        Array.isArray(yelpBusinessesResponse)\r\n          ? (this.results.items.places = yelpBusinessesResponse)\r\n          : (this.results.errors.yelpPlaces = `${yelpBusinessesResponse}`);\r\n      }\r\n      public async yelpEvents() {\r\n        const yelpEventsResponse: APIResponse = await yelpEventsCall(\r\n          this.searchParams\r\n        );\r\n        Array.isArray(yelpEventsResponse)\r\n          ? (this.results.items.events = [\r\n              ...this.results.items.events,\r\n              ...yelpEventsResponse,\r\n            ])\r\n          : (this.results.errors.yelpEvents = `${yelpEventsResponse}`);\r\n      }\r\n      public async ticketMaster() {\r\n        const ticketMasterResponse: APIResponse = await ticketMasterCall(\r\n          this.searchParams\r\n        );\r\n        Array.isArray(ticketMasterResponse)\r\n          ? (this.results.items.events = [\r\n              ...this.results.items.events,\r\n              ...ticketMasterResponse,\r\n            ])\r\n          : (this.results.errors.ticketmaster = `${ticketMasterResponse}`);\r\n      }\r\n    }\r\n\r\n    const callAPIS: (searchType: string) => Promise<Results> = async (\r\n      searchType\r\n    ) => {\r\n      const APICall = new APICalls(searchParamsValues);\r\n\r\n      try {\r\n        switch (searchType) {\r\n          case \"PLACES\":\r\n            APICall.yelpBusinesses();\r\n\r\n            return APICall.results;\r\n\r\n          case \"EVENTS\":\r\n            APICall.yelpEvents();\r\n            APICall.ticketMaster();\r\n            return APICall.results;\r\n          case \"ALL\":\r\n            APICall.yelpBusinesses();\r\n            APICall.yelpEvents();\r\n            APICall.ticketMaster();\r\n            return APICall.results;\r\n          default:\r\n            APICall.yelpBusinesses();\r\n            APICall.yelpEvents();\r\n            APICall.ticketMaster();\r\n            return APICall.results;\r\n        }\r\n      } catch {\r\n        APICall.results.errors.yelpPlaces = \"CALL ERROR\";\r\n        APICall.results.errors.yelpEvents = \"CALL ERROR\";\r\n        APICall.results.errors.ticketmaster = \"CALL ERROR\";\r\n        return APICall.results;\r\n      }\r\n    };\r\n\r\n    console.log(searchParamsValues);\r\n\r\n    return {\r\n      results: callAPIS(searchParamsValues.searchType),\r\n      searchType: searchParamsValues.searchType,\r\n    };\r\n  } else {\r\n    return { results: {}, searchType: \"ALL\" };\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}