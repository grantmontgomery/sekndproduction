{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { Layout } from \"../../components\";\nimport { yelpBusinessesCall } from \"../../apicalls\";\nimport css from \"../../styles/Queried.module.scss\";\nexport default function Queried(props) {\n  console(props.results);\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, __jsx(\"main\", {\n    className: css.queriedPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, __jsx(\"section\", {\n    className: css.queryDisplay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }), __jsx(\"section\", {\n    className: css.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  }), __jsx(\"section\", {\n    className: css.results,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: css.resultsSlider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 11\n    }\n  }))));\n}\n_c = Queried;\n\nQueried.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var query, checkURLIsString, paramValueArray, searchParamsValues, callResponse;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = _ref.query;\n\n            if (!query.queried) {\n              _context.next = 12;\n              break;\n            }\n\n            checkURLIsString = query.queried.toString();\n            paramValueArray = checkURLIsString.split(\"+\");\n            searchParamsValues = {};\n            paramValueArray.forEach(function (param) {\n              var indexOfEqual = param.search(\"=\");\n              if (indexOfEqual === -1) return;else {\n                var paramKey = param.substring(0, indexOfEqual);\n                var paramValue = param.substring(indexOfEqual + 1);\n                searchParamsValues[paramKey] = paramValue;\n              }\n            });\n            _context.next = 8;\n            return yelpBusinessesCall(searchParamsValues);\n\n          case 8:\n            callResponse = _context.sent;\n            return _context.abrupt(\"return\", {\n              results: callResponse\n            });\n\n          case 12:\n            return _context.abrupt(\"return\", {\n              results: {}\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar _c;\n\n$RefreshReg$(_c, \"Queried\");","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","Layout","yelpBusinessesCall","css","Queried","props","console","results","queriedPage","queryDisplay","header","resultsSlider","getInitialProps","query","queried","checkURLIsString","toString","paramValueArray","split","searchParamsValues","forEach","param","indexOfEqual","search","paramKey","substring","paramValue","callResponse"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAmC,kBAAnC;AACA,SACEC,kBADF,QAIO,gBAJP;AAKA,OAAOC,GAAP,MAAgB,kCAAhB;AAEA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACrCC,EAAAA,OAAO,CAACD,KAAK,CAACE,OAAP,CAAP;AACA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAEJ,GAAG,CAACK,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAS,IAAA,SAAS,EAAEL,GAAG,CAACM,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAS,IAAA,SAAS,EAAEN,GAAG,CAACO,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAS,IAAA,SAAS,EAAEP,GAAG,CAACI,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAEJ,GAAG,CAACQ,aAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAHF,CADF,CADF;AAWD;KAbuBP,O;;AAexBA,OAAO,CAACQ,eAAR;AAAA,uEAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,KAAT,QAASA,KAAT;;AAAA,iBACpBA,KAAK,CAACC,OADc;AAAA;AAAA;AAAA;;AAEhBC,YAAAA,gBAFgB,GAEWF,KAAK,CAACC,OAAN,CAAcE,QAAd,EAFX;AAGhBC,YAAAA,eAHgB,GAGYF,gBAAgB,CAACG,KAAjB,CAAuB,GAAvB,CAHZ;AAKhBC,YAAAA,kBALgB,GAKgC,EALhC;AAOtBF,YAAAA,eAAe,CAACG,OAAhB,CAAwB,UAACC,KAAD,EAAW;AACjC,kBAAMC,YAAoB,GAAGD,KAAK,CAACE,MAAN,CAAa,GAAb,CAA7B;AACA,kBAAID,YAAY,KAAK,CAAC,CAAtB,EAAyB,OAAzB,KACK;AACH,oBAAME,QAAgB,GAAGH,KAAK,CAACI,SAAN,CAAgB,CAAhB,EAAmBH,YAAnB,CAAzB;AACA,oBAAMI,UAAkB,GAAGL,KAAK,CAACI,SAAN,CAAgBH,YAAY,GAAG,CAA/B,CAA3B;AACAH,gBAAAA,kBAAkB,CAACK,QAAD,CAAlB,GAA+BE,UAA/B;AACD;AACF,aARD;AAPsB;AAAA,mBAiBKxB,kBAAkB,CAACiB,kBAAD,CAjBvB;;AAAA;AAiBhBQ,YAAAA,YAjBgB;AAAA,6CAmBf;AAAEpB,cAAAA,OAAO,EAAEoB;AAAX,aAnBe;;AAAA;AAAA,6CAqBf;AAAEpB,cAAAA,OAAO,EAAE;AAAX,aArBe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import * as React from \"react\";\r\nimport { Layout, ResultCard } from \"../../components\";\r\nimport {\r\n  yelpBusinessesCall,\r\n  yelpEventsCall,\r\n  ticketMasterCall,\r\n} from \"../../apicalls\";\r\nimport css from \"../../styles/Queried.module.scss\";\r\n\r\nexport default function Queried(props) {\r\n  console(props.results);\r\n  return (\r\n    <Layout>\r\n      <main className={css.queriedPage}>\r\n        <section className={css.queryDisplay}></section>\r\n        <section className={css.header}></section>\r\n        <section className={css.results}>\r\n          <div className={css.resultsSlider}></div>\r\n        </section>\r\n      </main>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nQueried.getInitialProps = async ({ query }) => {\r\n  if (query.queried) {\r\n    const checkURLIsString: string = query.queried.toString();\r\n    const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n    const searchParamsValues: { [key: string]: string } = {};\r\n\r\n    paramValueArray.forEach((param) => {\r\n      const indexOfEqual: number = param.search(\"=\");\r\n      if (indexOfEqual === -1) return;\r\n      else {\r\n        const paramKey: string = param.substring(0, indexOfEqual);\r\n        const paramValue: string = param.substring(indexOfEqual + 1);\r\n        searchParamsValues[paramKey] = paramValue;\r\n      }\r\n    });\r\n\r\n    const callResponse = await yelpBusinessesCall(searchParamsValues);\r\n\r\n    return { results: callResponse };\r\n  } else {\r\n    return { results: {} };\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}