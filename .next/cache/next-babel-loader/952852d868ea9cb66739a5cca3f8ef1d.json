{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from \"react\";\nimport { Layout, ResultCard } from \"../../components\";\nimport { yelpBusinessesCall, yelpEventsCall, ticketMasterCall } from \"../../apicalls\";\nimport css from \"../../styles/Queried.module.scss\";\nexport default function Queried({\n  results: {\n    items,\n    errors\n  },\n  searchType,\n  queried,\n  asPath,\n  pathname\n}) {\n  const [state, setState] = React.useState({\n    resultsType: \"Events\"\n  });\n  console.log(queried);\n  console.log(asPath);\n  console.log(pathname);\n  console.log(items);\n\n  const determineItems = () => {\n    if (!items) return null;\n\n    switch (searchType) {\n      case \"ALL\":\n        if (Array.isArray(items.places) && Array.isArray(items.events)) {\n          return state.resultsType === \"Places\" ? items.places.map(item => __jsx(ResultCard, {\n            key: item.id,\n            item: item,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 17\n            }\n          })) : items.events.map(item => __jsx(ResultCard, {\n            key: item.id,\n            item: item,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 17\n            }\n          }));\n        } else {\n          return null;\n        }\n\n      case \"PLACES\":\n        return Array.isArray(items.places) ? items.places.map(item => __jsx(ResultCard, {\n          key: item.id,\n          item: item,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 15\n          }\n        })) : null;\n\n      case \"EVENTS\":\n        return Array.isArray(items.events) ? items.events.map(item => __jsx(ResultCard, {\n          key: item.id,\n          item: item,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }\n        })) : null;\n\n      default:\n        if (Array.isArray(items.places) && Array.isArray(items.events)) {\n          return state.resultsType === \"Places\" ? items.places.map(item => __jsx(ResultCard, {\n            key: item.id,\n            item: item,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 17\n            }\n          })) : items.events.map(item => __jsx(ResultCard, {\n            key: item.id,\n            item: item,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 17\n            }\n          }));\n        } else {\n          return null;\n        }\n\n    }\n  }; // React.useEffect(() => {\n  //   if (searchType) {\n  //     switch (searchType) {\n  //       case \"ALL\":\n  //         return setState({ resultsType: \"Places\" });\n  //       case \"EVENTS\":\n  //         return setState({ resultsType: \"Events\" });\n  //     }\n  //   }\n  // });\n\n\n  const setTypeButtons = () => {\n    if (searchType) {\n      switch (searchType) {\n        case \"ALL\":\n          return __jsx(React.Fragment, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 13\n            }\n          }, __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: () => setState({\n              resultsType: \"Places\"\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 15\n            }\n          }, \"Places\"), __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: () => setState({\n              resultsType: \"Events\"\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 15\n            }\n          }, \"Events\"));\n\n        case \"PLACES\":\n          return __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: () => setState({\n              resultsType: \"Places\"\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 13\n            }\n          }, \"Places\");\n\n        case \"EVENTS\":\n          return __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: () => setState({\n              resultsType: \"Events\"\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 13\n            }\n          }, \"Events\");\n\n        default:\n          return __jsx(React.Fragment, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 13\n            }\n          }, __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: () => setState({\n              resultsType: \"Places\"\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 15\n            }\n          }, \"Places\"), __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: () => setState({\n              resultsType: \"Events\"\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 15\n            }\n          }, \"Events\"));\n      }\n    } else {\n      return __jsx(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 9\n        }\n      }, __jsx(\"button\", {\n        className: css.typeButton,\n        onClick: () => setState({\n          resultsType: \"Places\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }\n      }, \"Places\"), __jsx(\"button\", {\n        className: css.typeButton,\n        onClick: () => setState({\n          resultsType: \"Events\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }\n      }, \"Events\"));\n    }\n  };\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 5\n    }\n  }, __jsx(\"main\", {\n    className: css.queriedPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }, __jsx(\"section\", {\n    className: css.queryDisplay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }), __jsx(\"section\", {\n    className: css.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, setTypeButtons(), __jsx(\"button\", {\n    className: css.sort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  }, \"Sort\")), __jsx(\"section\", {\n    className: css.results,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: css.resultsSlider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 11\n    }\n  }, determineItems()))));\n}\n\nQueried.getInitialProps = async ({\n  query,\n  pathname,\n  asPath\n}) => {\n  const {\n    location,\n    radius,\n    placeType,\n    startFormatted,\n    endFormatted,\n    unixStartDate,\n    unixEndDate,\n    eventsCategory,\n    queried\n  } = query;\n  console.log(pathname);\n  console.log(queried);\n  console.log(asPath);\n\n  if (query.queried) {\n    const checkURLIsString = query.queried.toString();\n    const paramValueArray = checkURLIsString.split(\"+\");\n    const searchParamsValues = {};\n    paramValueArray.forEach(param => {\n      const indexOfEqual = param.search(\"=\");\n      if (indexOfEqual === -1) return;else {\n        const paramKey = param.substring(0, indexOfEqual);\n        const paramValue = param.substring(indexOfEqual + 1);\n        searchParamsValues[paramKey] = paramValue;\n      }\n    });\n\n    class APICalls {\n      constructor(searchParams) {\n        _defineProperty(this, \"searchParams\", void 0);\n\n        _defineProperty(this, \"results\", void 0);\n\n        this.searchParams = searchParams;\n        this.results = {\n          items: {\n            places: [],\n            events: []\n          },\n          errors: {\n            yelpPlaces: \"\",\n            yelpEvents: \"\",\n            ticketmaster: \"\"\n          }\n        };\n      }\n\n      async yelpBusinesses() {\n        const yelpBusinessesResponse = await yelpBusinessesCall(this.searchParams);\n        Array.isArray(yelpBusinessesResponse) ? this.results.items.places = yelpBusinessesResponse : this.results.errors.yelpPlaces = `${yelpBusinessesResponse}`;\n      }\n\n      async yelpEvents() {\n        const yelpEventsResponse = await yelpEventsCall(this.searchParams);\n        Array.isArray(yelpEventsResponse) ? this.results.items.events = [...this.results.items.events, ...yelpEventsResponse] : this.results.errors.yelpEvents = `${yelpEventsResponse}`;\n      }\n\n      async ticketMaster() {\n        const ticketMasterResponse = await ticketMasterCall(this.searchParams);\n        Array.isArray(ticketMasterResponse) ? this.results.items.events = [...this.results.items.events, ...ticketMasterResponse] : this.results.errors.ticketmaster = `${ticketMasterResponse}`;\n      }\n\n    }\n\n    const callAPIS = async (searchType) => {\n      const APICall = new APICalls(searchParamsValues);\n\n      try {\n        switch (searchType) {\n          case \"PLACES\":\n            APICall.yelpBusinesses();\n            return APICall.results;\n\n          case \"EVENTS\":\n            APICall.yelpEvents();\n            APICall.ticketMaster();\n            return APICall.results;\n\n          case \"ALL\":\n            APICall.yelpBusinesses();\n            APICall.yelpEvents();\n            APICall.ticketMaster();\n            return APICall.results;\n\n          default:\n            APICall.yelpBusinesses();\n            APICall.yelpEvents();\n            APICall.ticketMaster();\n            return APICall.results;\n        }\n      } catch {\n        APICall.results.errors.yelpPlaces = \"CALL ERROR\";\n        APICall.results.errors.yelpEvents = \"CALL ERROR\";\n        APICall.results.errors.ticketmaster = \"CALL ERROR\";\n        return APICall.results;\n      }\n    };\n\n    const results = await callAPIS(searchParamsValues.searchType);\n    return {\n      results,\n      searchType: searchParamsValues.searchType,\n      pathname,\n      queried,\n      asPath\n    };\n  } else {\n    return {\n      results: {},\n      searchType: \"ALL\",\n      pathname,\n      queried,\n      asPath\n    };\n  }\n};","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","Layout","ResultCard","yelpBusinessesCall","yelpEventsCall","ticketMasterCall","css","Queried","results","items","errors","searchType","queried","asPath","pathname","state","setState","useState","resultsType","console","log","determineItems","Array","isArray","places","events","map","item","id","setTypeButtons","typeButton","queriedPage","queryDisplay","header","sort","resultsSlider","getInitialProps","query","location","radius","placeType","startFormatted","endFormatted","unixStartDate","unixEndDate","eventsCategory","checkURLIsString","toString","paramValueArray","split","searchParamsValues","forEach","param","indexOfEqual","search","paramKey","substring","paramValue","APICalls","constructor","searchParams","yelpPlaces","yelpEvents","ticketmaster","yelpBusinesses","yelpBusinessesResponse","yelpEventsResponse","ticketMaster","ticketMasterResponse","callAPIS","APICall"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { Layout, ResultCard } from \"../../components\";\r\nimport {\r\n  yelpBusinessesCall,\r\n  yelpEventsCall,\r\n  ticketMasterCall,\r\n} from \"../../apicalls\";\r\nimport css from \"../../styles/Queried.module.scss\";\r\n\r\nexport default function Queried({\r\n  results: { items, errors },\r\n  searchType,\r\n  queried,\r\n  asPath,\r\n  pathname,\r\n}): JSX.Element {\r\n  const [state, setState] = React.useState({ resultsType: \"Events\" });\r\n\r\n  console.log(queried);\r\n  console.log(asPath);\r\n  console.log(pathname);\r\n\r\n  console.log(items);\r\n\r\n  const determineItems: () => JSX.Element | null = () => {\r\n    if (!items) return null;\r\n    switch (searchType) {\r\n      case \"ALL\":\r\n        if (Array.isArray(items.places) && Array.isArray(items.events)) {\r\n          return state.resultsType === \"Places\"\r\n            ? items.places.map((item) => (\r\n                <ResultCard key={item.id} item={item}></ResultCard>\r\n              ))\r\n            : items.events.map((item) => (\r\n                <ResultCard key={item.id} item={item}></ResultCard>\r\n              ));\r\n        } else {\r\n          return null;\r\n        }\r\n\r\n      case \"PLACES\":\r\n        return Array.isArray(items.places)\r\n          ? items.places.map((item) => (\r\n              <ResultCard key={item.id} item={item}></ResultCard>\r\n            ))\r\n          : null;\r\n      case \"EVENTS\":\r\n        return Array.isArray(items.events)\r\n          ? items.events.map((item) => (\r\n              <ResultCard key={item.id} item={item}></ResultCard>\r\n            ))\r\n          : null;\r\n      default:\r\n        if (Array.isArray(items.places) && Array.isArray(items.events)) {\r\n          return state.resultsType === \"Places\"\r\n            ? items.places.map((item) => (\r\n                <ResultCard key={item.id} item={item}></ResultCard>\r\n              ))\r\n            : items.events.map((item) => (\r\n                <ResultCard key={item.id} item={item}></ResultCard>\r\n              ));\r\n        } else {\r\n          return null;\r\n        }\r\n    }\r\n  };\r\n\r\n  // React.useEffect(() => {\r\n  //   if (searchType) {\r\n  //     switch (searchType) {\r\n  //       case \"ALL\":\r\n  //         return setState({ resultsType: \"Places\" });\r\n  //       case \"EVENTS\":\r\n  //         return setState({ resultsType: \"Events\" });\r\n  //     }\r\n  //   }\r\n  // });\r\n\r\n  const setTypeButtons: () => JSX.Element = () => {\r\n    if (searchType) {\r\n      switch (searchType) {\r\n        case \"ALL\":\r\n          return (\r\n            <React.Fragment>\r\n              <button\r\n                className={css.typeButton}\r\n                onClick={() => setState({ resultsType: \"Places\" })}\r\n              >\r\n                Places\r\n              </button>\r\n              <button\r\n                className={css.typeButton}\r\n                onClick={() => setState({ resultsType: \"Events\" })}\r\n              >\r\n                Events\r\n              </button>\r\n            </React.Fragment>\r\n          );\r\n        case \"PLACES\":\r\n          return (\r\n            <button\r\n              className={css.typeButton}\r\n              onClick={() => setState({ resultsType: \"Places\" })}\r\n            >\r\n              Places\r\n            </button>\r\n          );\r\n\r\n        case \"EVENTS\":\r\n          return (\r\n            <button\r\n              className={css.typeButton}\r\n              onClick={() => setState({ resultsType: \"Events\" })}\r\n            >\r\n              Events\r\n            </button>\r\n          );\r\n        default:\r\n          return (\r\n            <React.Fragment>\r\n              <button\r\n                className={css.typeButton}\r\n                onClick={() => setState({ resultsType: \"Places\" })}\r\n              >\r\n                Places\r\n              </button>\r\n              <button\r\n                className={css.typeButton}\r\n                onClick={() => setState({ resultsType: \"Events\" })}\r\n              >\r\n                Events\r\n              </button>\r\n            </React.Fragment>\r\n          );\r\n      }\r\n    } else {\r\n      return (\r\n        <React.Fragment>\r\n          <button\r\n            className={css.typeButton}\r\n            onClick={() => setState({ resultsType: \"Places\" })}\r\n          >\r\n            Places\r\n          </button>\r\n          <button\r\n            className={css.typeButton}\r\n            onClick={() => setState({ resultsType: \"Events\" })}\r\n          >\r\n            Events\r\n          </button>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <main className={css.queriedPage}>\r\n        <section className={css.queryDisplay}></section>\r\n        <section className={css.header}>\r\n          {setTypeButtons()}\r\n          <button className={css.sort}>Sort</button>\r\n        </section>\r\n        <section className={css.results}>\r\n          <div className={css.resultsSlider}>{determineItems()}</div>\r\n        </section>\r\n      </main>\r\n    </Layout>\r\n  );\r\n}\r\n\r\ntype Results = {\r\n  items: { places: { [key: string]: any }[]; events: { [key: string]: any }[] };\r\n  errors: { yelpPlaces: string; yelpEvents: string; ticketmaster: string };\r\n};\r\n\r\ntype APIResponse = Promise<{ [key: string]: any }[] | string>;\r\n\r\ntype SearchParams = { [key: string]: any };\r\n\r\nQueried.getInitialProps = async ({\r\n  query,\r\n  pathname,\r\n  asPath,\r\n}): Promise<{\r\n  results: any;\r\n  searchType: string;\r\n  pathname: string;\r\n  queried: string;\r\n  asPath: string;\r\n}> => {\r\n  const {\r\n    location,\r\n    radius,\r\n    placeType,\r\n    startFormatted,\r\n    endFormatted,\r\n    unixStartDate,\r\n    unixEndDate,\r\n    eventsCategory,\r\n    queried,\r\n  } = query;\r\n  console.log(pathname);\r\n  console.log(queried);\r\n  console.log(asPath);\r\n  if (query.queried) {\r\n    const checkURLIsString: string = query.queried.toString();\r\n    const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n    const searchParamsValues: SearchParams = {};\r\n\r\n    paramValueArray.forEach((param) => {\r\n      const indexOfEqual: number = param.search(\"=\");\r\n      if (indexOfEqual === -1) return;\r\n      else {\r\n        const paramKey: string = param.substring(0, indexOfEqual);\r\n        const paramValue: string = param.substring(indexOfEqual + 1);\r\n        searchParamsValues[paramKey] = paramValue;\r\n      }\r\n    });\r\n\r\n    class APICalls {\r\n      searchParams: SearchParams;\r\n      results: Results;\r\n      constructor(searchParams: SearchParams) {\r\n        this.searchParams = searchParams;\r\n        this.results = {\r\n          items: { places: [], events: [] },\r\n          errors: { yelpPlaces: \"\", yelpEvents: \"\", ticketmaster: \"\" },\r\n        };\r\n      }\r\n\r\n      public async yelpBusinesses() {\r\n        const yelpBusinessesResponse: APIResponse = await yelpBusinessesCall(\r\n          this.searchParams\r\n        );\r\n        Array.isArray(yelpBusinessesResponse)\r\n          ? (this.results.items.places = yelpBusinessesResponse)\r\n          : (this.results.errors.yelpPlaces = `${yelpBusinessesResponse}`);\r\n      }\r\n      public async yelpEvents() {\r\n        const yelpEventsResponse: APIResponse = await yelpEventsCall(\r\n          this.searchParams\r\n        );\r\n        Array.isArray(yelpEventsResponse)\r\n          ? (this.results.items.events = [\r\n              ...this.results.items.events,\r\n              ...yelpEventsResponse,\r\n            ])\r\n          : (this.results.errors.yelpEvents = `${yelpEventsResponse}`);\r\n      }\r\n      public async ticketMaster() {\r\n        const ticketMasterResponse: APIResponse = await ticketMasterCall(\r\n          this.searchParams\r\n        );\r\n        Array.isArray(ticketMasterResponse)\r\n          ? (this.results.items.events = [\r\n              ...this.results.items.events,\r\n              ...ticketMasterResponse,\r\n            ])\r\n          : (this.results.errors.ticketmaster = `${ticketMasterResponse}`);\r\n      }\r\n    }\r\n\r\n    const callAPIS: (searchType: string) => Promise<Results> = async (\r\n      searchType\r\n    ) => {\r\n      const APICall = new APICalls(searchParamsValues);\r\n\r\n      try {\r\n        switch (searchType) {\r\n          case \"PLACES\":\r\n            APICall.yelpBusinesses();\r\n\r\n            return APICall.results;\r\n\r\n          case \"EVENTS\":\r\n            APICall.yelpEvents();\r\n            APICall.ticketMaster();\r\n            return APICall.results;\r\n          case \"ALL\":\r\n            APICall.yelpBusinesses();\r\n            APICall.yelpEvents();\r\n            APICall.ticketMaster();\r\n            return APICall.results;\r\n          default:\r\n            APICall.yelpBusinesses();\r\n            APICall.yelpEvents();\r\n            APICall.ticketMaster();\r\n            return APICall.results;\r\n        }\r\n      } catch {\r\n        APICall.results.errors.yelpPlaces = \"CALL ERROR\";\r\n        APICall.results.errors.yelpEvents = \"CALL ERROR\";\r\n        APICall.results.errors.ticketmaster = \"CALL ERROR\";\r\n        return APICall.results;\r\n      }\r\n    };\r\n\r\n    const results: Results = await callAPIS(searchParamsValues.searchType);\r\n\r\n    return {\r\n      results,\r\n      searchType: searchParamsValues.searchType,\r\n      pathname,\r\n      queried,\r\n      asPath,\r\n    };\r\n  } else {\r\n    return { results: {}, searchType: \"ALL\", pathname, queried, asPath };\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}