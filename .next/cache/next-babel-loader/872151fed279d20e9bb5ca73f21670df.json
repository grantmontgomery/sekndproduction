{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { Layout, ResultCard } from \"../../components\";\nimport useAPICalls from \"../../swr/useAPICalls\";\nimport { useRouter } from \"next/router\";\nimport css from \"../../styles/Queried.module.scss\";\nexport default function Queried() {\n  const [state, setState] = React.useState({\n    resultsType: \"place\"\n  });\n  const router = useRouter();\n  const urlStart = true ? \"http://localhost:3000\" : \"https://sekndapp.com\";\n\n  const setSearchParameters = () => {\n    const {\n      query\n    } = router;\n    if (!query.queried) return null;\n    if (query.searchType) return query;\n    const checkURLIsString = query.queried.toString();\n    const paramValueArray = checkURLIsString.split(\"+\");\n    const SearchParams = {};\n    paramValueArray.forEach(param => {\n      const indexOfEqual = param.search(\"=\");\n      if (indexOfEqual === -1) return;else {\n        const paramKey = param.substring(0, indexOfEqual);\n        const paramValue = param.substring(indexOfEqual + 1);\n        SearchParams[paramKey] = paramValue;\n      }\n    });\n    return SearchParams;\n  };\n\n  const {\n    items,\n    loading,\n    errors\n  } = useAPICalls(setSearchParameters(), urlStart);\n  React.useEffect(() => {\n    console.log(\"setting result type\");\n\n    if (setSearchParameters()) {\n      setSearchParameters().searchType === \"EVENTS\" ? setState({\n        resultsType: \"event\"\n      }) : null;\n    }\n  }, [setSearchParameters()]);\n\n  const setResultsButtons = () => {\n    if (loading) return null;\n    return setSearchParameters() && setSearchParameters().searchType === \"ALL\" ? __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }\n    }, __jsx(\"button\", {\n      className: css.typeButton,\n      onClick: () => setState({\n        resultsType: \"place\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }, \"Places\"), __jsx(\"button\", {\n      className: css.typeButton,\n      onClick: () => setState({\n        resultsType: \"event\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, \"Events\")) : null;\n  };\n\n  const loadingDisplayItems = () => {\n    if (loading) {\n      return __jsx(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 9\n        }\n      }, __jsx(ResultCard, {\n        resultsLoading: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }\n      }), __jsx(ResultCard, {\n        resultsLoading: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }\n      }), __jsx(ResultCard, {\n        resultsLoading: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }\n      }));\n    } else {\n      return items && items.length > 0 ? items.filter(item => {\n        if (setSearchParameters().searchType !== \"ALL\") return item;\n        return state.resultsType === \"place\" ? item.type === \"place\" : item.type === \"event\";\n      }).map(item => __jsx(ResultCard, {\n        item: item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 28\n        }\n      })) : null;\n    }\n  };\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, __jsx(\"main\", {\n    className: css.queriedPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, __jsx(\"section\", {\n    className: css.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, setResultsButtons(), __jsx(\"button\", {\n    className: css.sort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, \"Sort\")), __jsx(\"div\", {\n    className: css.resultsSlider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, loadingDisplayItems())));\n}","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","Layout","ResultCard","useAPICalls","useRouter","css","Queried","state","setState","useState","resultsType","router","urlStart","setSearchParameters","query","queried","searchType","checkURLIsString","toString","paramValueArray","split","SearchParams","forEach","param","indexOfEqual","search","paramKey","substring","paramValue","items","loading","errors","useEffect","console","log","setResultsButtons","typeButton","loadingDisplayItems","length","filter","item","type","map","queriedPage","header","sort","resultsSlider"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { Layout, ResultCard, SekndLoader } from \"../../components\";\r\nimport useAPICalls from \"../../swr/useAPICalls\";\r\nimport { NextRouter, useRouter } from \"next/router\";\r\nimport { useSquaresState } from \"../../state/GridSquaresContext\";\r\nimport { useGridState } from \"../../state/SearchGridContext\";\r\nimport css from \"../../styles/Queried.module.scss\";\r\n\r\ntype Results = {\r\n  items: { [key: string]: any }[];\r\n  errors: {\r\n    yelpPlacesError?: string | undefined;\r\n    yelpEventsError?: string | undefined;\r\n    ticketmasterError?: string | undefined;\r\n  };\r\n};\r\n\r\ntype APIResponse = { [key: string]: any }[];\r\n\r\ntype SearchParams = { [key: string]: any };\r\n\r\nexport default function Queried(): JSX.Element {\r\n  const [state, setState] = React.useState<{ resultsType: string }>({\r\n    resultsType: \"place\",\r\n  });\r\n  const router: NextRouter = useRouter();\r\n\r\n  const urlStart: string =\r\n    process.env.NODE_ENV !== \"production\"\r\n      ? \"http://localhost:3000\"\r\n      : \"https://sekndapp.com\";\r\n\r\n  const setSearchParameters: () => { [key: string]: any } | null = () => {\r\n    const { query } = router;\r\n    if (!query.queried) return null;\r\n    if (query.searchType) return query;\r\n\r\n    const checkURLIsString: string = query.queried.toString();\r\n    const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n    const SearchParams: SearchParams = {};\r\n\r\n    paramValueArray.forEach((param) => {\r\n      const indexOfEqual: number = param.search(\"=\");\r\n      if (indexOfEqual === -1) return;\r\n      else {\r\n        const paramKey: string = param.substring(0, indexOfEqual);\r\n        const paramValue: string = param.substring(indexOfEqual + 1);\r\n        SearchParams[paramKey] = paramValue;\r\n      }\r\n    });\r\n    return SearchParams;\r\n  };\r\n\r\n  const { items, loading, errors } = useAPICalls(\r\n    setSearchParameters(),\r\n    urlStart\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    console.log(\"setting result type\");\r\n    if (setSearchParameters()) {\r\n      setSearchParameters().searchType === \"EVENTS\"\r\n        ? setState({ resultsType: \"event\" })\r\n        : null;\r\n    }\r\n  }, [setSearchParameters()]);\r\n\r\n  const setResultsButtons: () => JSX.Element | null = () => {\r\n    if (loading) return null;\r\n    return setSearchParameters() &&\r\n      setSearchParameters().searchType === \"ALL\" ? (\r\n      <React.Fragment>\r\n        <button\r\n          className={css.typeButton}\r\n          onClick={() => setState({ resultsType: \"place\" })}\r\n        >\r\n          Places\r\n        </button>\r\n        <button\r\n          className={css.typeButton}\r\n          onClick={() => setState({ resultsType: \"event\" })}\r\n        >\r\n          Events\r\n        </button>\r\n      </React.Fragment>\r\n    ) : null;\r\n  };\r\n\r\n  const loadingDisplayItems: () => JSX.Element | JSX.Element[] = () => {\r\n    if (loading) {\r\n      return (\r\n        <React.Fragment>\r\n          <ResultCard resultsLoading={true}></ResultCard>\r\n          <ResultCard resultsLoading={true}></ResultCard>\r\n          <ResultCard resultsLoading={true}></ResultCard>\r\n        </React.Fragment>\r\n      );\r\n    } else {\r\n      return items && items.length > 0\r\n        ? items\r\n            .filter((item) => {\r\n              if (setSearchParameters().searchType !== \"ALL\") return item;\r\n              return state.resultsType === \"place\"\r\n                ? item.type === \"place\"\r\n                : item.type === \"event\";\r\n            })\r\n            .map((item) => <ResultCard item={item}></ResultCard>)\r\n        : null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <main className={css.queriedPage}>\r\n        {/* <section className={css.queryDisplay}></section> */}\r\n        <section className={css.header}>\r\n          {setResultsButtons()}\r\n          <button className={css.sort}>Sort</button>\r\n        </section>\r\n\r\n        <div className={css.resultsSlider}>{loadingDisplayItems()}</div>\r\n      </main>\r\n    </Layout>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}