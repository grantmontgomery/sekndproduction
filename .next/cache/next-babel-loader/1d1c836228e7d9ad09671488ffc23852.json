{"ast":null,"code":"export const yelpBusinessesCall = async ({\n  location,\n  radius,\n  placeType\n}) => {\n  try {\n    const response = await fetch(\"localhost:3000/api/yelpBusinessesAPI\", {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"POST\",\n      body: JSON.stringify({\n        location,\n        radius: parseInt(radius),\n        term: placeType\n      })\n    });\n    const responseJson = await response.json();\n    const {\n      businesses\n    } = responseJson;\n    businesses.forEach(business => (business[\"type\"] = \"place\", business[\"source\"] = \"yelp\", business[\"inParts\"] = false));\n    return businesses;\n  } catch (err) {\n    return err.message;\n  }\n};","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/apicalls/yelpBusinessesCall.ts"],"names":["yelpBusinessesCall","location","radius","placeType","response","fetch","headers","Accept","method","body","JSON","stringify","parseInt","term","responseJson","json","businesses","forEach","business","err","message"],"mappings":"AAEA,OAAO,MAAMA,kBAIa,GAAG,OAAO;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,MAAZ;AAAoBC,EAAAA;AAApB,CAAP,KAA2C;AACtE,MAAI;AACF,UAAMC,QAAkB,GAAG,MAAMC,KAAK,CACpC,sCADoC,EAEpC;AACEC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,kBADD;AAEP,wBAAgB;AAFT,OADX;AAKEC,MAAAA,MAAM,EAAE,MALV;AAMEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBV,QAAAA,QADmB;AAEnBC,QAAAA,MAAM,EAAEU,QAAQ,CAACV,MAAD,CAFG;AAGnBW,QAAAA,IAAI,EAAEV;AAHa,OAAf;AANR,KAFoC,CAAtC;AAeA,UAAMW,YAAY,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAA3B;AAEA,UAAM;AACJC,MAAAA;AADI,QAEwCF,YAF9C;AAGAE,IAAAA,UAAU,CAACC,OAAX,CACGC,QAAD,KACGA,QAAQ,CAAC,MAAD,CAAR,GAAmB,OAApB,EACCA,QAAQ,CAAC,QAAD,CAAR,GAAqB,MADtB,EAECA,QAAQ,CAAC,SAAD,CAAR,GAAsB,KAHzB,CADF;AAOA,WAAOF,UAAP;AACD,GA7BD,CA6BE,OAAOG,GAAP,EAAY;AACZ,WAAOA,GAAG,CAACC,OAAX;AACD;AACF,CArCM","sourcesContent":["type Params = { [key: string]: string };\r\n\r\nexport const yelpBusinessesCall: ({\r\n  location,\r\n  radius,\r\n  placeType,\r\n}: Params) => Promise<any> = async ({ location, radius, placeType }) => {\r\n  try {\r\n    const response: Response = await fetch(\r\n      \"localhost:3000/api/yelpBusinessesAPI\",\r\n      {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n          location,\r\n          radius: parseInt(radius),\r\n          term: placeType,\r\n        }),\r\n      }\r\n    );\r\n    const responseJson = await response.json();\r\n\r\n    const {\r\n      businesses,\r\n    }: { businesses: { [key: string]: any }[] } = responseJson;\r\n    businesses.forEach(\r\n      (business) => (\r\n        (business[\"type\"] = \"place\"),\r\n        (business[\"source\"] = \"yelp\"),\r\n        (business[\"inParts\"] = false)\r\n      )\r\n    );\r\n    return businesses;\r\n  } catch (err) {\r\n    return err.message;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}