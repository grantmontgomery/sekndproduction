{"ast":null,"code":"// export default (req: NextApiRequest, res: NextApiResponse) => {\n//   if (req.method !== \"GET\") {\n//     //url setup\n//     const yelpBusinesses: URL = new URL(\n//         \"https://api.yelp.com/v3/businesses/search\"\n//       ),\n//       params: Params = {\n//         location: req.body.location,\n//         radius: req.body.radius,\n//         term: req.body.term,\n//       };\n//     Object.keys(params).forEach((key) =>\n//       yelpBusinesses.searchParams.append(key, params[key])\n//     );\n//     const yelpUrlString: string = yelpBusinesses.toString();\n//     //function\n//     const yelpdataFetch: (urlString: string) => Promise<any> = async (\n//       urlString\n//     ) => {\n//       try {\n//         const yelpResponse: Response = await fetch(urlString, {\n//           headers: {\n//             Authorization: `Bearer ${process.env.YELP_API_KEY}`,\n//           },\n//         });\n//         const jsonResponse: JSON = await yelpResponse.json();\n//         return jsonResponse;\n//       } catch (err) {\n//         return err;\n//       }\n//     };\n//     return yelpdataFetch(yelpUrlString)\n//       .then((data) => res.end(data.stringify()))\n//       .catch((err) => res.send(err));\n//   }\n//   return res.send(200);\n// };\nexport default (async (req, res) => {\n  try {\n    if (req.method !== \"GET\") {\n      //url setup\n      const yelpBusinesses = new URL(\"https://api.yelp.com/v3/businesses/search\"),\n            params = {\n        location: req.body.location,\n        radius: req.body.radius,\n        term: req.body.term\n      };\n      Object.keys(params).forEach(key => yelpBusinesses.searchParams.append(key, params[key]));\n      const yelpUrlString = yelpBusinesses.toString(); //function\n\n      const yelpdataFetch = async (urlString) => {\n        try {\n          const yelpResponse = await fetch(urlString, {\n            headers: {\n              Authorization: `Bearer ${process.env.YELP_API_KEY}`\n            }\n          });\n          const jsonResponse = await yelpResponse.json();\n          return jsonResponse;\n        } catch (err) {\n          return err;\n        }\n      };\n\n      return yelpdataFetch(yelpUrlString).then(data => res.end(data.stringify())).catch(err => res.send(err));\n    }\n  } catch (err) {\n    res.send(err.message);\n  }\n});","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/api/yelpBusinessesAPI.ts"],"names":["req","res","method","yelpBusinesses","URL","params","location","body","radius","term","Object","keys","forEach","key","searchParams","append","yelpUrlString","toString","yelpdataFetch","urlString","yelpResponse","fetch","headers","Authorization","process","env","YELP_API_KEY","jsonResponse","json","err","then","data","end","stringify","catch","send","message"],"mappings":"AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,gBAAe,OAAOA,GAAP,EAA4BC,GAA5B,KAAqD;AAClE,MAAI;AACF,QAAID,GAAG,CAACE,MAAJ,KAAe,KAAnB,EAA0B;AACxB;AACA,YAAMC,cAAmB,GAAG,IAAIC,GAAJ,CACxB,2CADwB,CAA5B;AAAA,YAGEC,MAAc,GAAG;AACfC,QAAAA,QAAQ,EAAEN,GAAG,CAACO,IAAJ,CAASD,QADJ;AAEfE,QAAAA,MAAM,EAAER,GAAG,CAACO,IAAJ,CAASC,MAFF;AAGfC,QAAAA,IAAI,EAAET,GAAG,CAACO,IAAJ,CAASE;AAHA,OAHnB;AAQAC,MAAAA,MAAM,CAACC,IAAP,CAAYN,MAAZ,EAAoBO,OAApB,CAA6BC,GAAD,IAC1BV,cAAc,CAACW,YAAf,CAA4BC,MAA5B,CAAmCF,GAAnC,EAAwCR,MAAM,CAACQ,GAAD,CAA9C,CADF;AAIA,YAAMG,aAAqB,GAAGb,cAAc,CAACc,QAAf,EAA9B,CAdwB,CAgBxB;;AACA,YAAMC,aAAkD,GAAG,OACzDC,SADyD,KAEtD;AACH,YAAI;AACF,gBAAMC,YAAsB,GAAG,MAAMC,KAAK,CAACF,SAAD,EAAY;AACpDG,YAAAA,OAAO,EAAE;AACPC,cAAAA,aAAa,EAAG,UAASC,OAAO,CAACC,GAAR,CAAYC,YAAa;AAD3C;AAD2C,WAAZ,CAA1C;AAKA,gBAAMC,YAAkB,GAAG,MAAMP,YAAY,CAACQ,IAAb,EAAjC;AACA,iBAAOD,YAAP;AACD,SARD,CAQE,OAAOE,GAAP,EAAY;AACZ,iBAAOA,GAAP;AACD;AACF,OAdD;;AAgBA,aAAOX,aAAa,CAACF,aAAD,CAAb,CACJc,IADI,CACEC,IAAD,IAAU9B,GAAG,CAAC+B,GAAJ,CAAQD,IAAI,CAACE,SAAL,EAAR,CADX,EAEJC,KAFI,CAEGL,GAAD,IAAS5B,GAAG,CAACkC,IAAJ,CAASN,GAAT,CAFX,CAAP;AAGD;AACF,GAtCD,CAsCE,OAAOA,GAAP,EAAY;AACZ5B,IAAAA,GAAG,CAACkC,IAAJ,CAASN,GAAG,CAACO,OAAb;AACD;AACF,CA1CD","sourcesContent":["import { NextApiRequest, NextApiResponse } from \"next\";\r\n\r\ntype Params = {\r\n  location: string;\r\n  term: string;\r\n  radius: string;\r\n};\r\n\r\n// export default (req: NextApiRequest, res: NextApiResponse) => {\r\n//   if (req.method !== \"GET\") {\r\n//     //url setup\r\n//     const yelpBusinesses: URL = new URL(\r\n//         \"https://api.yelp.com/v3/businesses/search\"\r\n//       ),\r\n//       params: Params = {\r\n//         location: req.body.location,\r\n//         radius: req.body.radius,\r\n//         term: req.body.term,\r\n//       };\r\n//     Object.keys(params).forEach((key) =>\r\n//       yelpBusinesses.searchParams.append(key, params[key])\r\n//     );\r\n\r\n//     const yelpUrlString: string = yelpBusinesses.toString();\r\n\r\n//     //function\r\n//     const yelpdataFetch: (urlString: string) => Promise<any> = async (\r\n//       urlString\r\n//     ) => {\r\n//       try {\r\n//         const yelpResponse: Response = await fetch(urlString, {\r\n//           headers: {\r\n//             Authorization: `Bearer ${process.env.YELP_API_KEY}`,\r\n//           },\r\n//         });\r\n//         const jsonResponse: JSON = await yelpResponse.json();\r\n//         return jsonResponse;\r\n//       } catch (err) {\r\n//         return err;\r\n//       }\r\n//     };\r\n\r\n//     return yelpdataFetch(yelpUrlString)\r\n//       .then((data) => res.end(data.stringify()))\r\n//       .catch((err) => res.send(err));\r\n//   }\r\n//   return res.send(200);\r\n// };\r\n\r\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\r\n  try {\r\n    if (req.method !== \"GET\") {\r\n      //url setup\r\n      const yelpBusinesses: URL = new URL(\r\n          \"https://api.yelp.com/v3/businesses/search\"\r\n        ),\r\n        params: Params = {\r\n          location: req.body.location,\r\n          radius: req.body.radius,\r\n          term: req.body.term,\r\n        };\r\n      Object.keys(params).forEach((key) =>\r\n        yelpBusinesses.searchParams.append(key, params[key])\r\n      );\r\n\r\n      const yelpUrlString: string = yelpBusinesses.toString();\r\n\r\n      //function\r\n      const yelpdataFetch: (urlString: string) => Promise<any> = async (\r\n        urlString\r\n      ) => {\r\n        try {\r\n          const yelpResponse: Response = await fetch(urlString, {\r\n            headers: {\r\n              Authorization: `Bearer ${process.env.YELP_API_KEY}`,\r\n            },\r\n          });\r\n          const jsonResponse: JSON = await yelpResponse.json();\r\n          return jsonResponse;\r\n        } catch (err) {\r\n          return err;\r\n        }\r\n      };\r\n\r\n      return yelpdataFetch(yelpUrlString)\r\n        .then((data) => res.end(data.stringify()))\r\n        .catch((err) => res.send(err));\r\n    }\r\n  } catch (err) {\r\n    res.send(err.message);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}