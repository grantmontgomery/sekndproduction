{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from \"react\";\nimport { SearchSelector, WhereInput, WhenInput, EventsInput, PlacesInput } from \"./Parts\";\nimport Link from \"next/link\";\nimport css from \"./SearchBox.module.scss\";\nexport var SearchBox = function SearchBox(props) {\n  var _React$useState = React.useState({\n    searchType: \"ALL\",\n    eventsCategory: \"\",\n    radius: \"\",\n    location: \"\",\n    endDate: null,\n    startDate: null,\n    placeType: \"\",\n    startFormatted: \"\",\n    endFormatted: \"\",\n    unixStartDate: null,\n    unixEndDate: null,\n    ticketMasterCategories: \"\",\n    yelpCategories: \"\"\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      searchQuery = _React$useState2[0],\n      setSearchQuery = _React$useState2[1];\n\n  var checkFieldsDisplayLink = function checkFieldsDisplayLink(searchType) {\n    var location = searchQuery.location,\n        radius = searchQuery.radius,\n        placeType = searchQuery.placeType,\n        startFormatted = searchQuery.startFormatted,\n        endFormatted = searchQuery.endFormatted,\n        unixStartDate = searchQuery.unixStartDate,\n        unixEndDate = searchQuery.unixEndDate,\n        eventsCategory = searchQuery.eventsCategory;\n\n    switch (searchType) {\n      case \"ALL\":\n        return searchQuery.location !== \"\" && searchQuery.startDate !== null && searchQuery.radius !== \"\" && searchQuery.endDate !== null && searchQuery.placeType !== \"\" ? (console.log(\"All ready\"), __jsx(Link, {\n          href: {\n            pathname: \"/search/[queried]\",\n            query: {\n              searchType: searchType,\n              location: location,\n              radius: radius,\n              placeType: placeType,\n              startFormatted: startFormatted,\n              endFormatted: endFormatted,\n              unixEndDate: unixEndDate,\n              unixStartDate: unixStartDate,\n              eventsCategory: eventsCategory\n            }\n          },\n          as: \"/search/searchType=ALL+location=\".concat(searchQuery.location, \"+radius=\").concat(searchQuery.radius, \"+placeType=\").concat(searchQuery.placeType, \"+startFormatted=\").concat(searchQuery.startFormatted, \"+endFormatted=\").concat(searchQuery.endFormatted, \"+unixStartDate=\").concat(searchQuery.unixStartDate, \"+unixEndDate=\").concat(searchQuery.unixEndDate, \"+eventsCategory=\").concat(searchQuery.eventsCategory)\n        }, __jsx(\"button\", null, \"Search\"))) : __jsx(\"button\", {\n          onClick: function onClick() {\n            return alert(\"please fill out missing fields\");\n          }\n        }, \"Search\");\n\n      case \"PLACES\":\n        return searchQuery.location !== \"\" && searchQuery.startDate !== null && searchQuery.radius !== \"\" && searchQuery.endDate !== null && searchQuery.placeType !== \"\" ? (console.log(\"Places ready\"), __jsx(Link, {\n          href: {\n            pathname: \"/search/[queried]\",\n            query: {\n              searchType: searchType,\n              location: location,\n              radius: radius,\n              placeType: placeType,\n              startFormatted: startFormatted,\n              endFormatted: endFormatted\n            }\n          },\n          as: \"/search/searchType=PLACES+location=\".concat(searchQuery.location, \"+radius=\").concat(searchQuery.radius, \"+placeType=\").concat(searchQuery.placeType, \"+startFormatted=\").concat(searchQuery.startFormatted, \"+endFormatted=\").concat(searchQuery.endFormatted)\n        }, __jsx(\"button\", {\n          style: {\n            color: \"green\"\n          }\n        }, \"Search\"))) : __jsx(\"button\", {\n          onClick: function onClick() {\n            return alert(\"please fill out missing fields\");\n          }\n        }, \"Search\");\n\n      case \"EVENTS\":\n        return searchQuery.location !== \"\" && searchQuery.startDate !== null && searchQuery.radius !== \"\" && searchQuery.endDate !== null ? (console.log(\"events ready\"), __jsx(Link, {\n          href: {\n            pathname: \"/search/[queried]\",\n            query: {\n              searchType: searchType,\n              location: location,\n              radius: radius,\n              startFormatted: startFormatted,\n              endFormatted: endFormatted,\n              unixStartDate: unixStartDate,\n              unixEndDate: unixEndDate,\n              eventsCategory: eventsCategory\n            }\n          },\n          as: \"/search/searchType=EVENTS+location=\".concat(searchQuery.location, \"+radius=\").concat(searchQuery.radius, \"+startFormatted=\").concat(searchQuery.startFormatted, \"+endFormatted=\").concat(searchQuery.endFormatted, \"+unixStartDate=\").concat(searchQuery.unixStartDate, \"+unixEndDate=\").concat(searchQuery.unixEndDate, \"+eventsCategory=\").concat(searchQuery.eventsCategory)\n        }, __jsx(\"button\", {\n          style: {\n            color: \"green\"\n          }\n        }, \"Search\"))) : __jsx(\"button\", {\n          onClick: function onClick() {\n            return alert(\"please fill out missing fields\");\n          }\n        }, \"Search\");\n\n      default:\n        return searchQuery.location !== \"\" && searchQuery.startDate !== null && searchQuery.radius !== \"\" && searchQuery.endDate !== null && searchQuery.placeType !== \"\" ? __jsx(Link, {\n          href: {\n            pathname: \"/search/[queried]\",\n            query: {\n              searchType: searchType,\n              location: location,\n              radius: radius,\n              placeType: placeType,\n              startFormatted: startFormatted,\n              endFormatted: endFormatted,\n              unixEndDate: unixEndDate,\n              unixStartDate: unixStartDate,\n              eventsCategory: eventsCategory\n            }\n          },\n          as: \"/search/searchType=ALL+location=\".concat(searchQuery.location, \"+radius=\").concat(searchQuery.radius, \"+placeType=\").concat(searchQuery.placeType, \"+startFormatted=\").concat(searchQuery.startFormatted, \"+endFormatted=\").concat(searchQuery.endFormatted, \"+unixStartDate=\").concat(searchQuery.unixStartDate, \"+unixEndDate=\").concat(searchQuery.unixEndDate, \"+eventsCategory=\").concat(searchQuery.eventsCategory)\n        }, __jsx(\"button\", {\n          style: {\n            color: \"green\"\n          }\n        }, \"Search\")) : __jsx(\"button\", {\n          onClick: function onClick() {\n            return alert(\"please fill out missing fields\");\n          }\n        }, \"Search\");\n    }\n  };\n\n  var handleInputChange = function handleInputChange(key, input) {\n    return setSearchQuery(function (state) {\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, key, input));\n    });\n  };\n\n  var handleQueryDate = function handleQueryDate(key, date) {\n    if (key === \"startDate\") {\n      var unixStartDate = Math.round(new Date(date).getTime() / 1000);\n      var timeOffSet = date.getTimezoneOffset() * 60;\n      var localStartTimeISO = new Date((unixStartDate - timeOffSet) * 1000).toISOString();\n      var localStartTimeISOFormatted = \"\".concat(localStartTimeISO.substring(0, 19), \"Z\");\n      return setSearchQuery(function (state) {\n        var _objectSpread3;\n\n        return _objectSpread(_objectSpread({}, state), {}, (_objectSpread3 = {}, _defineProperty(_objectSpread3, key, date), _defineProperty(_objectSpread3, \"unixStartDate\", unixStartDate), _defineProperty(_objectSpread3, \"startFormatted\", localStartTimeISOFormatted), _objectSpread3));\n      });\n    } else {\n      var unixEndDate = Math.round(new Date(date).getTime() / 1000);\n\n      var _timeOffSet = date.getTimezoneOffset() * 60;\n\n      var localEndTimeISO = new Date((unixEndDate - _timeOffSet) * 1000).toISOString();\n      var localEndTimeISOFormatted = \"\".concat(localEndTimeISO.substring(0, 19), \"Z\");\n      return setSearchQuery(function (state) {\n        var _objectSpread4;\n\n        return _objectSpread(_objectSpread({}, state), {}, (_objectSpread4 = {}, _defineProperty(_objectSpread4, key, date), _defineProperty(_objectSpread4, \"unixEndDate\", unixEndDate), _defineProperty(_objectSpread4, \"endFormatted\", localEndTimeISOFormatted), _objectSpread4));\n      });\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: css.searchBox\n  }, __jsx(SearchSelector, {\n    searchType: searchQuery.searchType,\n    handleInputChange: handleInputChange\n  }), __jsx(WhereInput, {\n    handleInputChange: handleInputChange,\n    location: searchQuery.location,\n    radius: searchQuery.radius\n  }), __jsx(WhenInput, {\n    handleQueryDate: handleQueryDate,\n    startDate: searchQuery.startDate,\n    endDate: searchQuery.endDate\n  }), __jsx(EventsInput, {\n    handleInputChange: handleInputChange,\n    eventsCategory: searchQuery.eventsCategory\n  }), __jsx(PlacesInput, {\n    handleInputChange: handleInputChange,\n    placeType: searchQuery.placeType\n  }), checkFieldsDisplayLink(searchQuery.searchType));\n};","map":null,"metadata":{},"sourceType":"module"}