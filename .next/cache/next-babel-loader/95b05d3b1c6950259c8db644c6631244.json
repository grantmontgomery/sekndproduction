{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { Layout } from \"../../components\";\nimport { yelpBusinessesCall } from \"../../apicalls\";\nimport css from \"../../styles/Queried.module.scss\";\nexport default function Queried(props) {\n  if (props) {\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 7\n      }\n    }, __jsx(\"main\", {\n      className: css.queriedPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }\n    }, __jsx(\"section\", {\n      className: css.queryDisplay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 11\n      }\n    }), __jsx(\"section\", {\n      className: css.header,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 11\n      }\n    }), __jsx(\"section\", {\n      className: css.results,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      className: css.resultsSlider,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }\n    }))));\n  } else {\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }\n    }, __jsx(\"main\", {\n      className: css.queriedPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }\n    }, __jsx(\"section\", {\n      className: css.queryDisplay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }\n    }), __jsx(\"section\", {\n      className: css.header,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }\n    }), __jsx(\"section\", {\n      className: css.results,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      className: css.resultsSlider,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }\n    }))));\n  }\n}\n\nQueried.getInitialProps = async ({\n  query\n}) => {\n  if (query.queried) {\n    const checkURLIsString = query.queried.toString();\n    const paramValueArray = checkURLIsString.split(\"+\");\n    const searchParamsValues = {};\n    paramValueArray.forEach(param => {\n      const indexOfEqual = param.search(\"=\");\n      if (indexOfEqual === -1) return;else {\n        const paramKey = param.substring(0, indexOfEqual);\n        const paramValue = param.substring(indexOfEqual + 1);\n        searchParamsValues[paramKey] = paramValue;\n      }\n    });\n    const callResponse = await yelpBusinessesCall(searchParamsValues);\n    const jsonResponse = await callResponse.json();\n    return {\n      results: jsonResponse\n    };\n  } else {\n    return {\n      results: {}\n    };\n  }\n};","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","Layout","yelpBusinessesCall","css","Queried","props","queriedPage","queryDisplay","header","results","resultsSlider","getInitialProps","query","queried","checkURLIsString","toString","paramValueArray","split","searchParamsValues","forEach","param","indexOfEqual","search","paramKey","substring","paramValue","callResponse","jsonResponse","json"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAmC,kBAAnC;AACA,SACEC,kBADF,QAIO,gBAJP;AAKA,OAAOC,GAAP,MAAgB,kCAAhB;AAEA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACrC,MAAIA,KAAJ,EAAW;AACT,WACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,SAAS,EAAEF,GAAG,CAACG,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAS,MAAA,SAAS,EAAEH,GAAG,CAACI,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAS,MAAA,SAAS,EAAEJ,GAAG,CAACK,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE;AAAS,MAAA,SAAS,EAAEL,GAAG,CAACM,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAEN,GAAG,CAACO,aAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAHF,CADF,CADF;AAWD,GAZD,MAYO;AACL,WACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,SAAS,EAAEP,GAAG,CAACG,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAS,MAAA,SAAS,EAAEH,GAAG,CAACI,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAS,MAAA,SAAS,EAAEJ,GAAG,CAACK,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE;AAAS,MAAA,SAAS,EAAEL,GAAG,CAACM,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAEN,GAAG,CAACO,aAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAHF,CADF,CADF;AAWD;AACF;;AAEDN,OAAO,CAACO,eAAR,GAA0B,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAqB;AAC7C,MAAIA,KAAK,CAACC,OAAV,EAAmB;AACjB,UAAMC,gBAAwB,GAAGF,KAAK,CAACC,OAAN,CAAcE,QAAd,EAAjC;AACA,UAAMC,eAAyB,GAAGF,gBAAgB,CAACG,KAAjB,CAAuB,GAAvB,CAAlC;AAEA,UAAMC,kBAA6C,GAAG,EAAtD;AAEAF,IAAAA,eAAe,CAACG,OAAhB,CAAyBC,KAAD,IAAW;AACjC,YAAMC,YAAoB,GAAGD,KAAK,CAACE,MAAN,CAAa,GAAb,CAA7B;AACA,UAAID,YAAY,KAAK,CAAC,CAAtB,EAAyB,OAAzB,KACK;AACH,cAAME,QAAgB,GAAGH,KAAK,CAACI,SAAN,CAAgB,CAAhB,EAAmBH,YAAnB,CAAzB;AACA,cAAMI,UAAkB,GAAGL,KAAK,CAACI,SAAN,CAAgBH,YAAY,GAAG,CAA/B,CAA3B;AACAH,QAAAA,kBAAkB,CAACK,QAAD,CAAlB,GAA+BE,UAA/B;AACD;AACF,KARD;AAUA,UAAMC,YAAY,GAAG,MAAMxB,kBAAkB,CAACgB,kBAAD,CAA7C;AAEA,UAAMS,YAAY,GAAG,MAAMD,YAAY,CAACE,IAAb,EAA3B;AAEA,WAAO;AAAEnB,MAAAA,OAAO,EAAEkB;AAAX,KAAP;AACD,GArBD,MAqBO;AACL,WAAO;AAAElB,MAAAA,OAAO,EAAE;AAAX,KAAP;AACD;AACF,CAzBD","sourcesContent":["import * as React from \"react\";\r\nimport { Layout, ResultCard } from \"../../components\";\r\nimport {\r\n  yelpBusinessesCall,\r\n  yelpEventsCall,\r\n  ticketMasterCall,\r\n} from \"../../apicalls\";\r\nimport css from \"../../styles/Queried.module.scss\";\r\n\r\nexport default function Queried(props) {\r\n  if (props) {\r\n    return (\r\n      <Layout>\r\n        <main className={css.queriedPage}>\r\n          <section className={css.queryDisplay}></section>\r\n          <section className={css.header}></section>\r\n          <section className={css.results}>\r\n            <div className={css.resultsSlider}></div>\r\n          </section>\r\n        </main>\r\n      </Layout>\r\n    );\r\n  } else {\r\n    return (\r\n      <Layout>\r\n        <main className={css.queriedPage}>\r\n          <section className={css.queryDisplay}></section>\r\n          <section className={css.header}></section>\r\n          <section className={css.results}>\r\n            <div className={css.resultsSlider}></div>\r\n          </section>\r\n        </main>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nQueried.getInitialProps = async ({ query }) => {\r\n  if (query.queried) {\r\n    const checkURLIsString: string = query.queried.toString();\r\n    const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n    const searchParamsValues: { [key: string]: string } = {};\r\n\r\n    paramValueArray.forEach((param) => {\r\n      const indexOfEqual: number = param.search(\"=\");\r\n      if (indexOfEqual === -1) return;\r\n      else {\r\n        const paramKey: string = param.substring(0, indexOfEqual);\r\n        const paramValue: string = param.substring(indexOfEqual + 1);\r\n        searchParamsValues[paramKey] = paramValue;\r\n      }\r\n    });\r\n\r\n    const callResponse = await yelpBusinessesCall(searchParamsValues);\r\n\r\n    const jsonResponse = await callResponse.json();\r\n\r\n    return { results: jsonResponse };\r\n  } else {\r\n    return { results: {} };\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}