{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\components\\\\SearchBox\\\\SearchBox.tsx\",\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from \"react\";\nimport { SearchSelector, WhereInput, WhenInput, EventsInput, PlacesInput } from \"./Parts\";\nimport ScheduleGrid from \"./Logic/ScheduleGrid\";\nimport Link from \"next/link\";\nimport { useGridDispatch } from \"../../state/SearchGridContext\";\nimport { useSquaresDispatch } from \"../../state/GridSquaresContext\";\nimport css from \"./SearchBox.module.scss\";\nexport var SearchBox = function SearchBox(props) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  var _React$useState = React.useState({\n    searchType: \"ALL\",\n    eventsCategory: \"\",\n    radius: \"\",\n    location: \"\",\n    endDate: null,\n    startDate: null,\n    placeType: \"\",\n    startFormatted: \"\",\n    endFormatted: \"\",\n    unixStartDate: null,\n    unixEndDate: null,\n    ticketMasterCategories: \"\",\n    yelpCategories: \"\"\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      searchQuery = _React$useState2[0],\n      setSearchQuery = _React$useState2[1];\n\n  var handleSubmit = function handleSubmit() {\n    _s();\n\n    var newDatesInput = new ScheduleGrid(searchQuery.unixStartDate, searchQuery.unixEndDate);\n    newDatesInput.setGrid();\n    return useSquaresDispatch()({\n      type: \"ADD_SQUARES\",\n      payload: {\n        numberOfSquares: newDatesInput.numberofSquares\n      }\n    }), useGridDispatch()({\n      type: \"ADD_GRID_TEMPLATE\",\n      payload: {\n        hourStrings: newDatesInput.hourStrings,\n        gridTemplate: newDatesInput.templateAreas\n      }\n    });\n  };\n\n  _s(handleSubmit, \"4l9QrNoKAW34Fa7fHi5vE0meP5Q=\", false, function () {\n    return [useSquaresDispatch, useGridDispatch];\n  });\n\n  var checkFieldsDisplayLink = function checkFieldsDisplayLink(searchType) {\n    var location = searchQuery.location,\n        radius = searchQuery.radius,\n        placeType = searchQuery.placeType,\n        startFormatted = searchQuery.startFormatted,\n        endFormatted = searchQuery.endFormatted,\n        unixStartDate = searchQuery.unixStartDate,\n        unixEndDate = searchQuery.unixEndDate,\n        eventsCategory = searchQuery.eventsCategory;\n\n    switch (searchType) {\n      case \"ALL\":\n        return searchQuery.location !== \"\" && searchQuery.startDate !== null && searchQuery.radius !== \"\" && searchQuery.endDate !== null && searchQuery.placeType !== \"\" ? __jsx(Link, {\n          href: {\n            pathname: \"/search/[queried]\",\n            query: {\n              searchType: searchType,\n              location: location,\n              radius: radius,\n              placeType: placeType,\n              startFormatted: startFormatted,\n              endFormatted: endFormatted,\n              unixEndDate: unixEndDate,\n              unixStartDate: unixStartDate,\n              eventsCategory: eventsCategory\n            }\n          },\n          as: \"/search/searchType=ALL+location=\".concat(searchQuery.location, \"+radius=\").concat(searchQuery.radius, \"+placeType=\").concat(searchQuery.placeType, \"+startFormatted=\").concat(searchQuery.startFormatted, \"+endFormatted=\").concat(searchQuery.endFormatted, \"+unixStartDate=\").concat(searchQuery.unixStartDate, \"+unixEndDate=\").concat(searchQuery.unixEndDate, \"+eventsCategory=\").concat(searchQuery.eventsCategory),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 11\n          }\n        }, __jsx(\"button\", {\n          onClick: function onClick() {\n            return setGrid(searchQuery.unixStartDate, searchQuery.unixEndDate);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }\n        }, \"Search\")) : __jsx(\"button\", {\n          onClick: function onClick() {\n            return alert(\"please fill out missing fields\");\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 11\n          }\n        }, \"Search\");\n\n      case \"PLACES\":\n        return searchQuery.location !== \"\" && searchQuery.startDate !== null && searchQuery.radius !== \"\" && searchQuery.endDate !== null && searchQuery.placeType !== \"\" ? __jsx(Link, {\n          href: {\n            pathname: \"/search/[queried]\",\n            query: {\n              searchType: searchType,\n              location: location,\n              radius: radius,\n              placeType: placeType,\n              startFormatted: startFormatted,\n              endFormatted: endFormatted\n            }\n          },\n          as: \"/search/searchType=PLACES+location=\".concat(searchQuery.location, \"+radius=\").concat(searchQuery.radius, \"+placeType=\").concat(searchQuery.placeType, \"+startFormatted=\").concat(searchQuery.startFormatted, \"+endFormatted=\").concat(searchQuery.endFormatted),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 11\n          }\n        }, __jsx(\"button\", {\n          style: {\n            color: \"green\"\n          },\n          onClick: function onClick() {\n            return setGrid(searchQuery.unixStartDate, searchQuery.unixEndDate);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }\n        }, \"Search\")) : __jsx(\"button\", {\n          onClick: function onClick() {\n            return alert(\"please fill out missing fields\");\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 11\n          }\n        }, \"Search\");\n\n      case \"EVENTS\":\n        return searchQuery.location !== \"\" && searchQuery.startDate !== null && searchQuery.radius !== \"\" && searchQuery.endDate !== null ? __jsx(Link, {\n          href: {\n            pathname: \"/search/[queried]\",\n            query: {\n              searchType: searchType,\n              location: location,\n              radius: radius,\n              startFormatted: startFormatted,\n              endFormatted: endFormatted,\n              unixStartDate: unixStartDate,\n              unixEndDate: unixEndDate,\n              eventsCategory: eventsCategory\n            }\n          },\n          as: \"/search/searchType=EVENTS+location=\".concat(searchQuery.location, \"+radius=\").concat(searchQuery.radius, \"+startFormatted=\").concat(searchQuery.startFormatted, \"+endFormatted=\").concat(searchQuery.endFormatted, \"+unixStartDate=\").concat(searchQuery.unixStartDate, \"+unixEndDate=\").concat(searchQuery.unixEndDate, \"+eventsCategory=\").concat(searchQuery.eventsCategory),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 11\n          }\n        }, __jsx(\"button\", {\n          style: {\n            color: \"green\"\n          },\n          onClick: function onClick() {\n            return setGrid(searchQuery.unixStartDate, searchQuery.unixEndDate);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }\n        }, \"Search\")) : __jsx(\"button\", {\n          onClick: function onClick() {\n            return alert(\"please fill out missing fields\");\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 11\n          }\n        }, \"Search\");\n\n      default:\n        return searchQuery.location !== \"\" && searchQuery.startDate !== null && searchQuery.radius !== \"\" && searchQuery.endDate !== null && searchQuery.placeType !== \"\" ? __jsx(Link, {\n          href: {\n            pathname: \"/search/[queried]\",\n            query: {\n              searchType: searchType,\n              location: location,\n              radius: radius,\n              placeType: placeType,\n              startFormatted: startFormatted,\n              endFormatted: endFormatted,\n              unixEndDate: unixEndDate,\n              unixStartDate: unixStartDate,\n              eventsCategory: eventsCategory\n            }\n          },\n          as: \"/search/searchType=ALL+location=\".concat(searchQuery.location, \"+radius=\").concat(searchQuery.radius, \"+placeType=\").concat(searchQuery.placeType, \"+startFormatted=\").concat(searchQuery.startFormatted, \"+endFormatted=\").concat(searchQuery.endFormatted, \"+unixStartDate=\").concat(searchQuery.unixStartDate, \"+unixEndDate=\").concat(searchQuery.unixEndDate, \"+eventsCategory=\").concat(searchQuery.eventsCategory),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 11\n          }\n        }, __jsx(\"button\", {\n          style: {\n            color: \"green\"\n          },\n          onClick: function onClick() {\n            return setGrid(searchQuery.unixStartDate, searchQuery.unixEndDate);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 13\n          }\n        }, \"Search\")) : __jsx(\"button\", {\n          onClick: function onClick() {\n            return alert(\"please fill out missing fields\");\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 11\n          }\n        }, \"Search\");\n    }\n  };\n\n  var handleInputChange = function handleInputChange(key, input) {\n    return setSearchQuery(function (state) {\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, key, input));\n    });\n  };\n\n  var handleQueryDate = function handleQueryDate(key, date) {\n    if (key === \"startDate\") {\n      var unixStartDate = Math.round(new Date(date).getTime() / 1000);\n      var timeOffSet = date.getTimezoneOffset() * 60;\n      var localStartTimeISO = new Date((unixStartDate - timeOffSet) * 1000).toISOString();\n      var localStartTimeISOFormatted = \"\".concat(localStartTimeISO.substring(0, 19), \"Z\");\n      return setSearchQuery(function (state) {\n        var _objectSpread3;\n\n        return _objectSpread(_objectSpread({}, state), {}, (_objectSpread3 = {}, _defineProperty(_objectSpread3, key, date), _defineProperty(_objectSpread3, \"unixStartDate\", unixStartDate), _defineProperty(_objectSpread3, \"startFormatted\", localStartTimeISOFormatted), _objectSpread3));\n      });\n    } else {\n      var unixEndDate = Math.round(new Date(date).getTime() / 1000);\n\n      var _timeOffSet = date.getTimezoneOffset() * 60;\n\n      var localEndTimeISO = new Date((unixEndDate - _timeOffSet) * 1000).toISOString();\n      var localEndTimeISOFormatted = \"\".concat(localEndTimeISO.substring(0, 19), \"Z\");\n      return setSearchQuery(function (state) {\n        var _objectSpread4;\n\n        return _objectSpread(_objectSpread({}, state), {}, (_objectSpread4 = {}, _defineProperty(_objectSpread4, key, date), _defineProperty(_objectSpread4, \"unixEndDate\", unixEndDate), _defineProperty(_objectSpread4, \"endFormatted\", localEndTimeISOFormatted), _objectSpread4));\n      });\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: css.searchBox,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 5\n    }\n  }, __jsx(SearchSelector, {\n    searchType: searchQuery.searchType,\n    handleInputChange: handleInputChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }\n  }), __jsx(WhereInput, {\n    handleInputChange: handleInputChange,\n    location: searchQuery.location,\n    radius: searchQuery.radius,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }\n  }), __jsx(WhenInput, {\n    handleQueryDate: handleQueryDate,\n    startDate: searchQuery.startDate,\n    endDate: searchQuery.endDate,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }\n  }), __jsx(EventsInput, {\n    handleInputChange: handleInputChange,\n    eventsCategory: searchQuery.eventsCategory,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }\n  }), __jsx(PlacesInput, {\n    handleInputChange: handleInputChange,\n    placeType: searchQuery.placeType,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 7\n    }\n  }), checkFieldsDisplayLink(searchQuery.searchType));\n};\n\n_s2(SearchBox, \"PgZL3G9/In15VlyKsFgpZfue3os=\");\n\n_c = SearchBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBox\");","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/components/SearchBox/SearchBox.tsx"],"names":["React","SearchSelector","WhereInput","WhenInput","EventsInput","PlacesInput","ScheduleGrid","Link","useGridDispatch","useSquaresDispatch","css","SearchBox","props","useState","searchType","eventsCategory","radius","location","endDate","startDate","placeType","startFormatted","endFormatted","unixStartDate","unixEndDate","ticketMasterCategories","yelpCategories","searchQuery","setSearchQuery","handleSubmit","newDatesInput","setGrid","type","payload","numberOfSquares","numberofSquares","hourStrings","gridTemplate","templateAreas","checkFieldsDisplayLink","pathname","query","alert","color","handleInputChange","key","input","state","handleQueryDate","date","Math","round","Date","getTime","timeOffSet","getTimezoneOffset","localStartTimeISO","toISOString","localStartTimeISOFormatted","substring","localEndTimeISO","localEndTimeISOFormatted","searchBox"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n  SearchSelector,\r\n  WhereInput,\r\n  WhenInput,\r\n  EventsInput,\r\n  PlacesInput,\r\n} from \"./Parts\";\r\nimport ScheduleGrid from \"./Logic/ScheduleGrid\";\r\nimport Link from \"next/link\";\r\nimport { useGridDispatch } from \"../../state/SearchGridContext\";\r\nimport {\r\n  useSquaresDispatch,\r\n  useSquaresState,\r\n} from \"../../state/GridSquaresContext\";\r\nimport css from \"./SearchBox.module.scss\";\r\n\r\nexport type InputChange = (key: string, input: string | Date) => void;\r\n\r\nexport default interface InputProps {\r\n  handleInputChange: InputChange;\r\n  searchType: string;\r\n  placeType: string;\r\n  radius: string;\r\n  eventsCategory: string;\r\n  location: string;\r\n  startDate: Date;\r\n  endDate: Date;\r\n  handleQueryDate: (key: string, date: Date) => void;\r\n}\r\n\r\nexport interface SearchQuery {\r\n  searchType: string;\r\n  eventsCategory: string;\r\n  radius: string;\r\n  location: string;\r\n  placeType: string;\r\n  endDate: Date;\r\n  startDate: Date;\r\n  startFormatted: string;\r\n  endFormatted: string;\r\n  unixStartDate: number;\r\n  unixEndDate: number;\r\n  ticketMasterCategories: string;\r\n  yelpCategories: string;\r\n}\r\n\r\nexport const SearchBox: React.FC = (props) => {\r\n  const [searchQuery, setSearchQuery] = React.useState<SearchQuery>({\r\n    searchType: \"ALL\",\r\n    eventsCategory: \"\",\r\n    radius: \"\",\r\n    location: \"\",\r\n    endDate: null,\r\n    startDate: null,\r\n    placeType: \"\",\r\n    startFormatted: \"\",\r\n    endFormatted: \"\",\r\n    unixStartDate: null,\r\n    unixEndDate: null,\r\n    ticketMasterCategories: \"\",\r\n    yelpCategories: \"\",\r\n  });\r\n\r\n  const handleSubmit: () => void = () => {\r\n    const newDatesInput: ScheduleGrid = new ScheduleGrid(\r\n      searchQuery.unixStartDate,\r\n      searchQuery.unixEndDate\r\n    );\r\n    newDatesInput.setGrid();\r\n    return (\r\n      useSquaresDispatch()({\r\n        type: \"ADD_SQUARES\",\r\n        payload: { numberOfSquares: newDatesInput.numberofSquares },\r\n      }),\r\n      useGridDispatch()({\r\n        type: \"ADD_GRID_TEMPLATE\",\r\n        payload: {\r\n          hourStrings: newDatesInput.hourStrings,\r\n          gridTemplate: newDatesInput.templateAreas,\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const checkFieldsDisplayLink: (searchType: string) => JSX.Element = (\r\n    searchType\r\n  ) => {\r\n    const {\r\n      location,\r\n      radius,\r\n      placeType,\r\n      startFormatted,\r\n      endFormatted,\r\n      unixStartDate,\r\n      unixEndDate,\r\n      eventsCategory,\r\n    } = searchQuery;\r\n    switch (searchType) {\r\n      case \"ALL\":\r\n        return searchQuery.location !== \"\" &&\r\n          searchQuery.startDate !== null &&\r\n          searchQuery.radius !== \"\" &&\r\n          searchQuery.endDate !== null &&\r\n          searchQuery.placeType !== \"\" ? (\r\n          <Link\r\n            href={{\r\n              pathname: \"/search/[queried]\",\r\n              query: {\r\n                searchType,\r\n                location,\r\n                radius,\r\n                placeType,\r\n                startFormatted,\r\n                endFormatted,\r\n                unixEndDate,\r\n                unixStartDate,\r\n                eventsCategory,\r\n              },\r\n            }}\r\n            as={`/search/searchType=ALL+location=${searchQuery.location}+radius=${searchQuery.radius}+placeType=${searchQuery.placeType}+startFormatted=${searchQuery.startFormatted}+endFormatted=${searchQuery.endFormatted}+unixStartDate=${searchQuery.unixStartDate}+unixEndDate=${searchQuery.unixEndDate}+eventsCategory=${searchQuery.eventsCategory}`}\r\n          >\r\n            <button\r\n              onClick={() =>\r\n                setGrid(searchQuery.unixStartDate, searchQuery.unixEndDate)\r\n              }\r\n            >\r\n              Search\r\n            </button>\r\n          </Link>\r\n        ) : (\r\n          <button onClick={() => alert(\"please fill out missing fields\")}>\r\n            Search\r\n          </button>\r\n        );\r\n\r\n      case \"PLACES\":\r\n        return searchQuery.location !== \"\" &&\r\n          searchQuery.startDate !== null &&\r\n          searchQuery.radius !== \"\" &&\r\n          searchQuery.endDate !== null &&\r\n          searchQuery.placeType !== \"\" ? (\r\n          <Link\r\n            href={{\r\n              pathname: \"/search/[queried]\",\r\n              query: {\r\n                searchType,\r\n                location,\r\n                radius,\r\n                placeType,\r\n                startFormatted,\r\n                endFormatted,\r\n              },\r\n            }}\r\n            as={`/search/searchType=PLACES+location=${searchQuery.location}+radius=${searchQuery.radius}+placeType=${searchQuery.placeType}+startFormatted=${searchQuery.startFormatted}+endFormatted=${searchQuery.endFormatted}`}\r\n          >\r\n            <button\r\n              style={{ color: \"green\" }}\r\n              onClick={() =>\r\n                setGrid(searchQuery.unixStartDate, searchQuery.unixEndDate)\r\n              }\r\n            >\r\n              Search\r\n            </button>\r\n          </Link>\r\n        ) : (\r\n          <button onClick={() => alert(\"please fill out missing fields\")}>\r\n            Search\r\n          </button>\r\n        );\r\n\r\n      case \"EVENTS\":\r\n        return searchQuery.location !== \"\" &&\r\n          searchQuery.startDate !== null &&\r\n          searchQuery.radius !== \"\" &&\r\n          searchQuery.endDate !== null ? (\r\n          <Link\r\n            href={{\r\n              pathname: \"/search/[queried]\",\r\n              query: {\r\n                searchType,\r\n                location,\r\n                radius,\r\n                startFormatted,\r\n                endFormatted,\r\n                unixStartDate,\r\n                unixEndDate,\r\n                eventsCategory,\r\n              },\r\n            }}\r\n            as={`/search/searchType=EVENTS+location=${searchQuery.location}+radius=${searchQuery.radius}+startFormatted=${searchQuery.startFormatted}+endFormatted=${searchQuery.endFormatted}+unixStartDate=${searchQuery.unixStartDate}+unixEndDate=${searchQuery.unixEndDate}+eventsCategory=${searchQuery.eventsCategory}`}\r\n          >\r\n            <button\r\n              style={{ color: \"green\" }}\r\n              onClick={() =>\r\n                setGrid(searchQuery.unixStartDate, searchQuery.unixEndDate)\r\n              }\r\n            >\r\n              Search\r\n            </button>\r\n          </Link>\r\n        ) : (\r\n          <button onClick={() => alert(\"please fill out missing fields\")}>\r\n            Search\r\n          </button>\r\n        );\r\n\r\n      default:\r\n        return searchQuery.location !== \"\" &&\r\n          searchQuery.startDate !== null &&\r\n          searchQuery.radius !== \"\" &&\r\n          searchQuery.endDate !== null &&\r\n          searchQuery.placeType !== \"\" ? (\r\n          <Link\r\n            href={{\r\n              pathname: \"/search/[queried]\",\r\n              query: {\r\n                searchType,\r\n                location,\r\n                radius,\r\n                placeType,\r\n                startFormatted,\r\n                endFormatted,\r\n                unixEndDate,\r\n                unixStartDate,\r\n                eventsCategory,\r\n              },\r\n            }}\r\n            as={`/search/searchType=ALL+location=${searchQuery.location}+radius=${searchQuery.radius}+placeType=${searchQuery.placeType}+startFormatted=${searchQuery.startFormatted}+endFormatted=${searchQuery.endFormatted}+unixStartDate=${searchQuery.unixStartDate}+unixEndDate=${searchQuery.unixEndDate}+eventsCategory=${searchQuery.eventsCategory}`}\r\n          >\r\n            <button\r\n              style={{ color: \"green\" }}\r\n              onClick={() =>\r\n                setGrid(searchQuery.unixStartDate, searchQuery.unixEndDate)\r\n              }\r\n            >\r\n              Search\r\n            </button>\r\n          </Link>\r\n        ) : (\r\n          <button onClick={() => alert(\"please fill out missing fields\")}>\r\n            Search\r\n          </button>\r\n        );\r\n    }\r\n  };\r\n\r\n  const handleInputChange: InputChange = (key, input) => {\r\n    return setSearchQuery((state) => ({\r\n      ...state,\r\n      [key]: input,\r\n    }));\r\n  };\r\n\r\n  const handleQueryDate: (key: string, date: Date) => void = (key, date) => {\r\n    if (key === \"startDate\") {\r\n      const unixStartDate: number = Math.round(new Date(date).getTime() / 1000);\r\n      const timeOffSet: number = date.getTimezoneOffset() * 60;\r\n      const localStartTimeISO: string = new Date(\r\n        (unixStartDate - timeOffSet) * 1000\r\n      ).toISOString();\r\n      const localStartTimeISOFormatted: string = `${localStartTimeISO.substring(\r\n        0,\r\n        19\r\n      )}Z`;\r\n\r\n      return setSearchQuery((state) => ({\r\n        ...state,\r\n        [key]: date,\r\n        unixStartDate,\r\n        startFormatted: localStartTimeISOFormatted,\r\n      }));\r\n    } else {\r\n      const unixEndDate: number = Math.round(new Date(date).getTime() / 1000);\r\n      const timeOffSet: number = date.getTimezoneOffset() * 60;\r\n      const localEndTimeISO: string = new Date(\r\n        (unixEndDate - timeOffSet) * 1000\r\n      ).toISOString();\r\n      const localEndTimeISOFormatted: string = `${localEndTimeISO.substring(\r\n        0,\r\n        19\r\n      )}Z`;\r\n      return setSearchQuery((state) => ({\r\n        ...state,\r\n        [key]: date,\r\n        unixEndDate,\r\n        endFormatted: localEndTimeISOFormatted,\r\n      }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={css.searchBox}>\r\n      <SearchSelector\r\n        searchType={searchQuery.searchType}\r\n        handleInputChange={handleInputChange}\r\n      ></SearchSelector>\r\n      <WhereInput\r\n        handleInputChange={handleInputChange}\r\n        location={searchQuery.location}\r\n        radius={searchQuery.radius}\r\n      ></WhereInput>\r\n      <WhenInput\r\n        handleQueryDate={handleQueryDate}\r\n        startDate={searchQuery.startDate}\r\n        endDate={searchQuery.endDate}\r\n      ></WhenInput>\r\n      <EventsInput\r\n        handleInputChange={handleInputChange}\r\n        eventsCategory={searchQuery.eventsCategory}\r\n      ></EventsInput>\r\n      <PlacesInput\r\n        handleInputChange={handleInputChange}\r\n        placeType={searchQuery.placeType}\r\n      ></PlacesInput>\r\n      {/* <button\r\n        className={css.searchButton}\r\n        onClick={() => (\r\n          yelpEventsCall(searchQuery),\r\n          yelpBusinessesCall(searchQuery),\r\n          ticketmasterCall(searchQuery)\r\n        )}\r\n      >\r\n        Search\r\n      </button> */}\r\n      {/* <Link\r\n        href=\"/search/[queried]\"\r\n        as={`/search/location=${searchQuery.location}+radius=${searchQuery.radius}+placeType=${searchQuery.placeType}`}\r\n      >\r\n        <button>Search</button>\r\n      </Link> */}\r\n      {checkFieldsDisplayLink(searchQuery.searchType)}\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}