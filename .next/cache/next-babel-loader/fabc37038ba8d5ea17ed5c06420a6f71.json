{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { Layout } from \"../../components\";\nimport { yelpBusinessesCall, yelpEventsCall, ticketMasterCall } from \"../../apicalls\";\nimport css from \"../../styles/Queried.module.scss\";\nexport default function Queried(_ref) {\n  _s();\n\n  var _this = this;\n\n  var results = _ref.results,\n      searchType = _ref.searchType,\n      searchParamsValues = _ref.searchParamsValues;\n\n  var _React$useState = React.useState({\n    resultsType: \"\"\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  console.log(results);\n  console.log(searchParamsValues);\n  React.useEffect(function () {\n    if (searchType) {\n      switch (searchType) {\n        case \"ALL\":\n      }\n    }\n  });\n\n  var setTypeButtons = function setTypeButtons() {\n    if (searchType) {\n      switch (searchType) {\n        case \"ALL\":\n          return __jsx(React.Fragment, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 13\n            }\n          }, __jsx(\"button\", {\n            className: css.typeButton,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 15\n            }\n          }, \"Places\"), __jsx(\"button\", {\n            className: css.typeButton,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 15\n            }\n          }, \"Events\"));\n\n        case \"PLACES\":\n          return __jsx(\"button\", {\n            className: css.typeButton,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 18\n            }\n          }, \"Places\");\n\n        case \"EVENTS\":\n          return __jsx(\"button\", {\n            className: css.typeButton,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 18\n            }\n          }, \"Events\");\n\n        default:\n          return __jsx(React.Fragment, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 13\n            }\n          }, __jsx(\"button\", {\n            className: css.typeButton,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 15\n            }\n          }, \"Places\"), __jsx(\"button\", {\n            className: css.typeButton,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 15\n            }\n          }, \"Events\"));\n      }\n    } else {\n      return __jsx(React.Fragment, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }\n      }, __jsx(\"button\", {\n        className: css.typeButton,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }\n      }, \"Places\"), __jsx(\"button\", {\n        className: css.typeButton,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }\n      }, \"Events\"));\n    }\n  };\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, __jsx(\"main\", {\n    className: css.queriedPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, __jsx(\"section\", {\n    className: css.queryDisplay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }), __jsx(\"section\", {\n    className: css.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, setTypeButtons(), __jsx(\"button\", {\n    className: css.sort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, \"Sort\")), __jsx(\"section\", {\n    className: css.results,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: css.resultsSlider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }))));\n}\n\n_s(Queried, \"IMZgU6u6YjTbWlHz+JGfUpzN6o8=\");\n\n_c = Queried;\n\nQueried.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref2) {\n    var query, checkURLIsString, paramValueArray, searchParamsValues, APICalls, callAPIS;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            query = _ref2.query;\n\n            if (!query.queried) {\n              _context5.next = 11;\n              break;\n            }\n\n            checkURLIsString = query.queried.toString();\n            paramValueArray = checkURLIsString.split(\"+\");\n            searchParamsValues = {};\n            paramValueArray.forEach(function (param) {\n              var indexOfEqual = param.search(\"=\");\n              if (indexOfEqual === -1) return;else {\n                var paramKey = param.substring(0, indexOfEqual);\n                var paramValue = param.substring(indexOfEqual + 1);\n                searchParamsValues[paramKey] = paramValue;\n              }\n            });\n\n            APICalls = /*#__PURE__*/function () {\n              function APICalls(searchParams) {\n                _classCallCheck(this, APICalls);\n\n                _defineProperty(this, \"searchParams\", void 0);\n\n                _defineProperty(this, \"results\", void 0);\n\n                this.searchParams = searchParams;\n                this.results = {\n                  items: {\n                    places: [],\n                    events: []\n                  },\n                  errors: {\n                    yelpPlaces: \"\",\n                    yelpEvents: \"\",\n                    ticketmaster: \"\"\n                  }\n                };\n              }\n\n              _createClass(APICalls, [{\n                key: \"yelpBusinesses\",\n                value: function () {\n                  var _yelpBusinesses = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                    var yelpBusinessesResponse;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return yelpBusinessesCall(this.searchParams);\n\n                          case 2:\n                            yelpBusinessesResponse = _context.sent;\n                            Array.isArray(yelpBusinessesResponse) ? this.results.items.places = yelpBusinessesResponse : this.results.errors.yelpPlaces = \"\".concat(yelpBusinessesResponse);\n\n                          case 4:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, this);\n                  }));\n\n                  function yelpBusinesses() {\n                    return _yelpBusinesses.apply(this, arguments);\n                  }\n\n                  return yelpBusinesses;\n                }()\n              }, {\n                key: \"yelpEvents\",\n                value: function () {\n                  var _yelpEvents = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                    var yelpEventsResponse;\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _context2.next = 2;\n                            return yelpEventsCall(this.searchParams);\n\n                          case 2:\n                            yelpEventsResponse = _context2.sent;\n                            Array.isArray(yelpEventsResponse) ? this.results.items.events = [].concat(_toConsumableArray(this.results.items.events), _toConsumableArray(yelpEventsResponse)) : this.results.errors.yelpEvents = \"\".concat(yelpEventsResponse);\n\n                          case 4:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, this);\n                  }));\n\n                  function yelpEvents() {\n                    return _yelpEvents.apply(this, arguments);\n                  }\n\n                  return yelpEvents;\n                }()\n              }, {\n                key: \"ticketMaster\",\n                value: function () {\n                  var _ticketMaster = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                    var ticketMasterResponse;\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            _context3.next = 2;\n                            return ticketMasterCall(this.searchParams);\n\n                          case 2:\n                            ticketMasterResponse = _context3.sent;\n                            Array.isArray(ticketMasterResponse) ? this.results.items.events = [].concat(_toConsumableArray(this.results.items.events), _toConsumableArray(ticketMasterResponse)) : this.results.errors.ticketmaster = \"\".concat(ticketMasterResponse);\n\n                          case 4:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3, this);\n                  }));\n\n                  function ticketMaster() {\n                    return _ticketMaster.apply(this, arguments);\n                  }\n\n                  return ticketMaster;\n                }()\n              }]);\n\n              return APICalls;\n            }();\n\n            callAPIS = /*#__PURE__*/function () {\n              var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(searchType) {\n                var APICall;\n                return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                  while (1) {\n                    switch (_context4.prev = _context4.next) {\n                      case 0:\n                        APICall = new APICalls(searchParamsValues);\n                        _context4.prev = 1;\n                        _context4.t0 = searchType;\n                        _context4.next = _context4.t0 === \"PLACES\" ? 5 : _context4.t0 === \"EVENTS\" ? 7 : _context4.t0 === \"ALL\" ? 10 : 14;\n                        break;\n\n                      case 5:\n                        APICall.yelpBusinesses();\n                        return _context4.abrupt(\"return\", APICall.results);\n\n                      case 7:\n                        APICall.yelpEvents();\n                        APICall.ticketMaster();\n                        return _context4.abrupt(\"return\", APICall.results);\n\n                      case 10:\n                        APICall.yelpBusinesses();\n                        APICall.yelpEvents();\n                        APICall.ticketMaster();\n                        return _context4.abrupt(\"return\", APICall.results);\n\n                      case 14:\n                        APICall.yelpBusinesses();\n                        APICall.yelpEvents();\n                        APICall.ticketMaster();\n                        return _context4.abrupt(\"return\", APICall.results);\n\n                      case 18:\n                        _context4.next = 26;\n                        break;\n\n                      case 20:\n                        _context4.prev = 20;\n                        _context4.t1 = _context4[\"catch\"](1);\n                        APICall.results.errors.yelpPlaces = \"CALL ERROR\";\n                        APICall.results.errors.yelpEvents = \"CALL ERROR\";\n                        APICall.results.errors.ticketmaster = \"CALL ERROR\";\n                        return _context4.abrupt(\"return\", APICall.results);\n\n                      case 26:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }\n                }, _callee4, null, [[1, 20]]);\n              }));\n\n              return function callAPIS(_x2) {\n                return _ref4.apply(this, arguments);\n              };\n            }();\n\n            return _context5.abrupt(\"return\", {\n              results: callAPIS(searchParamsValues.searchType),\n              searchType: searchParamsValues.searchType,\n              searchParamsValues: searchParamsValues\n            });\n\n          case 11:\n            return _context5.abrupt(\"return\", {\n              results: {},\n              searchType: \"ALL\"\n            });\n\n          case 12:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar _c;\n\n$RefreshReg$(_c, \"Queried\");","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","Layout","yelpBusinessesCall","yelpEventsCall","ticketMasterCall","css","Queried","results","searchType","searchParamsValues","useState","resultsType","state","setState","console","log","useEffect","setTypeButtons","typeButton","queriedPage","queryDisplay","header","sort","resultsSlider","getInitialProps","query","queried","checkURLIsString","toString","paramValueArray","split","forEach","param","indexOfEqual","search","paramKey","substring","paramValue","APICalls","searchParams","items","places","events","errors","yelpPlaces","yelpEvents","ticketmaster","yelpBusinessesResponse","Array","isArray","yelpEventsResponse","ticketMasterResponse","callAPIS","APICall","yelpBusinesses","ticketMaster"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { Layout, ResultCard } from \"../../components\";\r\nimport {\r\n  yelpBusinessesCall,\r\n  yelpEventsCall,\r\n  ticketMasterCall,\r\n} from \"../../apicalls\";\r\nimport css from \"../../styles/Queried.module.scss\";\r\n\r\nexport default function Queried({\r\n  results,\r\n  searchType,\r\n  searchParamsValues,\r\n}): JSX.Element {\r\n  const [state, setState] = React.useState({ resultsType: \"\" });\r\n\r\n  console.log(results);\r\n\r\n  console.log(searchParamsValues);\r\n  React.useEffect(() => {\r\n    if (searchType) {\r\n      switch (searchType) {\r\n        case \"ALL\":\r\n      }\r\n    }\r\n  });\r\n\r\n  const setTypeButtons: () => JSX.Element = () => {\r\n    if (searchType) {\r\n      switch (searchType) {\r\n        case \"ALL\":\r\n          return (\r\n            <React.Fragment>\r\n              <button className={css.typeButton}>Places</button>\r\n              <button className={css.typeButton}>Events</button>\r\n            </React.Fragment>\r\n          );\r\n        case \"PLACES\":\r\n          return <button className={css.typeButton}>Places</button>;\r\n\r\n        case \"EVENTS\":\r\n          return <button className={css.typeButton}>Events</button>;\r\n        default:\r\n          return (\r\n            <React.Fragment>\r\n              <button className={css.typeButton}>Places</button>\r\n              <button className={css.typeButton}>Events</button>\r\n            </React.Fragment>\r\n          );\r\n      }\r\n    } else {\r\n      return (\r\n        <React.Fragment>\r\n          <button className={css.typeButton}>Places</button>\r\n          <button className={css.typeButton}>Events</button>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <main className={css.queriedPage}>\r\n        <section className={css.queryDisplay}></section>\r\n        <section className={css.header}>\r\n          {setTypeButtons()}\r\n          <button className={css.sort}>Sort</button>\r\n        </section>\r\n        <section className={css.results}>\r\n          <div className={css.resultsSlider}>\r\n            {/* {results && Array.isArray(results)\r\n              ? results.map((item) => {\r\n                  return <ResultCard key={item.id} item={item}></ResultCard>;\r\n                })\r\n              : null} */}\r\n          </div>\r\n        </section>\r\n      </main>\r\n    </Layout>\r\n  );\r\n}\r\n\r\ntype Results = {\r\n  items: { places: { [key: string]: any }[]; events: { [key: string]: any }[] };\r\n  errors: { yelpPlaces: string; yelpEvents: string; ticketmaster: string };\r\n};\r\n\r\ntype APIResponse = Promise<{ [key: string]: any }[] | string>;\r\n\r\ntype SearchParams = { [key: string]: any };\r\n\r\nQueried.getInitialProps = async ({\r\n  query,\r\n}): Promise<{ results: any; searchType: string }> => {\r\n  if (query.queried) {\r\n    const checkURLIsString: string = query.queried.toString();\r\n    const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n    const searchParamsValues: SearchParams = {};\r\n\r\n    paramValueArray.forEach((param) => {\r\n      const indexOfEqual: number = param.search(\"=\");\r\n      if (indexOfEqual === -1) return;\r\n      else {\r\n        const paramKey: string = param.substring(0, indexOfEqual);\r\n        const paramValue: string = param.substring(indexOfEqual + 1);\r\n        searchParamsValues[paramKey] = paramValue;\r\n      }\r\n    });\r\n\r\n    class APICalls {\r\n      searchParams: SearchParams;\r\n      results: Results;\r\n      constructor(searchParams: SearchParams) {\r\n        this.searchParams = searchParams;\r\n        this.results = {\r\n          items: { places: [], events: [] },\r\n          errors: { yelpPlaces: \"\", yelpEvents: \"\", ticketmaster: \"\" },\r\n        };\r\n      }\r\n\r\n      public async yelpBusinesses() {\r\n        const yelpBusinessesResponse: APIResponse = await yelpBusinessesCall(\r\n          this.searchParams\r\n        );\r\n        Array.isArray(yelpBusinessesResponse)\r\n          ? (this.results.items.places = yelpBusinessesResponse)\r\n          : (this.results.errors.yelpPlaces = `${yelpBusinessesResponse}`);\r\n      }\r\n      public async yelpEvents() {\r\n        const yelpEventsResponse: APIResponse = await yelpEventsCall(\r\n          this.searchParams\r\n        );\r\n        Array.isArray(yelpEventsResponse)\r\n          ? (this.results.items.events = [\r\n              ...this.results.items.events,\r\n              ...yelpEventsResponse,\r\n            ])\r\n          : (this.results.errors.yelpEvents = `${yelpEventsResponse}`);\r\n      }\r\n      public async ticketMaster() {\r\n        const ticketMasterResponse: APIResponse = await ticketMasterCall(\r\n          this.searchParams\r\n        );\r\n        Array.isArray(ticketMasterResponse)\r\n          ? (this.results.items.events = [\r\n              ...this.results.items.events,\r\n              ...ticketMasterResponse,\r\n            ])\r\n          : (this.results.errors.ticketmaster = `${ticketMasterResponse}`);\r\n      }\r\n    }\r\n\r\n    const callAPIS: (searchType: string) => Promise<Results> = async (\r\n      searchType\r\n    ) => {\r\n      const APICall = new APICalls(searchParamsValues);\r\n\r\n      try {\r\n        switch (searchType) {\r\n          case \"PLACES\":\r\n            APICall.yelpBusinesses();\r\n\r\n            return APICall.results;\r\n\r\n          case \"EVENTS\":\r\n            APICall.yelpEvents();\r\n            APICall.ticketMaster();\r\n            return APICall.results;\r\n          case \"ALL\":\r\n            APICall.yelpBusinesses();\r\n            APICall.yelpEvents();\r\n            APICall.ticketMaster();\r\n            return APICall.results;\r\n          default:\r\n            APICall.yelpBusinesses();\r\n            APICall.yelpEvents();\r\n            APICall.ticketMaster();\r\n            return APICall.results;\r\n        }\r\n      } catch {\r\n        APICall.results.errors.yelpPlaces = \"CALL ERROR\";\r\n        APICall.results.errors.yelpEvents = \"CALL ERROR\";\r\n        APICall.results.errors.ticketmaster = \"CALL ERROR\";\r\n        return APICall.results;\r\n      }\r\n    };\r\n\r\n    return {\r\n      results: callAPIS(searchParamsValues.searchType),\r\n      searchType: searchParamsValues.searchType,\r\n      searchParamsValues,\r\n    };\r\n  } else {\r\n    return { results: {}, searchType: \"ALL\" };\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}