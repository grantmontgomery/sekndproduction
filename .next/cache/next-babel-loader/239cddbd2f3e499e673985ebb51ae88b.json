{"ast":null,"code":"var __jsx = React.createElement;\nimport * as React from \"react\";\nimport { Layout, ResultCard } from \"../../components\";\nimport useAPICalls from \"../../swr/useAPICalls\";\nimport { useRouter } from \"next/router\";\nimport { useSquaresState } from \"../../state/GridSquaresContext\";\nimport { useGridState } from \"../../state/SearchGridContext\";\nimport css from \"../../styles/Queried.module.scss\";\nexport default function Queried() {\n  const [state, setState] = React.useState({\n    resultsType: \"place\"\n  });\n  const router = useRouter();\n  console.log(useGridState());\n  console.log(useSquaresState());\n  const urlStart = false ? \"http://localhost:3000\" : \"https://sekndapp.com\";\n\n  const setSearchParameters = () => {\n    const {\n      query\n    } = router;\n    if (!query.queried) return null;\n    if (query.searchType) return query;\n    const checkURLIsString = query.queried.toString();\n    const paramValueArray = checkURLIsString.split(\"+\");\n    const SearchParams = {};\n    paramValueArray.forEach(param => {\n      const indexOfEqual = param.search(\"=\");\n      if (indexOfEqual === -1) return;else {\n        const paramKey = param.substring(0, indexOfEqual);\n        const paramValue = param.substring(indexOfEqual + 1);\n        SearchParams[paramKey] = paramValue;\n      }\n    });\n    return SearchParams;\n  };\n\n  const {\n    items,\n    loading,\n    errors\n  } = useAPICalls(setSearchParameters(), urlStart);\n  React.useEffect(() => {\n    console.log(\"setting result type\");\n\n    if (setSearchParameters()) {\n      setSearchParameters().searchType === \"EVENTS\" ? setState({\n        resultsType: \"event\"\n      }) : null;\n    }\n  }, [setSearchParameters()]);\n\n  const setResultsButtons = () => {\n    if (loading) return null;\n    return setSearchParameters() && setSearchParameters().searchType === \"ALL\" ? __jsx(React.Fragment, null, __jsx(\"button\", {\n      className: css.typeButton,\n      onClick: () => setState({\n        resultsType: \"place\"\n      })\n    }, \"Places\"), __jsx(\"button\", {\n      className: css.typeButton,\n      onClick: () => setState({\n        resultsType: \"event\"\n      })\n    }, \"Events\")) : null;\n  };\n\n  const loadingDisplayItems = () => {\n    if (loading) {\n      return __jsx(React.Fragment, null, __jsx(ResultCard, {\n        resultsLoading: true\n      }), __jsx(ResultCard, {\n        resultsLoading: true\n      }), __jsx(ResultCard, {\n        resultsLoading: true\n      }));\n    } else {\n      return items && items.length > 0 ? items.filter(item => {\n        if (setSearchParameters().searchType !== \"ALL\") return item;\n        return state.resultsType === \"place\" ? item.type === \"place\" : item.type === \"event\";\n      }).map(item => __jsx(ResultCard, {\n        item: item\n      })) : null;\n    }\n  };\n\n  return __jsx(Layout, null, __jsx(\"main\", {\n    className: css.queriedPage\n  }, __jsx(\"section\", {\n    className: css.header\n  }, setResultsButtons(), __jsx(\"button\", {\n    className: css.sort\n  }, \"Sort\")), __jsx(\"div\", {\n    className: css.resultsSlider\n  }, loadingDisplayItems())));\n}","map":null,"metadata":{},"sourceType":"module"}