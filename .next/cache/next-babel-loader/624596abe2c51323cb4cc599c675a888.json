{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nclass ScheduleGrid {\n  constructor(unixStartDate, unixEndDate) {\n    _defineProperty(this, \"unixStartDate\", void 0);\n\n    _defineProperty(this, \"unixEndDate\", void 0);\n\n    _defineProperty(this, \"numberofSquares\", void 0);\n\n    _defineProperty(this, \"templateAreas\", void 0);\n\n    _defineProperty(this, \"startHour\", void 0);\n\n    _defineProperty(this, \"columnAmount\", void 0);\n\n    _defineProperty(this, \"endHour\", void 0);\n\n    this.unixStartDate = unixStartDate;\n    this.unixEndDate = unixEndDate;\n    this.startHour = \"\";\n    this.templateAreas = \"\";\n    this.columnAmount = 0;\n    this.endHour = \"\";\n    this.numberofSquares = 0;\n  }\n\n  setSquares() {\n    const timeDifference = this.unixEndDate - this.unixStartDate;\n    const hours = Math.floor(timeDifference / 3600);\n    const numColumns = hours * 2 + 4;\n    const numberOfSquares = numColumns * 5;\n    this.numberofSquares = numberOfSquares;\n    this.columnAmount = numColumns;\n  }\n\n  setHours() {\n    const startDate = new Date(this.unixStartDate * 1000);\n    const endDate = new Date(this.unixEndDate * 1000);\n    const startHour = startDate.getHours();\n    const endHour = endDate.getHours();\n    this.startHour = startHour.toString();\n    this.endHour = endHour.toString();\n  }\n\n  setGridTemplate() {\n    const square = \"square\";\n    const rowString = `\"${square.repeat(this.columnAmount)}\"`;\n    this.templateAreas = `${rowString.repeat(5)}`;\n  }\n\n  setGrid() {\n    this.setSquares();\n    this.setHours();\n    this.setGridTemplate();\n  }\n\n} // const dispatch = useGridDispatch();\n\n\nexport default function setSquares(unixStartDate, unixEndDate) {\n  const newDate = new ScheduleGrid(unixStartDate, unixEndDate);\n  newDate.setGrid();\n  console.log(newDate);\n}","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/components/SearchBox/Logic/setScheduleGrid.ts"],"names":["ScheduleGrid","constructor","unixStartDate","unixEndDate","startHour","templateAreas","columnAmount","endHour","numberofSquares","setSquares","timeDifference","hours","Math","floor","numColumns","numberOfSquares","setHours","startDate","Date","endDate","getHours","toString","setGridTemplate","square","rowString","repeat","setGrid","newDate","console","log"],"mappings":";;AAEA,MAAMA,YAAN,CAAmB;AASjBC,EAAAA,WAAW,CAACC,aAAD,EAAgBC,WAAhB,EAA6B;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACtC,SAAKD,aAAL,GAAqBA,aAArB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,YAAL,GAAoB,CAApB;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,eAAL,GAAuB,CAAvB;AACD;;AAEMC,EAAAA,UAAP,GAAoB;AAClB,UAAMC,cAAsB,GAAG,KAAKP,WAAL,GAAmB,KAAKD,aAAvD;AACA,UAAMS,KAAa,GAAGC,IAAI,CAACC,KAAL,CAAWH,cAAc,GAAG,IAA5B,CAAtB;AACA,UAAMI,UAAkB,GAAGH,KAAK,GAAG,CAAR,GAAY,CAAvC;AACA,UAAMI,eAAuB,GAAGD,UAAU,GAAG,CAA7C;AACA,SAAKN,eAAL,GAAuBO,eAAvB;AACA,SAAKT,YAAL,GAAoBQ,UAApB;AACD;;AAEME,EAAAA,QAAP,GAAkB;AAChB,UAAMC,SAAe,GAAG,IAAIC,IAAJ,CAAS,KAAKhB,aAAL,GAAqB,IAA9B,CAAxB;AACA,UAAMiB,OAAa,GAAG,IAAID,IAAJ,CAAS,KAAKf,WAAL,GAAmB,IAA5B,CAAtB;AAEA,UAAMC,SAAiB,GAAGa,SAAS,CAACG,QAAV,EAA1B;AACA,UAAMb,OAAe,GAAGY,OAAO,CAACC,QAAR,EAAxB;AAEA,SAAKhB,SAAL,GAAiBA,SAAS,CAACiB,QAAV,EAAjB;AACA,SAAKd,OAAL,GAAeA,OAAO,CAACc,QAAR,EAAf;AACD;;AAEMC,EAAAA,eAAP,GAAyB;AACvB,UAAMC,MAAc,GAAG,QAAvB;AACA,UAAMC,SAAiB,GAAI,IAAGD,MAAM,CAACE,MAAP,CAAc,KAAKnB,YAAnB,CAAiC,GAA/D;AACA,SAAKD,aAAL,GAAsB,GAAEmB,SAAS,CAACC,MAAV,CAAiB,CAAjB,CAAoB,EAA5C;AACD;;AAEMC,EAAAA,OAAP,GAAiB;AACf,SAAKjB,UAAL;AACA,SAAKO,QAAL;AACA,SAAKM,eAAL;AACD;;AAjDgB,C,CAoDnB;;;AAEA,eAAe,SAASb,UAAT,CACbP,aADa,EAEbC,WAFa,EAGP;AACN,QAAMwB,OAAO,GAAG,IAAI3B,YAAJ,CAAiBE,aAAjB,EAAgCC,WAAhC,CAAhB;AACAwB,EAAAA,OAAO,CAACD,OAAR;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACD","sourcesContent":["import { Dispatch } from \"react\";\r\n\r\nclass ScheduleGrid {\r\n  unixStartDate: number;\r\n  unixEndDate: number;\r\n  numberofSquares: number;\r\n  templateAreas: string;\r\n  startHour: string;\r\n  columnAmount: number;\r\n  endHour: string;\r\n\r\n  constructor(unixStartDate, unixEndDate) {\r\n    this.unixStartDate = unixStartDate;\r\n    this.unixEndDate = unixEndDate;\r\n    this.startHour = \"\";\r\n    this.templateAreas = \"\";\r\n    this.columnAmount = 0;\r\n    this.endHour = \"\";\r\n    this.numberofSquares = 0;\r\n  }\r\n\r\n  public setSquares() {\r\n    const timeDifference: number = this.unixEndDate - this.unixStartDate;\r\n    const hours: number = Math.floor(timeDifference / 3600);\r\n    const numColumns: number = hours * 2 + 4;\r\n    const numberOfSquares: number = numColumns * 5;\r\n    this.numberofSquares = numberOfSquares;\r\n    this.columnAmount = numColumns;\r\n  }\r\n\r\n  public setHours() {\r\n    const startDate: Date = new Date(this.unixStartDate * 1000);\r\n    const endDate: Date = new Date(this.unixEndDate * 1000);\r\n\r\n    const startHour: number = startDate.getHours();\r\n    const endHour: number = endDate.getHours();\r\n\r\n    this.startHour = startHour.toString();\r\n    this.endHour = endHour.toString();\r\n  }\r\n\r\n  public setGridTemplate() {\r\n    const square: string = \"square\";\r\n    const rowString: string = `\"${square.repeat(this.columnAmount)}\"`;\r\n    this.templateAreas = `${rowString.repeat(5)}`;\r\n  }\r\n\r\n  public setGrid() {\r\n    this.setSquares();\r\n    this.setHours();\r\n    this.setGridTemplate();\r\n  }\r\n}\r\n\r\n// const dispatch = useGridDispatch();\r\n\r\nexport default function setSquares(\r\n  unixStartDate: number,\r\n  unixEndDate: number\r\n): void {\r\n  const newDate = new ScheduleGrid(unixStartDate, unixEndDate);\r\n  newDate.setGrid();\r\n  console.log(newDate);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}