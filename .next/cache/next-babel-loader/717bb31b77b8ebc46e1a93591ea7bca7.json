{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nexport var ticketmasterCall = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var location, radius, startFormatted, endFormatted, eventsCategory, response, responseJson;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            location = _ref.location, radius = _ref.radius, startFormatted = _ref.startFormatted, endFormatted = _ref.endFormatted, eventsCategory = _ref.eventsCategory;\n            _context.prev = 1;\n            _context.next = 4;\n            return fetch(\"/api/ticketmasterAPI\", {\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n              },\n              method: \"POST\",\n              body: JSON.stringify({\n                location: location,\n                radius: Math.floor(parseInt(radius) * 0.001).toString(),\n                startDateTime: startFormatted,\n                endDateTime: endFormatted,\n                segmentId: eventsCategory\n              })\n            });\n\n          case 4:\n            response = _context.sent;\n            _context.next = 7;\n            return response.json();\n\n          case 7:\n            responseJson = _context.sent;\n            console.log(responseJson);\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](1);\n            console.log(_context.t0);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 11]]);\n  }));\n\n  return function ticketmasterCall(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/components/SearchBox/APICalls/ticketmasterCall.ts"],"names":["ticketmasterCall","location","radius","startFormatted","endFormatted","eventsCategory","fetch","headers","Accept","method","body","JSON","stringify","Math","floor","parseInt","toString","startDateTime","endDateTime","segmentId","response","json","responseJson","console","log"],"mappings":";;AAOA,OAAO,IAAMA,gBAMa;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3BC,YAAAA,QAD2B,QAC3BA,QAD2B,EAE3BC,MAF2B,QAE3BA,MAF2B,EAG3BC,cAH2B,QAG3BA,cAH2B,EAI3BC,YAJ2B,QAI3BA,YAJ2B,EAK3BC,cAL2B,QAK3BA,cAL2B;AAAA;AAAA;AAAA,mBAQQC,KAAK,CAAC,sBAAD,EAAyB;AAC7DC,cAAAA,OAAO,EAAE;AACPC,gBAAAA,MAAM,EAAE,kBADD;AAEP,gCAAgB;AAFT,eADoD;AAK7DC,cAAAA,MAAM,EAAE,MALqD;AAM7DC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBX,gBAAAA,QAAQ,EAARA,QADmB;AAEnBC,gBAAAA,MAAM,EAAEW,IAAI,CAACC,KAAL,CAAWC,QAAQ,CAACb,MAAD,CAAR,GAAmB,KAA9B,EAAqCc,QAArC,EAFW;AAGnBC,gBAAAA,aAAa,EAAEd,cAHI;AAInBe,gBAAAA,WAAW,EAAEd,YAJM;AAKnBe,gBAAAA,SAAS,EAAEd;AALQ,eAAf;AANuD,aAAzB,CARb;;AAAA;AAQnBe,YAAAA,QARmB;AAAA;AAAA,mBAsBEA,QAAQ,CAACC,IAAT,EAtBF;;AAAA;AAsBnBC,YAAAA,YAtBmB;AAwBzBC,YAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AAxByB;AAAA;;AAAA;AAAA;AAAA;AA0BzBC,YAAAA,OAAO,CAACC,GAAR;;AA1ByB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBANbxB,gBAMa;AAAA;AAAA;AAAA,GANnB","sourcesContent":["import { SearchQuery } from \"../SearchBox\";\r\n\r\ntype Params = Pick<\r\n  SearchQuery,\r\n  \"location\" | \"startFormatted\" | \"endFormatted\" | \"radius\" | \"eventsCategory\"\r\n>;\r\n\r\nexport const ticketmasterCall: ({\r\n  location,\r\n  radius,\r\n  startFormatted,\r\n  endFormatted,\r\n  eventsCategory,\r\n}: Params) => Promise<any> = async ({\r\n  location,\r\n  radius,\r\n  startFormatted,\r\n  endFormatted,\r\n  eventsCategory,\r\n}) => {\r\n  try {\r\n    const response: Response = await fetch(\"/api/ticketmasterAPI\", {\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        location,\r\n        radius: Math.floor(parseInt(radius) * 0.001).toString(),\r\n        startDateTime: startFormatted,\r\n        endDateTime: endFormatted,\r\n        segmentId: eventsCategory,\r\n      }),\r\n    });\r\n    const responseJson = await response.json();\r\n\r\n    console.log(responseJson);\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}