{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { Layout, ResultCard } from \"../../components\";\nimport { useRouter } from \"next/router\";\nimport useSWR from \"swr\";\nimport css from \"../../styles/Queried.module.scss\";\nexport default function Queried() {\n  const [state, setState] = React.useState({\n    resultsType: \"\"\n  });\n  const router = useRouter();\n  const urlStart = true ? \"http://localhost:3000\" : \"https://sekndapp.com\";\n\n  const setSearchParameters = () => {\n    const {\n      query\n    } = router;\n    if (!query.queried) return null;\n    if (query.searchType) return query;\n    const checkURLIsString = query.queried.toString();\n    const paramValueArray = checkURLIsString.split(\"+\");\n    const SearchParams = {};\n    paramValueArray.forEach(param => {\n      const indexOfEqual = param.search(\"=\");\n      if (indexOfEqual === -1) return;else {\n        const paramKey = param.substring(0, indexOfEqual);\n        const paramValue = param.substring(indexOfEqual + 1);\n        SearchParams[paramKey] = paramValue;\n      }\n    });\n    return SearchParams;\n  };\n\n  if (setSearchParameters() === null) {\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 12\n      }\n    });\n  } else {\n    const {\n      data: yelpPlaces,\n      error: yelpPlacesError,\n      isValidating: yelpPlacesLoading\n    } = useSWR(setSearchParameters().searchType !== \"EVENTS\" ? `${urlStart}/api/yelpBusinessesAPI` : null, async url => {\n      const {\n        location,\n        radius,\n        placeType\n      } = setSearchParameters();\n\n      try {\n        const response = await fetch(url, {\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n          },\n          method: \"POST\",\n          body: JSON.stringify({\n            location,\n            radius: parseInt(radius),\n            term: placeType\n          })\n        });\n        const responseJSON = await response.json();\n        const {\n          businesses\n        } = responseJSON;\n        businesses.forEach(business => (business[\"type\"] = \"place\", business[\"source\"] = \"yelp\", business[\"inParts\"] = false));\n        return businesses;\n      } catch (err) {\n        return err.message;\n      }\n    });\n    const {\n      data: yelpEvents,\n      error: yelpEventsError,\n      isValidating: yelpEventsLoading\n    } = useSWR(setSearchParameters().searchType !== \"PLACES\" ? `${urlStart}/api/yelpEventsAPI` : null, async url => {\n      const {\n        location,\n        radius,\n        unixStartDate,\n        unixEndDate\n      } = setSearchParameters();\n\n      try {\n        const response = await fetch(url, {\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n          },\n          method: \"POST\",\n          body: JSON.stringify({\n            location,\n            radius: parseInt(radius),\n            start_date: parseInt(unixStartDate),\n            end_date: parseInt(unixEndDate)\n          })\n        });\n        const responseJSON = await response.json();\n        const {\n          events\n        } = responseJSON;\n        events.forEach(event => (event[\"type\"] = \"event\", event[\"source\"] = \"yelp\", event[\"inParts\"] = false));\n        return events;\n      } catch (err) {\n        return err.message;\n      }\n    });\n    const {\n      data: ticketmaster,\n      error: ticketmasterError,\n      isValidating: ticketmasterLoading\n    } = useSWR(setSearchParameters().searchType !== \"PLACES\" ? `${urlStart}/api/ticketmasterAPI` : null, async url => {\n      const {\n        location,\n        radius,\n        startFormatted,\n        endFormatted\n      } = setSearchParameters();\n\n      try {\n        const response = await fetch(url, {\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n          },\n          method: \"POST\",\n          body: JSON.stringify({\n            location,\n            radius: Math.floor(parseInt(radius) * 0.001).toString(),\n            startDateTime: startFormatted,\n            endDateTime: endFormatted\n          })\n        });\n        const responseJSON = await response.json();\n        const {\n          _embedded: {\n            events\n          }\n        } = responseJSON;\n        events.forEach(event => (event[\"source\"] = \"ticketmaster\", event[\"type\"] = \"event\", event[\"inParts\"] = false));\n        return events;\n      } catch (err) {\n        return err.message;\n      }\n    });\n\n    switch (setSearchParameters().searchType) {\n      case \"ALL\":\n        if (yelpPlacesLoading || yelpEventsLoading || ticketmasterLoading) {\n          return __jsx(Layout, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 13\n            }\n          }, __jsx(\"main\", {\n            className: css.queriedPage,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 15\n            }\n          }, __jsx(\"section\", {\n            className: css.header,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 17\n            }\n          }, __jsx(\"button\", {\n            className: css.sort,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 19\n            }\n          }, \"Sort\")), __jsx(\"div\", {\n            className: css.resultsSlider,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 17\n            }\n          })));\n        } else {\n          const checkYelpPlacesArray = Array.isArray(yelpPlaces) ? yelpPlaces : [];\n          const checkYelpEventsArray = Array.isArray(yelpEvents) ? yelpEvents : [];\n          const checkTicketMasterArray = Array.isArray(ticketmaster) ? ticketmaster : [];\n          const results = {\n            items: [...checkYelpPlacesArray, ...checkYelpEventsArray, ...checkTicketMasterArray],\n            errors: {\n              yelpPlacesError,\n              yelpEventsError,\n              ticketmasterError\n            }\n          };\n          console.log(results);\n          return __jsx(Layout, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 13\n            }\n          }, __jsx(\"main\", {\n            className: css.queriedPage,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 15\n            }\n          }, __jsx(\"section\", {\n            className: css.header,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 17\n            }\n          }, __jsx(\"button\", {\n            className: css.sort,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 19\n            }\n          }, \"Sort\")), __jsx(\"div\", {\n            className: css.resultsSlider,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 17\n            }\n          }, results.items.map(item => __jsx(ResultCard, {\n            key: item.id,\n            item: item,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 21\n            }\n          })))));\n        }\n\n      case \"PLACES\":\n        if (yelpPlacesLoading) {\n          return __jsx(Layout, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 18\n            }\n          });\n        } else {\n          const results = {\n            items: [...yelpPlaces, ...yelpEvents, ...ticketmaster],\n            errors: {\n              yelpPlacesError,\n              yelpEventsError,\n              ticketmasterError\n            }\n          };\n          return __jsx(Layout, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 18\n            }\n          });\n        }\n\n      case \"EVENTS\":\n        if (ticketmasterLoading || yelpEventsLoading) {\n          return __jsx(Layout, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 18\n            }\n          });\n        } else {\n          const results = {\n            items: [...yelpEvents, ticketmaster],\n            errors: {\n              yelpEventsError,\n              ticketmasterError\n            }\n          };\n        }\n\n      default:\n        if (yelpPlacesLoading || yelpEventsLoading || ticketmasterLoading) {\n          return __jsx(Layout, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 18\n            }\n          });\n        } else {\n          const results = {\n            items: [...yelpPlaces, ...yelpEvents, ...ticketmaster],\n            errors: {\n              yelpPlacesError,\n              yelpEventsError,\n              ticketmasterError\n            }\n          };\n          console.log(results);\n          return __jsx(Layout, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 18\n            }\n          });\n        }\n\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","Layout","ResultCard","useRouter","useSWR","css","Queried","state","setState","useState","resultsType","router","urlStart","setSearchParameters","query","queried","searchType","checkURLIsString","toString","paramValueArray","split","SearchParams","forEach","param","indexOfEqual","search","paramKey","substring","paramValue","data","yelpPlaces","error","yelpPlacesError","isValidating","yelpPlacesLoading","url","location","radius","placeType","response","fetch","headers","Accept","method","body","JSON","stringify","parseInt","term","responseJSON","json","businesses","business","err","message","yelpEvents","yelpEventsError","yelpEventsLoading","unixStartDate","unixEndDate","start_date","end_date","events","event","ticketmaster","ticketmasterError","ticketmasterLoading","startFormatted","endFormatted","Math","floor","startDateTime","endDateTime","_embedded","queriedPage","header","sort","resultsSlider","checkYelpPlacesArray","Array","isArray","checkYelpEventsArray","checkTicketMasterArray","results","items","errors","console","log","map","item","id"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { Layout, ResultCard } from \"../../components\";\r\nimport {\r\n  yelpBusinessesCall,\r\n  yelpEventsCall,\r\n  ticketMasterCall,\r\n} from \"../../apicalls\";\r\nimport { NextRouter, useRouter } from \"next/router\";\r\nimport useSWR, { responseInterface } from \"swr\";\r\nimport css from \"../../styles/Queried.module.scss\";\r\nimport { ParsedUrlQuery } from \"querystring\";\r\nimport { SearchBox } from \"../../components/SearchBox\";\r\n\r\ntype Results = {\r\n  items: { [key: string]: any }[];\r\n  errors: {\r\n    yelpPlacesError?: string | undefined;\r\n    yelpEventsError?: string | undefined;\r\n    ticketmasterError?: string | undefined;\r\n  };\r\n};\r\n\r\ntype APIResponse = { [key: string]: any }[];\r\n\r\ntype SearchParams = { [key: string]: any };\r\n\r\nexport default function Queried(): JSX.Element {\r\n  const [state, setState] = React.useState<{ resultsType: string }>({\r\n    resultsType: \"\",\r\n  });\r\n\r\n  const router: NextRouter = useRouter();\r\n\r\n  const urlStart: string =\r\n    process.env.NODE_ENV !== \"production\"\r\n      ? \"http://localhost:3000\"\r\n      : \"https://sekndapp.com\";\r\n\r\n  const setSearchParameters: () => { [key: string]: any } | null = () => {\r\n    const { query } = router;\r\n    if (!query.queried) return null;\r\n    if (query.searchType) return query;\r\n\r\n    const checkURLIsString: string = query.queried.toString();\r\n    const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n    const SearchParams: SearchParams = {};\r\n\r\n    paramValueArray.forEach((param) => {\r\n      const indexOfEqual: number = param.search(\"=\");\r\n      if (indexOfEqual === -1) return;\r\n      else {\r\n        const paramKey: string = param.substring(0, indexOfEqual);\r\n        const paramValue: string = param.substring(indexOfEqual + 1);\r\n        SearchParams[paramKey] = paramValue;\r\n      }\r\n    });\r\n    return SearchParams;\r\n  };\r\n\r\n  if (setSearchParameters() === null) {\r\n    return <Layout></Layout>;\r\n  } else {\r\n    const {\r\n      data: yelpPlaces,\r\n      error: yelpPlacesError,\r\n      isValidating: yelpPlacesLoading,\r\n    }: responseInterface<APIResponse, string> = useSWR(\r\n      setSearchParameters().searchType !== \"EVENTS\"\r\n        ? `${urlStart}/api/yelpBusinessesAPI`\r\n        : null,\r\n      async (url) => {\r\n        const { location, radius, placeType } = setSearchParameters();\r\n        try {\r\n          const response: Response = await fetch(url, {\r\n            headers: {\r\n              Accept: \"application/json\",\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n              location,\r\n              radius: parseInt(radius),\r\n              term: placeType,\r\n            }),\r\n          });\r\n\r\n          const responseJSON = await response.json();\r\n\r\n          const {\r\n            businesses,\r\n          }: { businesses: { [key: string]: any }[] } = responseJSON;\r\n          businesses.forEach(\r\n            (business) => (\r\n              (business[\"type\"] = \"place\"),\r\n              (business[\"source\"] = \"yelp\"),\r\n              (business[\"inParts\"] = false)\r\n            )\r\n          );\r\n\r\n          return businesses;\r\n        } catch (err) {\r\n          return err.message;\r\n        }\r\n      }\r\n    );\r\n\r\n    const {\r\n      data: yelpEvents,\r\n      error: yelpEventsError,\r\n      isValidating: yelpEventsLoading,\r\n    }: responseInterface<APIResponse, string> = useSWR(\r\n      setSearchParameters().searchType !== \"PLACES\"\r\n        ? `${urlStart}/api/yelpEventsAPI`\r\n        : null,\r\n      async (url) => {\r\n        const {\r\n          location,\r\n          radius,\r\n          unixStartDate,\r\n          unixEndDate,\r\n        } = setSearchParameters();\r\n        try {\r\n          const response: Response = await fetch(url, {\r\n            headers: {\r\n              Accept: \"application/json\",\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n              location,\r\n              radius: parseInt(radius),\r\n              start_date: parseInt(unixStartDate),\r\n              end_date: parseInt(unixEndDate),\r\n            }),\r\n          });\r\n\r\n          const responseJSON = await response.json();\r\n\r\n          const { events }: { events: { [key: string]: any }[] } = responseJSON;\r\n          events.forEach(\r\n            (event) => (\r\n              (event[\"type\"] = \"event\"),\r\n              (event[\"source\"] = \"yelp\"),\r\n              (event[\"inParts\"] = false)\r\n            )\r\n          );\r\n          return events;\r\n        } catch (err) {\r\n          return err.message;\r\n        }\r\n      }\r\n    );\r\n\r\n    const {\r\n      data: ticketmaster,\r\n      error: ticketmasterError,\r\n      isValidating: ticketmasterLoading,\r\n    }: responseInterface<APIResponse, string> = useSWR(\r\n      setSearchParameters().searchType !== \"PLACES\"\r\n        ? `${urlStart}/api/ticketmasterAPI`\r\n        : null,\r\n      async (url) => {\r\n        const {\r\n          location,\r\n          radius,\r\n          startFormatted,\r\n          endFormatted,\r\n        } = setSearchParameters();\r\n        try {\r\n          const response: Response = await fetch(url, {\r\n            headers: {\r\n              Accept: \"application/json\",\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n              location,\r\n              radius: Math.floor(parseInt(radius) * 0.001).toString(),\r\n              startDateTime: startFormatted,\r\n              endDateTime: endFormatted,\r\n            }),\r\n          });\r\n\r\n          const responseJSON = await response.json();\r\n          const {\r\n            _embedded: { events },\r\n          }: { _embedded: { events: { [key: string]: any }[] } } = responseJSON;\r\n\r\n          events.forEach(\r\n            (event) => (\r\n              (event[\"source\"] = \"ticketmaster\"),\r\n              (event[\"type\"] = \"event\"),\r\n              (event[\"inParts\"] = false)\r\n            )\r\n          );\r\n\r\n          return events;\r\n        } catch (err) {\r\n          return err.message;\r\n        }\r\n      }\r\n    );\r\n\r\n    switch (setSearchParameters().searchType) {\r\n      case \"ALL\":\r\n        if (yelpPlacesLoading || yelpEventsLoading || ticketmasterLoading) {\r\n          return (\r\n            <Layout>\r\n              <main className={css.queriedPage}>\r\n                {/* <section className={css.queryDisplay}></section> */}\r\n                <section className={css.header}>\r\n                  <button className={css.sort}>Sort</button>\r\n                </section>\r\n\r\n                <div className={css.resultsSlider}></div>\r\n              </main>\r\n            </Layout>\r\n          );\r\n        } else {\r\n          const checkYelpPlacesArray: Results[\"items\"] | [] = Array.isArray(\r\n            yelpPlaces\r\n          )\r\n            ? yelpPlaces\r\n            : [];\r\n          const checkYelpEventsArray: Results[\"items\"] | [] = Array.isArray(\r\n            yelpEvents\r\n          )\r\n            ? yelpEvents\r\n            : [];\r\n          const checkTicketMasterArray: Results[\"items\"] | [] = Array.isArray(\r\n            ticketmaster\r\n          )\r\n            ? ticketmaster\r\n            : [];\r\n          const results: Results = {\r\n            items: [\r\n              ...checkYelpPlacesArray,\r\n              ...checkYelpEventsArray,\r\n              ...checkTicketMasterArray,\r\n            ],\r\n            errors: {\r\n              yelpPlacesError,\r\n              yelpEventsError,\r\n              ticketmasterError,\r\n            },\r\n          };\r\n          console.log(results);\r\n          return (\r\n            <Layout>\r\n              <main className={css.queriedPage}>\r\n                {/* <section className={css.queryDisplay}></section> */}\r\n                <section className={css.header}>\r\n                  <button className={css.sort}>Sort</button>\r\n                </section>\r\n\r\n                <div className={css.resultsSlider}>\r\n                  {results.items.map((item) => (\r\n                    <ResultCard key={item.id} item={item}></ResultCard>\r\n                  ))}\r\n                </div>\r\n              </main>\r\n            </Layout>\r\n          );\r\n        }\r\n      case \"PLACES\":\r\n        if (yelpPlacesLoading) {\r\n          return <Layout></Layout>;\r\n        } else {\r\n          const results: Results = {\r\n            items: [...yelpPlaces, ...yelpEvents, ...ticketmaster],\r\n            errors: {\r\n              yelpPlacesError,\r\n              yelpEventsError,\r\n              ticketmasterError,\r\n            },\r\n          };\r\n          return <Layout></Layout>;\r\n        }\r\n      case \"EVENTS\":\r\n        if (ticketmasterLoading || yelpEventsLoading) {\r\n          return <Layout></Layout>;\r\n        } else {\r\n          const results: Results = {\r\n            items: [...yelpEvents, ticketmaster],\r\n            errors: {\r\n              yelpEventsError,\r\n              ticketmasterError,\r\n            },\r\n          };\r\n        }\r\n\r\n      default:\r\n        if (yelpPlacesLoading || yelpEventsLoading || ticketmasterLoading) {\r\n          return <Layout></Layout>;\r\n        } else {\r\n          const results: Results = {\r\n            items: [...yelpPlaces, ...yelpEvents, ...ticketmaster],\r\n            errors: {\r\n              yelpPlacesError,\r\n              yelpEventsError,\r\n              ticketmasterError,\r\n            },\r\n          };\r\n          console.log(results);\r\n\r\n          return <Layout></Layout>;\r\n        }\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}