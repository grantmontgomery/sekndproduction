{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport * as React from \"react\";\n\nvar Queried = function Queried(_ref) {\n  _s();\n\n  var results = _ref.results;\n\n  var _React$useState = React.useState({\n    resultsType: \"\"\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1]; // React.useEffect(() => {\n  //   if (searchType) {\n  //     switch (searchType) {\n  //       case \"ALL\":\n  //     }\n  //   }\n  // });\n\n\n  console.log(results);\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 10\n    }\n  }); // const setTypeButtons: () => JSX.Element = () => {\n  //   if (searchType) {\n  //     switch (searchType) {\n  //       case \"ALL\":\n  //         return (\n  //           <React.Fragment>\n  //             <button className={css.typeButton}>Places</button>\n  //             <button className={css.typeButton}>Events</button>\n  //           </React.Fragment>\n  //         );\n  //       case \"PLACES\":\n  //         return <button className={css.typeButton}>Places</button>;\n  //       case \"EVENTS\":\n  //         return <button className={css.typeButton}>Events</button>;\n  //       default:\n  //         return (\n  //           <React.Fragment>\n  //             <button className={css.typeButton}>Places</button>\n  //             <button className={css.typeButton}>Events</button>\n  //           </React.Fragment>\n  //         );\n  //     }\n  //   } else {\n  //     return (\n  //       <React.Fragment>\n  //         <button className={css.typeButton}>Places</button>\n  //         <button className={css.typeButton}>Events</button>\n  //       </React.Fragment>\n  //     );\n  //   }\n  // };\n  // return (\n  //   <Layout>\n  //     <main className={css.queriedPage}>\n  //       <section className={css.queryDisplay}></section>\n  //       <section className={css.header}>\n  //         {setTypeButtons()}\n  //         <button className={css.sort}>Sort</button>\n  //       </section>\n  //       <section className={css.results}>\n  //         <div className={css.resultsSlider}>\n  //           {/* {results\n  //             ? results.map((item) => {\n  //                 return <ResultCard key={item.id} item={item}></ResultCard>;\n  //               })\n  //             : null} */}\n  //         </div>\n  //       </section>\n  //     </main>\n  //   </Layout>\n  // );\n}; // Queried.getInitialProps = async ({\n//   query,\n// }): Promise<{ results: any; searchType: string }> => {\n//   if (query.queried) {\n//     const checkURLIsString: string = query.queried.toString();\n//     const paramValueArray: string[] = checkURLIsString.split(\"+\");\n//     const searchParamsValues: { [key: string]: string } = {};\n//     paramValueArray.forEach((param) => {\n//       const indexOfEqual: number = param.search(\"=\");\n//       if (indexOfEqual === -1) return;\n//       else {\n//         const paramKey: string = param.substring(0, indexOfEqual);\n//         const paramValue: string = param.substring(indexOfEqual + 1);\n//         searchParamsValues[paramKey] = paramValue;\n//       }\n//     });\n//     const apiResponse: Promise<\n//       { [key: string]: any }[] | string\n//     > = await yelpBusinessesCall(searchParamsValues);\n//     return { results: apiResponse, searchType: searchParamsValues.searchType };\n//   } else {\n//     return { results: {}, searchType: \"ALL\" };\n//   }\n// };\n\n\n_s(Queried, \"YaSE04uFrK5Ev6iRtmvOc2euI84=\");\n\n_c = Queried;\nexport var __N_SSP = true;\nexport default Queried;\n\nvar _c;\n\n$RefreshReg$(_c, \"Queried\");","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","Queried","results","useState","resultsType","state","setState","console","log"],"mappings":";;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AASA,IAAMC,OAAmC,GAAG,SAAtCA,OAAsC,OAAiB;AAAA;;AAAA,MAAdC,OAAc,QAAdA,OAAc;;AAAA,wBACjCF,KAAK,CAACG,QAAN,CAAe;AAAEC,IAAAA,WAAW,EAAE;AAAf,GAAf,CADiC;AAAA;AAAA,MACpDC,KADoD;AAAA,MAC7CC,QAD6C,wBAE3D;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ;AACA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP,CAV2D,CAY3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CAjED,C,CAmEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;GA9FMD,O;;KAAAA,O;;AA0JN,eAAeA,OAAf","sourcesContent":["import * as React from \"react\";\r\nimport { Layout, ResultCard } from \"../../components\";\r\nimport {\r\n  yelpBusinessesCall,\r\n  yelpEventsCall,\r\n  ticketMasterCall,\r\n} from \"../../apicalls\";\r\nimport css from \"../../styles/Queried.module.scss\";\r\n\r\nconst Queried: React.FC<{ results: any }> = ({ results }) => {\r\n  const [state, setState] = React.useState({ resultsType: \"\" });\r\n  // React.useEffect(() => {\r\n  //   if (searchType) {\r\n  //     switch (searchType) {\r\n  //       case \"ALL\":\r\n  //     }\r\n  //   }\r\n  // });\r\n  console.log(results);\r\n  return <div></div>;\r\n\r\n  // const setTypeButtons: () => JSX.Element = () => {\r\n  //   if (searchType) {\r\n  //     switch (searchType) {\r\n  //       case \"ALL\":\r\n  //         return (\r\n  //           <React.Fragment>\r\n  //             <button className={css.typeButton}>Places</button>\r\n  //             <button className={css.typeButton}>Events</button>\r\n  //           </React.Fragment>\r\n  //         );\r\n  //       case \"PLACES\":\r\n  //         return <button className={css.typeButton}>Places</button>;\r\n\r\n  //       case \"EVENTS\":\r\n  //         return <button className={css.typeButton}>Events</button>;\r\n  //       default:\r\n  //         return (\r\n  //           <React.Fragment>\r\n  //             <button className={css.typeButton}>Places</button>\r\n  //             <button className={css.typeButton}>Events</button>\r\n  //           </React.Fragment>\r\n  //         );\r\n  //     }\r\n  //   } else {\r\n  //     return (\r\n  //       <React.Fragment>\r\n  //         <button className={css.typeButton}>Places</button>\r\n  //         <button className={css.typeButton}>Events</button>\r\n  //       </React.Fragment>\r\n  //     );\r\n  //   }\r\n  // };\r\n\r\n  // return (\r\n  //   <Layout>\r\n  //     <main className={css.queriedPage}>\r\n  //       <section className={css.queryDisplay}></section>\r\n  //       <section className={css.header}>\r\n  //         {setTypeButtons()}\r\n  //         <button className={css.sort}>Sort</button>\r\n  //       </section>\r\n  //       <section className={css.results}>\r\n  //         <div className={css.resultsSlider}>\r\n  //           {/* {results\r\n  //             ? results.map((item) => {\r\n  //                 return <ResultCard key={item.id} item={item}></ResultCard>;\r\n  //               })\r\n  //             : null} */}\r\n  //         </div>\r\n  //       </section>\r\n  //     </main>\r\n  //   </Layout>\r\n  // );\r\n};\r\n\r\n// Queried.getInitialProps = async ({\r\n//   query,\r\n// }): Promise<{ results: any; searchType: string }> => {\r\n//   if (query.queried) {\r\n//     const checkURLIsString: string = query.queried.toString();\r\n//     const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n//     const searchParamsValues: { [key: string]: string } = {};\r\n\r\n//     paramValueArray.forEach((param) => {\r\n//       const indexOfEqual: number = param.search(\"=\");\r\n//       if (indexOfEqual === -1) return;\r\n//       else {\r\n//         const paramKey: string = param.substring(0, indexOfEqual);\r\n//         const paramValue: string = param.substring(indexOfEqual + 1);\r\n//         searchParamsValues[paramKey] = paramValue;\r\n//       }\r\n//     });\r\n\r\n//     const apiResponse: Promise<\r\n//       { [key: string]: any }[] | string\r\n//     > = await yelpBusinessesCall(searchParamsValues);\r\n\r\n//     return { results: apiResponse, searchType: searchParamsValues.searchType };\r\n//   } else {\r\n//     return { results: {}, searchType: \"ALL\" };\r\n//   }\r\n// };\r\n\r\nexport async function getServerSideProps({\r\n  query,\r\n  params,\r\n}): Promise<{ props: { results: any; searchType?: string } }> {\r\n  if (query.queried) {\r\n    const checkURLIsString: string = query.queried.toString();\r\n    const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n    const searchParamsValues: { [key: string]: string } = {};\r\n\r\n    console.log(params);\r\n\r\n    paramValueArray.forEach((param) => {\r\n      const indexOfEqual: number = param.search(\"=\");\r\n      if (indexOfEqual === -1) return;\r\n      else {\r\n        const paramKey: string = param.substring(0, indexOfEqual);\r\n        const paramValue: string = param.substring(indexOfEqual + 1);\r\n        searchParamsValues[paramKey] = paramValue;\r\n      }\r\n    });\r\n\r\n    const response: Response = await fetch(\"/api/yelpBusinessesAPI\", {\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        location: searchParamsValues.location,\r\n        radius: searchParamsValues.radius,\r\n        term: searchParamsValues.placeType,\r\n      }),\r\n    });\r\n\r\n    const responseJson = await response.json();\r\n\r\n    const {\r\n      businesses,\r\n    }: { businesses: { [key: string]: any }[] } = responseJson;\r\n    businesses.forEach(\r\n      (business) => (\r\n        (business[\"type\"] = \"place\"),\r\n        (business[\"source\"] = \"yelp\"),\r\n        (business[\"inParts\"] = false)\r\n      )\r\n    );\r\n\r\n    return {\r\n      props: {\r\n        results: businesses,\r\n      },\r\n    };\r\n  } else {\r\n    return { props: { results: {}, searchType: \"ALL\" } };\r\n  }\r\n}\r\n\r\nexport default Queried;\r\n"]},"metadata":{},"sourceType":"module"}