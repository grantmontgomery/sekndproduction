{"ast":null,"code":"export default ((req, res) => {\n  if (req.method !== \"GET\") {\n    //url setup\n    const {\n      startDateTime,\n      endDateTime,\n      radius,\n      location\n    } = req.body;\n    const ticketmasterEvents = new URL(\"https://app.ticketmaster.com/discovery/v2/events\"),\n          params = {\n      radius,\n      startDateTime,\n      endDateTime,\n      unit: [\"km\"],\n      apikey: process.env.TICKETMASTER_API_KEY\n    };\n    Object.keys(params).forEach(key => ticketmasterEvents.searchParams.append(key, params[key]));\n\n    if (isNaN(parseInt(location))) {\n      ticketmasterEvents.searchParams.append(\"city\", location);\n    } else {\n      ticketmasterEvents.searchParams.append(\"postalCode\", location);\n    }\n\n    const ticketmasterUrlString = ticketmasterEvents.toString(); //function\n\n    const ticketmasterDataFetch = async (urlString) => {\n      try {\n        const ticketmasterResponse = await fetch(urlString);\n        const jsonResponse = await ticketmasterResponse.json();\n        return jsonResponse;\n      } catch (err) {\n        return err;\n      }\n    };\n\n    return ticketmasterDataFetch(ticketmasterUrlString).then(data => res.send(data)).catch(err => res.send(err));\n  }\n\n  return res.status(200).end(\"Ticketmaster API\");\n});","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/api/ticketmasterAPI.ts"],"names":["req","res","method","startDateTime","endDateTime","radius","location","body","ticketmasterEvents","URL","params","unit","apikey","process","env","TICKETMASTER_API_KEY","Object","keys","forEach","key","searchParams","append","isNaN","parseInt","ticketmasterUrlString","toString","ticketmasterDataFetch","urlString","ticketmasterResponse","fetch","jsonResponse","json","err","then","data","send","catch","status","end"],"mappings":"AAaA,gBAAe,CAACA,GAAD,EAAsBC,GAAtB,KAA+C;AAC5D,MAAID,GAAG,CAACE,MAAJ,KAAe,KAAnB,EAA0B;AACxB;AAEA,UAAM;AAAEC,MAAAA,aAAF;AAAiBC,MAAAA,WAAjB;AAA8BC,MAAAA,MAA9B;AAAsCC,MAAAA;AAAtC,QAAmDN,GAAG,CAACO,IAA7D;AACA,UAAMC,kBAAuB,GAAG,IAAIC,GAAJ,CAC5B,kDAD4B,CAAhC;AAAA,UAGEC,MAAc,GAAG;AACfL,MAAAA,MADe;AAEfF,MAAAA,aAFe;AAGfC,MAAAA,WAHe;AAIfO,MAAAA,IAAI,EAAE,CAAC,IAAD,CAJS;AAKfC,MAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC;AALL,KAHnB;AAUAC,IAAAA,MAAM,CAACC,IAAP,CAAYP,MAAZ,EAAoBQ,OAApB,CAA6BC,GAAD,IAC1BX,kBAAkB,CAACY,YAAnB,CAAgCC,MAAhC,CAAuCF,GAAvC,EAA4CT,MAAM,CAACS,GAAD,CAAlD,CADF;;AAIA,QAAIG,KAAK,CAACC,QAAQ,CAACjB,QAAD,CAAT,CAAT,EAA+B;AAC7BE,MAAAA,kBAAkB,CAACY,YAAnB,CAAgCC,MAAhC,CAAuC,MAAvC,EAA+Cf,QAA/C;AACD,KAFD,MAEO;AACLE,MAAAA,kBAAkB,CAACY,YAAnB,CAAgCC,MAAhC,CAAuC,YAAvC,EAAqDf,QAArD;AACD;;AAED,UAAMkB,qBAA6B,GAAGhB,kBAAkB,CAACiB,QAAnB,EAAtC,CAxBwB,CA0BxB;;AACA,UAAMC,qBAA0D,GAAG,OACjEC,SADiE,KAE9D;AACH,UAAI;AACF,cAAMC,oBAA8B,GAAG,MAAMC,KAAK,CAACF,SAAD,CAAlD;AACA,cAAMG,YAAkB,GAAG,MAAMF,oBAAoB,CAACG,IAArB,EAAjC;AACA,eAAOD,YAAP;AACD,OAJD,CAIE,OAAOE,GAAP,EAAY;AACZ,eAAOA,GAAP;AACD;AACF,KAVD;;AAYA,WAAON,qBAAqB,CAACF,qBAAD,CAArB,CACJS,IADI,CACEC,IAAD,IAAUjC,GAAG,CAACkC,IAAJ,CAASD,IAAT,CADX,EAEJE,KAFI,CAEGJ,GAAD,IAAS/B,GAAG,CAACkC,IAAJ,CAASH,GAAT,CAFX,CAAP;AAGD;;AACD,SAAO/B,GAAG,CAACoC,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,CAAoB,kBAApB,CAAP;AACD,CA7CD","sourcesContent":["import { NextApiRequest, NextApiResponse } from \"next\";\r\n\r\ntype Params = {\r\n  radius: string;\r\n  startDateTime: string;\r\n  endDateTime: string;\r\n  unit: string[];\r\n  apikey: string;\r\n  segmentID?: string;\r\n  city?: string;\r\n  postalCode?: string;\r\n};\r\n\r\nexport default (req: NextApiRequest, res: NextApiResponse) => {\r\n  if (req.method !== \"GET\") {\r\n    //url setup\r\n\r\n    const { startDateTime, endDateTime, radius, location } = req.body;\r\n    const ticketmasterEvents: URL = new URL(\r\n        \"https://app.ticketmaster.com/discovery/v2/events\"\r\n      ),\r\n      params: Params = {\r\n        radius,\r\n        startDateTime,\r\n        endDateTime,\r\n        unit: [\"km\"],\r\n        apikey: process.env.TICKETMASTER_API_KEY,\r\n      };\r\n    Object.keys(params).forEach((key) =>\r\n      ticketmasterEvents.searchParams.append(key, params[key])\r\n    );\r\n\r\n    if (isNaN(parseInt(location))) {\r\n      ticketmasterEvents.searchParams.append(\"city\", location);\r\n    } else {\r\n      ticketmasterEvents.searchParams.append(\"postalCode\", location);\r\n    }\r\n\r\n    const ticketmasterUrlString: string = ticketmasterEvents.toString();\r\n\r\n    //function\r\n    const ticketmasterDataFetch: (urlString: string) => Promise<any> = async (\r\n      urlString\r\n    ) => {\r\n      try {\r\n        const ticketmasterResponse: Response = await fetch(urlString);\r\n        const jsonResponse: JSON = await ticketmasterResponse.json();\r\n        return jsonResponse;\r\n      } catch (err) {\r\n        return err;\r\n      }\r\n    };\r\n\r\n    return ticketmasterDataFetch(ticketmasterUrlString)\r\n      .then((data) => res.send(data))\r\n      .catch((err) => res.send(err));\r\n  }\r\n  return res.status(200).end(\"Ticketmaster API\");\r\n};\r\n"]},"metadata":{},"sourceType":"module"}