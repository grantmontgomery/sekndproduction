{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { Layout } from \"../../components\";\nexport default function Queried(props) {\n  console.log(props);\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 5\n    }\n  }, __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }\n  }), __jsx(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }\n  }));\n}\n\nQueried.getInitialProps = async ({\n  query\n}) => {\n  const {\n    yelpBusinessesAPI\n  } = require(\"../../apicalls/yelpBusinessesCall\");\n\n  const checkURLIsString = query.queried.toString();\n  const paramValueArray = checkURLIsString.split(\"+\");\n  const searchParamsValues = {};\n  paramValueArray.forEach(param => {\n    const indexOfEqual = param.search(\"=\");\n    if (indexOfEqual === -1) return;else {\n      const paramKey = param.substring(0, indexOfEqual);\n      const paramValue = param.substring(indexOfEqual + 1);\n      searchParamsValues[paramKey] = paramValue;\n    }\n  });\n  console.log(searchParamsValues); // const results = await yelpBusinessesAPI(searchParamsValues);\n\n  return {\n    props: searchParamsValues\n  };\n};","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","Layout","Queried","props","console","log","getInitialProps","query","yelpBusinessesAPI","require","checkURLIsString","queried","toString","paramValueArray","split","searchParamsValues","forEach","param","indexOfEqual","search","paramKey","substring","paramValue"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,MAAT,QAAuB,kBAAvB;AAEA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACrCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,SACE,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD;;AAEDD,OAAO,CAACI,eAAR,GAA0B,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAqB;AAC7C,QAAM;AACJC,IAAAA;AADI,MAIFC,OAAO,CAAC,mCAAD,CAJX;;AAMA,QAAMC,gBAAwB,GAAGH,KAAK,CAACI,OAAN,CAAcC,QAAd,EAAjC;AACA,QAAMC,eAAyB,GAAGH,gBAAgB,CAACI,KAAjB,CAAuB,GAAvB,CAAlC;AAEA,QAAMC,kBAA6C,GAAG,EAAtD;AAEAF,EAAAA,eAAe,CAACG,OAAhB,CAAyBC,KAAD,IAAW;AACjC,UAAMC,YAAoB,GAAGD,KAAK,CAACE,MAAN,CAAa,GAAb,CAA7B;AACA,QAAID,YAAY,KAAK,CAAC,CAAtB,EAAyB,OAAzB,KACK;AACH,YAAME,QAAgB,GAAGH,KAAK,CAACI,SAAN,CAAgB,CAAhB,EAAmBH,YAAnB,CAAzB;AACA,YAAMI,UAAkB,GAAGL,KAAK,CAACI,SAAN,CAAgBH,YAAY,GAAG,CAA/B,CAA3B;AACAH,MAAAA,kBAAkB,CAACK,QAAD,CAAlB,GAA+BE,UAA/B;AACD;AACF,GARD;AAUAlB,EAAAA,OAAO,CAACC,GAAR,CAAYU,kBAAZ,EAtB6C,CAwB7C;;AAEA,SAAO;AACLZ,IAAAA,KAAK,EAAEY;AADF,GAAP;AAGD,CA7BD","sourcesContent":["import * as React from \"react\";\r\nimport { GetServerSideProps } from \"next\";\r\nimport { Layout } from \"../../components\";\r\n\r\nexport default function Queried(props) {\r\n  console.log(props);\r\n  return (\r\n    <React.Fragment>\r\n      <Layout></Layout>\r\n      <main></main>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nQueried.getInitialProps = async ({ query }) => {\r\n  const {\r\n    yelpBusinessesAPI,\r\n  }: {\r\n    yelpBusinessesAPI: ({}: { [key: string]: string }) => Error | Promise<any>;\r\n  } = require(\"../../apicalls/yelpBusinessesCall\");\r\n\r\n  const checkURLIsString: string = query.queried.toString();\r\n  const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n  const searchParamsValues: { [key: string]: string } = {};\r\n\r\n  paramValueArray.forEach((param) => {\r\n    const indexOfEqual: number = param.search(\"=\");\r\n    if (indexOfEqual === -1) return;\r\n    else {\r\n      const paramKey: string = param.substring(0, indexOfEqual);\r\n      const paramValue: string = param.substring(indexOfEqual + 1);\r\n      searchParamsValues[paramKey] = paramValue;\r\n    }\r\n  });\r\n\r\n  console.log(searchParamsValues);\r\n\r\n  // const results = await yelpBusinessesAPI(searchParamsValues);\r\n\r\n  return {\r\n    props: searchParamsValues,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}