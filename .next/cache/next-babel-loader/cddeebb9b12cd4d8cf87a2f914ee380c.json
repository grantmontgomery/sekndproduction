{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar ScheduleGrid = /*#__PURE__*/function () {\n  function ScheduleGrid(unixStartDate, unixEndDate) {\n    _classCallCheck(this, ScheduleGrid);\n\n    _defineProperty(this, \"unixStartDate\", void 0);\n\n    _defineProperty(this, \"unixEndDate\", void 0);\n\n    _defineProperty(this, \"numberofSquares\", void 0);\n\n    _defineProperty(this, \"templateAreas\", void 0);\n\n    _defineProperty(this, \"startHour\", void 0);\n\n    _defineProperty(this, \"hourDifference\", void 0);\n\n    _defineProperty(this, \"columnAmount\", void 0);\n\n    _defineProperty(this, \"hourNumbers\", void 0);\n\n    _defineProperty(this, \"endHour\", void 0);\n\n    _defineProperty(this, \"stringHours\", void 0);\n\n    this.unixStartDate = unixStartDate;\n    this.unixEndDate = unixEndDate;\n    this.startHour = 0;\n    this.hourDifference = 0;\n    this.templateAreas = \"\";\n    this.columnAmount = 0;\n    this.endHour = 0;\n    this.stringHours = [];\n    this.hourNumbers = [];\n    this.numberofSquares = 0;\n  }\n\n  _createClass(ScheduleGrid, [{\n    key: \"setSquares\",\n    value: function setSquares() {\n      var timeDifference = this.unixEndDate - this.unixStartDate;\n      var hours = Math.floor(timeDifference / 3600);\n      var numColumns = hours * 2 + 4;\n      var numberOfSquares = numColumns * 5;\n      this.numberofSquares = numberOfSquares;\n      this.columnAmount = numColumns;\n      this.hourDifference = hours;\n    }\n  }, {\n    key: \"setHours\",\n    value: function setHours() {\n      var startDate = new Date(this.unixStartDate * 1000);\n      var endDate = new Date(this.unixEndDate * 1000);\n      var startHour = startDate.getHours();\n      var endHour = endDate.getHours();\n      this.startHour = startHour;\n      this.endHour = endHour;\n    }\n  }, {\n    key: \"setGridTemplate\",\n    value: function setGridTemplate() {\n      var square = \"square \";\n      var rowString = \"\\\"\".concat(square.repeat(this.columnAmount - 1), \" square\\\"\");\n      this.templateAreas = \"\".concat(rowString.repeat(5));\n    }\n  }, {\n    key: \"setHoursHeader\",\n    value: function setHoursHeader() {\n      var hourCounter = 0;\n      var startHourCounter = this.startHour;\n      var hourNumbers = [];\n\n      while (hourCounter < this.hourDifference) {\n        hourNumbers.push(startHourCounter);\n        hourCounter++;\n        startHourCounter < 24 ? startHourCounter++ : startHourCounter = 1;\n      }\n\n      var stringHours = [];\n      hourNumbers.forEach(function (hour) {\n        if (hour === 24) {\n          return stringHours.push(\"12:00 a.m\");\n        } else if (hour === 12) {\n          return stringHours.push(\"12:00 p.m\");\n        } else {\n          return hour < 12 ? stringHours.push(\"\".concat(hour, \":00 a.m\")) : stringHours.push(\"\".concat(hour - 12, \":00 p.m\"));\n        }\n      });\n      this.hourNumbers = hourNumbers;\n      this.stringHours = stringHours;\n    }\n  }, {\n    key: \"setGrid\",\n    value: function setGrid() {\n      this.setSquares();\n      this.setHours();\n      this.setGridTemplate();\n      this.setHoursHeader();\n    }\n  }]);\n\n  return ScheduleGrid;\n}();\n\nexport default function setSquares(unixStartDate, unixEndDate) {\n  var newDate = new ScheduleGrid(unixStartDate, unixEndDate);\n  newDate.setGrid();\n  console.log(newDate);\n}","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/components/SearchBox/Logic/setScheduleGrid.ts"],"names":["ScheduleGrid","unixStartDate","unixEndDate","startHour","hourDifference","templateAreas","columnAmount","endHour","stringHours","hourNumbers","numberofSquares","timeDifference","hours","Math","floor","numColumns","numberOfSquares","startDate","Date","endDate","getHours","square","rowString","repeat","hourCounter","startHourCounter","push","forEach","hour","setSquares","setHours","setGridTemplate","setHoursHeader","newDate","setGrid","console","log"],"mappings":"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","sourcesContent":["import { Dispatch } from \"react\";\r\n\r\nclass ScheduleGrid {\r\n  unixStartDate: number;\r\n  unixEndDate: number;\r\n  numberofSquares: number;\r\n  templateAreas: string;\r\n  startHour: number;\r\n  hourDifference: number;\r\n  columnAmount: number;\r\n  hourNumbers: number[];\r\n  endHour: number;\r\n  stringHours: string[];\r\n\r\n  constructor(unixStartDate, unixEndDate) {\r\n    this.unixStartDate = unixStartDate;\r\n    this.unixEndDate = unixEndDate;\r\n    this.startHour = 0;\r\n    this.hourDifference = 0;\r\n    this.templateAreas = \"\";\r\n    this.columnAmount = 0;\r\n    this.endHour = 0;\r\n    this.stringHours = [];\r\n    this.hourNumbers = [];\r\n    this.numberofSquares = 0;\r\n  }\r\n\r\n  private setSquares() {\r\n    const timeDifference: number = this.unixEndDate - this.unixStartDate;\r\n    const hours: number = Math.floor(timeDifference / 3600);\r\n    const numColumns: number = hours * 2 + 4;\r\n    const numberOfSquares: number = numColumns * 5;\r\n    this.numberofSquares = numberOfSquares;\r\n    this.columnAmount = numColumns;\r\n    this.hourDifference = hours;\r\n  }\r\n\r\n  private setHours() {\r\n    const startDate: Date = new Date(this.unixStartDate * 1000);\r\n    const endDate: Date = new Date(this.unixEndDate * 1000);\r\n\r\n    const startHour: number = startDate.getHours();\r\n    const endHour: number = endDate.getHours();\r\n\r\n    this.startHour = startHour;\r\n    this.endHour = endHour;\r\n  }\r\n\r\n  private setGridTemplate() {\r\n    const square: string = \"square \";\r\n    const rowString: string = `\"${square.repeat(\r\n      this.columnAmount - 1\r\n    )} square\"`;\r\n    this.templateAreas = `${rowString.repeat(5)}`;\r\n  }\r\n\r\n  private setHoursHeader() {\r\n    let hourCounter: number = 0;\r\n    let startHourCounter: number = this.startHour;\r\n\r\n    const hourNumbers: number[] = [];\r\n\r\n    while (hourCounter < this.hourDifference) {\r\n      hourNumbers.push(startHourCounter);\r\n      hourCounter++;\r\n      startHourCounter < 24 ? startHourCounter++ : (startHourCounter = 1);\r\n    }\r\n\r\n    const stringHours: string[] = [];\r\n\r\n    hourNumbers.forEach((hour) => {\r\n      if (hour === 24) {\r\n        return stringHours.push(\"12:00 a.m\");\r\n      } else if (hour === 12) {\r\n        return stringHours.push(\"12:00 p.m\");\r\n      } else {\r\n        return hour < 12\r\n          ? stringHours.push(`${hour}:00 a.m`)\r\n          : stringHours.push(`${hour - 12}:00 p.m`);\r\n      }\r\n    });\r\n    this.hourNumbers = hourNumbers;\r\n    this.stringHours = stringHours;\r\n  }\r\n\r\n  public setGrid() {\r\n    this.setSquares();\r\n    this.setHours();\r\n    this.setGridTemplate();\r\n    this.setHoursHeader();\r\n  }\r\n}\r\n\r\nexport default function setSquares(\r\n  unixStartDate: number,\r\n  unixEndDate: number\r\n): void {\r\n  const newDate = new ScheduleGrid(unixStartDate, unixEndDate);\r\n  newDate.setGrid();\r\n  console.log(newDate);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}