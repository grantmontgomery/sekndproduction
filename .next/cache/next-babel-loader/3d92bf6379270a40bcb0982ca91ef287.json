{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { Layout } from \"../../components\";\nexport default function Queried(props) {\n  console.log(props);\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 5\n    }\n  }, __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }\n  }), __jsx(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }\n  }));\n} // export const getServerSideProps: GetServerSideProps = async ({ params }) => {\n//   const {\n//     yelpBusinessesAPI,\n//   }: {\n//     yelpBusinessesAPI: ({}: { [key: string]: string }) => Error | Promise<any>;\n//   } = require(\"../../apicalls/yelpBusinessesAPI\");\n//   const checkURLIsString: string = params.queried.toString();\n//   const paramValueArray: string[] = checkURLIsString.split(\"+\");\n//   const searchParamsValues: { [key: string]: string } = {};\n//   paramValueArray.forEach((param) => {\n//     const indexOfEqual: number = param.search(\"=\");\n//     if (indexOfEqual === -1) return;\n//     else {\n//       const paramKey: string = param.substring(0, indexOfEqual);\n//       const paramValue: string = param.substring(indexOfEqual + 1);\n//       searchParamsValues[paramKey] = paramValue;\n//     }\n//   });\n//   const results = await yelpBusinessesAPI(searchParamsValues);\n//   return {\n//     props: { results },\n//   };\n// };\n\nQueried.getInitialProps = async ({\n  query\n}) => {\n  // const {\n  //   yelpBusinessesAPI,\n  // }: {\n  //   yelpBusinessesAPI: ({}: { [key: string]: string }) => Error | Promise<any>;\n  // } = require(\"../../apicalls/yelpBusinessesAPI\");\n  // const checkURLIsString: string = params.queried.toString();\n  // const paramValueArray: string[] = checkURLIsString.split(\"+\");\n  // const searchParamsValues: { [key: string]: string } = {};\n  // paramValueArray.forEach((param) => {\n  //   const indexOfEqual: number = param.search(\"=\");\n  //   if (indexOfEqual === -1) return;\n  //   else {\n  //     const paramKey: string = param.substring(0, indexOfEqual);\n  //     const paramValue: string = param.substring(indexOfEqual + 1);\n  //     searchParamsValues[paramKey] = paramValue;\n  //   }\n  // });\n  // const results = await yelpBusinessesAPI(searchParamsValues);\n  return {\n    props: query\n  };\n};","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","Layout","Queried","props","console","log","getInitialProps","query"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,MAAT,QAAuB,kBAAvB;AAEA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACrCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,SACE,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,C,CAED;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAEAD,OAAO,CAACI,eAAR,GAA0B,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAqB;AAC7C;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,SAAO;AACLJ,IAAAA,KAAK,EAAEI;AADF,GAAP;AAGD,CA3BD","sourcesContent":["import * as React from \"react\";\r\nimport { GetServerSideProps } from \"next\";\r\nimport { Layout } from \"../../components\";\r\n\r\nexport default function Queried(props) {\r\n  console.log(props);\r\n  return (\r\n    <React.Fragment>\r\n      <Layout></Layout>\r\n      <main></main>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\n// export const getServerSideProps: GetServerSideProps = async ({ params }) => {\r\n//   const {\r\n//     yelpBusinessesAPI,\r\n//   }: {\r\n//     yelpBusinessesAPI: ({}: { [key: string]: string }) => Error | Promise<any>;\r\n//   } = require(\"../../apicalls/yelpBusinessesAPI\");\r\n\r\n//   const checkURLIsString: string = params.queried.toString();\r\n//   const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n//   const searchParamsValues: { [key: string]: string } = {};\r\n\r\n//   paramValueArray.forEach((param) => {\r\n//     const indexOfEqual: number = param.search(\"=\");\r\n//     if (indexOfEqual === -1) return;\r\n//     else {\r\n//       const paramKey: string = param.substring(0, indexOfEqual);\r\n//       const paramValue: string = param.substring(indexOfEqual + 1);\r\n//       searchParamsValues[paramKey] = paramValue;\r\n//     }\r\n//   });\r\n\r\n//   const results = await yelpBusinessesAPI(searchParamsValues);\r\n\r\n//   return {\r\n//     props: { results },\r\n//   };\r\n// };\r\n\r\nQueried.getInitialProps = async ({ query }) => {\r\n  // const {\r\n  //   yelpBusinessesAPI,\r\n  // }: {\r\n  //   yelpBusinessesAPI: ({}: { [key: string]: string }) => Error | Promise<any>;\r\n  // } = require(\"../../apicalls/yelpBusinessesAPI\");\r\n\r\n  // const checkURLIsString: string = params.queried.toString();\r\n  // const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n  // const searchParamsValues: { [key: string]: string } = {};\r\n\r\n  // paramValueArray.forEach((param) => {\r\n  //   const indexOfEqual: number = param.search(\"=\");\r\n  //   if (indexOfEqual === -1) return;\r\n  //   else {\r\n  //     const paramKey: string = param.substring(0, indexOfEqual);\r\n  //     const paramValue: string = param.substring(indexOfEqual + 1);\r\n  //     searchParamsValues[paramKey] = paramValue;\r\n  //   }\r\n  // });\r\n\r\n  // const results = await yelpBusinessesAPI(searchParamsValues);\r\n\r\n  return {\r\n    props: query,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}