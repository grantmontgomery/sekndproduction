{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { Layout, ResultCard } from \"../../components\";\nimport { yelpBusinessesCall, yelpEventsCall, ticketMasterCall } from \"../../apicalls\";\nimport css from \"../../styles/Queried.module.scss\";\nexport default function Queried(_ref) {\n  _s();\n\n  var _this = this;\n\n  var _ref$results = _ref.results,\n      items = _ref$results.items,\n      errors = _ref$results.errors,\n      searchType = _ref.searchType,\n      queried = _ref.queried,\n      asPath = _ref.asPath,\n      pathname = _ref.pathname;\n\n  var _React$useState = React.useState({\n    resultsType: \"Events\"\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  console.log(queried);\n  console.log(asPath);\n  console.log(pathname);\n  console.log(items);\n\n  var determineItems = function determineItems() {\n    if (!items) return null;\n\n    switch (searchType) {\n      case \"ALL\":\n        if (Array.isArray(items.places) && Array.isArray(items.events)) {\n          return state.resultsType === \"Places\" ? items.places.map(function (item) {\n            return __jsx(ResultCard, {\n              key: item.id,\n              item: item,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 32,\n                columnNumber: 17\n              }\n            });\n          }) : items.events.map(function (item) {\n            return __jsx(ResultCard, {\n              key: item.id,\n              item: item,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 35,\n                columnNumber: 17\n              }\n            });\n          });\n        } else {\n          return null;\n        }\n\n      case \"PLACES\":\n        return Array.isArray(items.places) ? items.places.map(function (item) {\n          return __jsx(ResultCard, {\n            key: item.id,\n            item: item,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 15\n            }\n          });\n        }) : null;\n\n      case \"EVENTS\":\n        return Array.isArray(items.events) ? items.events.map(function (item) {\n          return __jsx(ResultCard, {\n            key: item.id,\n            item: item,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 15\n            }\n          });\n        }) : null;\n\n      default:\n        if (Array.isArray(items.places) && Array.isArray(items.events)) {\n          return state.resultsType === \"Places\" ? items.places.map(function (item) {\n            return __jsx(ResultCard, {\n              key: item.id,\n              item: item,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 17\n              }\n            });\n          }) : items.events.map(function (item) {\n            return __jsx(ResultCard, {\n              key: item.id,\n              item: item,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 17\n              }\n            });\n          });\n        } else {\n          return null;\n        }\n\n    }\n  }; // React.useEffect(() => {\n  //   if (searchType) {\n  //     switch (searchType) {\n  //       case \"ALL\":\n  //         return setState({ resultsType: \"Places\" });\n  //       case \"EVENTS\":\n  //         return setState({ resultsType: \"Events\" });\n  //     }\n  //   }\n  // });\n\n\n  var setTypeButtons = function setTypeButtons() {\n    if (searchType) {\n      switch (searchType) {\n        case \"ALL\":\n          return __jsx(React.Fragment, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 13\n            }\n          }, __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: function onClick() {\n              return setState({\n                resultsType: \"Places\"\n              });\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 15\n            }\n          }, \"Places\"), __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: function onClick() {\n              return setState({\n                resultsType: \"Events\"\n              });\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 15\n            }\n          }, \"Events\"));\n\n        case \"PLACES\":\n          return __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: function onClick() {\n              return setState({\n                resultsType: \"Places\"\n              });\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 13\n            }\n          }, \"Places\");\n\n        case \"EVENTS\":\n          return __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: function onClick() {\n              return setState({\n                resultsType: \"Events\"\n              });\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 13\n            }\n          }, \"Events\");\n\n        default:\n          return __jsx(React.Fragment, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 13\n            }\n          }, __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: function onClick() {\n              return setState({\n                resultsType: \"Places\"\n              });\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 15\n            }\n          }, \"Places\"), __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: function onClick() {\n              return setState({\n                resultsType: \"Events\"\n              });\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 15\n            }\n          }, \"Events\"));\n      }\n    } else {\n      return __jsx(React.Fragment, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 9\n        }\n      }, __jsx(\"button\", {\n        className: css.typeButton,\n        onClick: function onClick() {\n          return setState({\n            resultsType: \"Places\"\n          });\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }\n      }, \"Places\"), __jsx(\"button\", {\n        className: css.typeButton,\n        onClick: function onClick() {\n          return setState({\n            resultsType: \"Events\"\n          });\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }\n      }, \"Events\"));\n    }\n  };\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 5\n    }\n  }, __jsx(\"main\", {\n    className: css.queriedPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }, __jsx(\"section\", {\n    className: css.queryDisplay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }), __jsx(\"section\", {\n    className: css.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, setTypeButtons(), __jsx(\"button\", {\n    className: css.sort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  }, \"Sort\")), __jsx(\"section\", {\n    className: css.results,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: css.resultsSlider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 11\n    }\n  }, determineItems()))));\n}\n\n_s(Queried, \"re+IQ5ru8i+EzlqBUuC4ZMmC1jk=\");\n\n_c = Queried;\n\nQueried.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref2) {\n    var query, pathname, asPath, location, radius, placeType, startFormatted, endFormatted, unixStartDate, unixEndDate, eventsCategory, queried, checkURLIsString, paramValueArray, searchParamsValues, APICalls, callAPIS, results;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            query = _ref2.query, pathname = _ref2.pathname, asPath = _ref2.asPath;\n            location = query.location, radius = query.radius, placeType = query.placeType, startFormatted = query.startFormatted, endFormatted = query.endFormatted, unixStartDate = query.unixStartDate, unixEndDate = query.unixEndDate, eventsCategory = query.eventsCategory, queried = query.queried;\n            console.log(pathname);\n            console.log(queried);\n            console.log(asPath);\n\n            if (!query.queried) {\n              _context5.next = 18;\n              break;\n            }\n\n            checkURLIsString = query.queried.toString();\n            paramValueArray = checkURLIsString.split(\"+\");\n            searchParamsValues = {};\n            paramValueArray.forEach(function (param) {\n              var indexOfEqual = param.search(\"=\");\n              if (indexOfEqual === -1) return;else {\n                var paramKey = param.substring(0, indexOfEqual);\n                var paramValue = param.substring(indexOfEqual + 1);\n                searchParamsValues[paramKey] = paramValue;\n              }\n            });\n\n            APICalls = /*#__PURE__*/function () {\n              function APICalls(searchParams) {\n                _classCallCheck(this, APICalls);\n\n                _defineProperty(this, \"searchParams\", void 0);\n\n                _defineProperty(this, \"results\", void 0);\n\n                this.searchParams = searchParams;\n                this.results = {\n                  items: {\n                    places: [],\n                    events: []\n                  },\n                  errors: {\n                    yelpPlaces: \"\",\n                    yelpEvents: \"\",\n                    ticketmaster: \"\"\n                  }\n                };\n              }\n\n              _createClass(APICalls, [{\n                key: \"yelpBusinesses\",\n                value: function () {\n                  var _yelpBusinesses = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                    var yelpBusinessesResponse;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return yelpBusinessesCall(this.searchParams);\n\n                          case 2:\n                            yelpBusinessesResponse = _context.sent;\n                            Array.isArray(yelpBusinessesResponse) ? this.results.items.places = yelpBusinessesResponse : this.results.errors.yelpPlaces = \"\".concat(yelpBusinessesResponse);\n\n                          case 4:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, this);\n                  }));\n\n                  function yelpBusinesses() {\n                    return _yelpBusinesses.apply(this, arguments);\n                  }\n\n                  return yelpBusinesses;\n                }()\n              }, {\n                key: \"yelpEvents\",\n                value: function () {\n                  var _yelpEvents = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                    var yelpEventsResponse;\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _context2.next = 2;\n                            return yelpEventsCall(this.searchParams);\n\n                          case 2:\n                            yelpEventsResponse = _context2.sent;\n                            Array.isArray(yelpEventsResponse) ? this.results.items.events = [].concat(_toConsumableArray(this.results.items.events), _toConsumableArray(yelpEventsResponse)) : this.results.errors.yelpEvents = \"\".concat(yelpEventsResponse);\n\n                          case 4:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, this);\n                  }));\n\n                  function yelpEvents() {\n                    return _yelpEvents.apply(this, arguments);\n                  }\n\n                  return yelpEvents;\n                }()\n              }, {\n                key: \"ticketMaster\",\n                value: function () {\n                  var _ticketMaster = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                    var ticketMasterResponse;\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            _context3.next = 2;\n                            return ticketMasterCall(this.searchParams);\n\n                          case 2:\n                            ticketMasterResponse = _context3.sent;\n                            Array.isArray(ticketMasterResponse) ? this.results.items.events = [].concat(_toConsumableArray(this.results.items.events), _toConsumableArray(ticketMasterResponse)) : this.results.errors.ticketmaster = \"\".concat(ticketMasterResponse);\n\n                          case 4:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3, this);\n                  }));\n\n                  function ticketMaster() {\n                    return _ticketMaster.apply(this, arguments);\n                  }\n\n                  return ticketMaster;\n                }()\n              }]);\n\n              return APICalls;\n            }();\n\n            callAPIS = /*#__PURE__*/function () {\n              var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(searchType) {\n                var APICall;\n                return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                  while (1) {\n                    switch (_context4.prev = _context4.next) {\n                      case 0:\n                        APICall = new APICalls(searchParamsValues);\n                        _context4.prev = 1;\n                        _context4.t0 = searchType;\n                        _context4.next = _context4.t0 === \"PLACES\" ? 5 : _context4.t0 === \"EVENTS\" ? 7 : _context4.t0 === \"ALL\" ? 10 : 14;\n                        break;\n\n                      case 5:\n                        APICall.yelpBusinesses();\n                        return _context4.abrupt(\"return\", APICall.results);\n\n                      case 7:\n                        APICall.yelpEvents();\n                        APICall.ticketMaster();\n                        return _context4.abrupt(\"return\", APICall.results);\n\n                      case 10:\n                        APICall.yelpBusinesses();\n                        APICall.yelpEvents();\n                        APICall.ticketMaster();\n                        return _context4.abrupt(\"return\", APICall.results);\n\n                      case 14:\n                        APICall.yelpBusinesses();\n                        APICall.yelpEvents();\n                        APICall.ticketMaster();\n                        return _context4.abrupt(\"return\", APICall.results);\n\n                      case 18:\n                        _context4.next = 26;\n                        break;\n\n                      case 20:\n                        _context4.prev = 20;\n                        _context4.t1 = _context4[\"catch\"](1);\n                        APICall.results.errors.yelpPlaces = \"CALL ERROR\";\n                        APICall.results.errors.yelpEvents = \"CALL ERROR\";\n                        APICall.results.errors.ticketmaster = \"CALL ERROR\";\n                        return _context4.abrupt(\"return\", APICall.results);\n\n                      case 26:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }\n                }, _callee4, null, [[1, 20]]);\n              }));\n\n              return function callAPIS(_x2) {\n                return _ref4.apply(this, arguments);\n              };\n            }();\n\n            _context5.next = 14;\n            return callAPIS(searchParamsValues.searchType);\n\n          case 14:\n            results = _context5.sent;\n            return _context5.abrupt(\"return\", {\n              results: results,\n              searchType: searchParamsValues.searchType,\n              pathname: pathname,\n              queried: queried,\n              asPath: asPath\n            });\n\n          case 18:\n            return _context5.abrupt(\"return\", {\n              results: {},\n              searchType: \"ALL\",\n              pathname: pathname,\n              queried: queried,\n              asPath: asPath\n            });\n\n          case 19:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar _c;\n\n$RefreshReg$(_c, \"Queried\");","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","Layout","ResultCard","yelpBusinessesCall","yelpEventsCall","ticketMasterCall","css","Queried","results","items","errors","searchType","queried","asPath","pathname","useState","resultsType","state","setState","console","log","determineItems","Array","isArray","places","events","map","item","id","setTypeButtons","typeButton","queriedPage","queryDisplay","header","sort","resultsSlider","getInitialProps","query","location","radius","placeType","startFormatted","endFormatted","unixStartDate","unixEndDate","eventsCategory","checkURLIsString","toString","paramValueArray","split","searchParamsValues","forEach","param","indexOfEqual","search","paramKey","substring","paramValue","APICalls","searchParams","yelpPlaces","yelpEvents","ticketmaster","yelpBusinessesResponse","yelpEventsResponse","ticketMasterResponse","callAPIS","APICall","yelpBusinesses","ticketMaster"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { Layout, ResultCard } from \"../../components\";\r\nimport {\r\n  yelpBusinessesCall,\r\n  yelpEventsCall,\r\n  ticketMasterCall,\r\n} from \"../../apicalls\";\r\nimport css from \"../../styles/Queried.module.scss\";\r\n\r\nexport default function Queried({\r\n  results: { items, errors },\r\n  searchType,\r\n  queried,\r\n  asPath,\r\n  pathname,\r\n}): JSX.Element {\r\n  const [state, setState] = React.useState({ resultsType: \"Events\" });\r\n\r\n  console.log(queried);\r\n  console.log(asPath);\r\n  console.log(pathname);\r\n\r\n  console.log(items);\r\n\r\n  const determineItems: () => JSX.Element | null = () => {\r\n    if (!items) return null;\r\n    switch (searchType) {\r\n      case \"ALL\":\r\n        if (Array.isArray(items.places) && Array.isArray(items.events)) {\r\n          return state.resultsType === \"Places\"\r\n            ? items.places.map((item) => (\r\n                <ResultCard key={item.id} item={item}></ResultCard>\r\n              ))\r\n            : items.events.map((item) => (\r\n                <ResultCard key={item.id} item={item}></ResultCard>\r\n              ));\r\n        } else {\r\n          return null;\r\n        }\r\n\r\n      case \"PLACES\":\r\n        return Array.isArray(items.places)\r\n          ? items.places.map((item) => (\r\n              <ResultCard key={item.id} item={item}></ResultCard>\r\n            ))\r\n          : null;\r\n      case \"EVENTS\":\r\n        return Array.isArray(items.events)\r\n          ? items.events.map((item) => (\r\n              <ResultCard key={item.id} item={item}></ResultCard>\r\n            ))\r\n          : null;\r\n      default:\r\n        if (Array.isArray(items.places) && Array.isArray(items.events)) {\r\n          return state.resultsType === \"Places\"\r\n            ? items.places.map((item) => (\r\n                <ResultCard key={item.id} item={item}></ResultCard>\r\n              ))\r\n            : items.events.map((item) => (\r\n                <ResultCard key={item.id} item={item}></ResultCard>\r\n              ));\r\n        } else {\r\n          return null;\r\n        }\r\n    }\r\n  };\r\n\r\n  // React.useEffect(() => {\r\n  //   if (searchType) {\r\n  //     switch (searchType) {\r\n  //       case \"ALL\":\r\n  //         return setState({ resultsType: \"Places\" });\r\n  //       case \"EVENTS\":\r\n  //         return setState({ resultsType: \"Events\" });\r\n  //     }\r\n  //   }\r\n  // });\r\n\r\n  const setTypeButtons: () => JSX.Element = () => {\r\n    if (searchType) {\r\n      switch (searchType) {\r\n        case \"ALL\":\r\n          return (\r\n            <React.Fragment>\r\n              <button\r\n                className={css.typeButton}\r\n                onClick={() => setState({ resultsType: \"Places\" })}\r\n              >\r\n                Places\r\n              </button>\r\n              <button\r\n                className={css.typeButton}\r\n                onClick={() => setState({ resultsType: \"Events\" })}\r\n              >\r\n                Events\r\n              </button>\r\n            </React.Fragment>\r\n          );\r\n        case \"PLACES\":\r\n          return (\r\n            <button\r\n              className={css.typeButton}\r\n              onClick={() => setState({ resultsType: \"Places\" })}\r\n            >\r\n              Places\r\n            </button>\r\n          );\r\n\r\n        case \"EVENTS\":\r\n          return (\r\n            <button\r\n              className={css.typeButton}\r\n              onClick={() => setState({ resultsType: \"Events\" })}\r\n            >\r\n              Events\r\n            </button>\r\n          );\r\n        default:\r\n          return (\r\n            <React.Fragment>\r\n              <button\r\n                className={css.typeButton}\r\n                onClick={() => setState({ resultsType: \"Places\" })}\r\n              >\r\n                Places\r\n              </button>\r\n              <button\r\n                className={css.typeButton}\r\n                onClick={() => setState({ resultsType: \"Events\" })}\r\n              >\r\n                Events\r\n              </button>\r\n            </React.Fragment>\r\n          );\r\n      }\r\n    } else {\r\n      return (\r\n        <React.Fragment>\r\n          <button\r\n            className={css.typeButton}\r\n            onClick={() => setState({ resultsType: \"Places\" })}\r\n          >\r\n            Places\r\n          </button>\r\n          <button\r\n            className={css.typeButton}\r\n            onClick={() => setState({ resultsType: \"Events\" })}\r\n          >\r\n            Events\r\n          </button>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <main className={css.queriedPage}>\r\n        <section className={css.queryDisplay}></section>\r\n        <section className={css.header}>\r\n          {setTypeButtons()}\r\n          <button className={css.sort}>Sort</button>\r\n        </section>\r\n        <section className={css.results}>\r\n          <div className={css.resultsSlider}>{determineItems()}</div>\r\n        </section>\r\n      </main>\r\n    </Layout>\r\n  );\r\n}\r\n\r\ntype Results = {\r\n  items: { places: { [key: string]: any }[]; events: { [key: string]: any }[] };\r\n  errors: { yelpPlaces: string; yelpEvents: string; ticketmaster: string };\r\n};\r\n\r\ntype APIResponse = Promise<{ [key: string]: any }[] | string>;\r\n\r\ntype SearchParams = { [key: string]: any };\r\n\r\nQueried.getInitialProps = async ({\r\n  query,\r\n  pathname,\r\n  asPath,\r\n}): Promise<{\r\n  results: any;\r\n  searchType: string;\r\n  pathname: string;\r\n  queried: string;\r\n  asPath: string;\r\n}> => {\r\n  const {\r\n    location,\r\n    radius,\r\n    placeType,\r\n    startFormatted,\r\n    endFormatted,\r\n    unixStartDate,\r\n    unixEndDate,\r\n    eventsCategory,\r\n    queried,\r\n  } = query;\r\n  console.log(pathname);\r\n  console.log(queried);\r\n  console.log(asPath);\r\n  if (query.queried) {\r\n    const checkURLIsString: string = query.queried.toString();\r\n    const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n    const searchParamsValues: SearchParams = {};\r\n\r\n    paramValueArray.forEach((param) => {\r\n      const indexOfEqual: number = param.search(\"=\");\r\n      if (indexOfEqual === -1) return;\r\n      else {\r\n        const paramKey: string = param.substring(0, indexOfEqual);\r\n        const paramValue: string = param.substring(indexOfEqual + 1);\r\n        searchParamsValues[paramKey] = paramValue;\r\n      }\r\n    });\r\n\r\n    class APICalls {\r\n      searchParams: SearchParams;\r\n      results: Results;\r\n      constructor(searchParams: SearchParams) {\r\n        this.searchParams = searchParams;\r\n        this.results = {\r\n          items: { places: [], events: [] },\r\n          errors: { yelpPlaces: \"\", yelpEvents: \"\", ticketmaster: \"\" },\r\n        };\r\n      }\r\n\r\n      public async yelpBusinesses() {\r\n        const yelpBusinessesResponse: APIResponse = await yelpBusinessesCall(\r\n          this.searchParams\r\n        );\r\n        Array.isArray(yelpBusinessesResponse)\r\n          ? (this.results.items.places = yelpBusinessesResponse)\r\n          : (this.results.errors.yelpPlaces = `${yelpBusinessesResponse}`);\r\n      }\r\n      public async yelpEvents() {\r\n        const yelpEventsResponse: APIResponse = await yelpEventsCall(\r\n          this.searchParams\r\n        );\r\n        Array.isArray(yelpEventsResponse)\r\n          ? (this.results.items.events = [\r\n              ...this.results.items.events,\r\n              ...yelpEventsResponse,\r\n            ])\r\n          : (this.results.errors.yelpEvents = `${yelpEventsResponse}`);\r\n      }\r\n      public async ticketMaster() {\r\n        const ticketMasterResponse: APIResponse = await ticketMasterCall(\r\n          this.searchParams\r\n        );\r\n        Array.isArray(ticketMasterResponse)\r\n          ? (this.results.items.events = [\r\n              ...this.results.items.events,\r\n              ...ticketMasterResponse,\r\n            ])\r\n          : (this.results.errors.ticketmaster = `${ticketMasterResponse}`);\r\n      }\r\n    }\r\n\r\n    const callAPIS: (searchType: string) => Promise<Results> = async (\r\n      searchType\r\n    ) => {\r\n      const APICall = new APICalls(searchParamsValues);\r\n\r\n      try {\r\n        switch (searchType) {\r\n          case \"PLACES\":\r\n            APICall.yelpBusinesses();\r\n\r\n            return APICall.results;\r\n\r\n          case \"EVENTS\":\r\n            APICall.yelpEvents();\r\n            APICall.ticketMaster();\r\n            return APICall.results;\r\n          case \"ALL\":\r\n            APICall.yelpBusinesses();\r\n            APICall.yelpEvents();\r\n            APICall.ticketMaster();\r\n            return APICall.results;\r\n          default:\r\n            APICall.yelpBusinesses();\r\n            APICall.yelpEvents();\r\n            APICall.ticketMaster();\r\n            return APICall.results;\r\n        }\r\n      } catch {\r\n        APICall.results.errors.yelpPlaces = \"CALL ERROR\";\r\n        APICall.results.errors.yelpEvents = \"CALL ERROR\";\r\n        APICall.results.errors.ticketmaster = \"CALL ERROR\";\r\n        return APICall.results;\r\n      }\r\n    };\r\n\r\n    const results: Results = await callAPIS(searchParamsValues.searchType);\r\n\r\n    return {\r\n      results,\r\n      searchType: searchParamsValues.searchType,\r\n      pathname,\r\n      queried,\r\n      asPath,\r\n    };\r\n  } else {\r\n    return { results: {}, searchType: \"ALL\", pathname, queried, asPath };\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}