{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { Layout, ResultCard } from \"../../components\";\nimport { yelpBusinessesCall } from \"../../apicalls\";\nimport css from \"../../styles/Queried.module.scss\";\nexport default function Queried({\n  results\n}) {\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, __jsx(\"main\", {\n    className: css.queriedPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }, __jsx(\"section\", {\n    className: css.queryDisplay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }), __jsx(\"section\", {\n    className: css.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }), __jsx(\"section\", {\n    className: css.results,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: css.resultsSlider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 11\n    }\n  }, typeof results === \"object\" ? results.map(business => {\n    return __jsx(ResultCard, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 26\n      }\n    });\n  }) : null))));\n}\n\nQueried.getInitialProps = async ({\n  query\n}) => {\n  if (query.queried) {\n    const checkURLIsString = query.queried.toString();\n    const paramValueArray = checkURLIsString.split(\"+\");\n    const searchParamsValues = {};\n    paramValueArray.forEach(param => {\n      const indexOfEqual = param.search(\"=\");\n      if (indexOfEqual === -1) return;else {\n        const paramKey = param.substring(0, indexOfEqual);\n        const paramValue = param.substring(indexOfEqual + 1);\n        searchParamsValues[paramKey] = paramValue;\n      }\n    });\n    const apiResponse = await yelpBusinessesCall(searchParamsValues);\n    const apiJSON = await apiResponse.json();\n    const apiObject = {\n      apiJSON\n    };\n    return {\n      results: apiObject\n    };\n  } else {\n    return {\n      results: {}\n    };\n  }\n};","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","Layout","ResultCard","yelpBusinessesCall","css","Queried","results","queriedPage","queryDisplay","header","resultsSlider","map","business","getInitialProps","query","queried","checkURLIsString","toString","paramValueArray","split","searchParamsValues","forEach","param","indexOfEqual","search","paramKey","substring","paramValue","apiResponse","apiJSON","json","apiObject"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,EAAiBC,UAAjB,QAAmC,kBAAnC;AACA,SACEC,kBADF,QAIO,gBAJP;AAKA,OAAOC,GAAP,MAAgB,kCAAhB;AAEA,eAAe,SAASC,OAAT,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAA2C;AACxD,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAEF,GAAG,CAACG,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAS,IAAA,SAAS,EAAEH,GAAG,CAACI,YAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAS,IAAA,SAAS,EAAEJ,GAAG,CAACK,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAS,IAAA,SAAS,EAAEL,GAAG,CAACE,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAEF,GAAG,CAACM,aAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,OAAOJ,OAAP,KAAmB,QAAnB,GACGA,OAAO,CAACK,GAAR,CAAaC,QAAD,IAAc;AACxB,WAAO,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFD,CADH,GAIG,IALN,CADF,CAHF,CADF,CADF;AAiBD;;AAEDP,OAAO,CAACQ,eAAR,GAA0B,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAgD;AACxE,MAAIA,KAAK,CAACC,OAAV,EAAmB;AACjB,UAAMC,gBAAwB,GAAGF,KAAK,CAACC,OAAN,CAAcE,QAAd,EAAjC;AACA,UAAMC,eAAyB,GAAGF,gBAAgB,CAACG,KAAjB,CAAuB,GAAvB,CAAlC;AAEA,UAAMC,kBAA6C,GAAG,EAAtD;AAEAF,IAAAA,eAAe,CAACG,OAAhB,CAAyBC,KAAD,IAAW;AACjC,YAAMC,YAAoB,GAAGD,KAAK,CAACE,MAAN,CAAa,GAAb,CAA7B;AACA,UAAID,YAAY,KAAK,CAAC,CAAtB,EAAyB,OAAzB,KACK;AACH,cAAME,QAAgB,GAAGH,KAAK,CAACI,SAAN,CAAgB,CAAhB,EAAmBH,YAAnB,CAAzB;AACA,cAAMI,UAAkB,GAAGL,KAAK,CAACI,SAAN,CAAgBH,YAAY,GAAG,CAA/B,CAA3B;AACAH,QAAAA,kBAAkB,CAACK,QAAD,CAAlB,GAA+BE,UAA/B;AACD;AACF,KARD;AAUA,UAAMC,WAAqB,GAAG,MAAMzB,kBAAkB,CAACiB,kBAAD,CAAtD;AACA,UAAMS,OAAa,GAAG,MAAMD,WAAW,CAACE,IAAZ,EAA5B;AACA,UAAMC,SAAa,GAAG;AAAEF,MAAAA;AAAF,KAAtB;AACA,WAAO;AAAEvB,MAAAA,OAAO,EAAEyB;AAAX,KAAP;AACD,GApBD,MAoBO;AACL,WAAO;AAAEzB,MAAAA,OAAO,EAAE;AAAX,KAAP;AACD;AACF,CAxBD","sourcesContent":["import * as React from \"react\";\r\nimport { Layout, ResultCard } from \"../../components\";\r\nimport {\r\n  yelpBusinessesCall,\r\n  yelpEventsCall,\r\n  ticketMasterCall,\r\n} from \"../../apicalls\";\r\nimport css from \"../../styles/Queried.module.scss\";\r\n\r\nexport default function Queried({ results }): JSX.Element {\r\n  return (\r\n    <Layout>\r\n      <main className={css.queriedPage}>\r\n        <section className={css.queryDisplay}></section>\r\n        <section className={css.header}></section>\r\n        <section className={css.results}>\r\n          <div className={css.resultsSlider}>\r\n            {typeof results === \"object\"\r\n              ? results.map((business) => {\r\n                  return <ResultCard></ResultCard>;\r\n                })\r\n              : null}\r\n          </div>\r\n        </section>\r\n      </main>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nQueried.getInitialProps = async ({ query }): Promise<{ results: any }> => {\r\n  if (query.queried) {\r\n    const checkURLIsString: string = query.queried.toString();\r\n    const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n    const searchParamsValues: { [key: string]: string } = {};\r\n\r\n    paramValueArray.forEach((param) => {\r\n      const indexOfEqual: number = param.search(\"=\");\r\n      if (indexOfEqual === -1) return;\r\n      else {\r\n        const paramKey: string = param.substring(0, indexOfEqual);\r\n        const paramValue: string = param.substring(indexOfEqual + 1);\r\n        searchParamsValues[paramKey] = paramValue;\r\n      }\r\n    });\r\n\r\n    const apiResponse: Response = await yelpBusinessesCall(searchParamsValues);\r\n    const apiJSON: JSON = await apiResponse.json();\r\n    const apiObject: {} = { apiJSON };\r\n    return { results: apiObject };\r\n  } else {\r\n    return { results: {} };\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}