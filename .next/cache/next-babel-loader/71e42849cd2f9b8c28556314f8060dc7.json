{"ast":null,"code":"var __jsx = React.createElement;\nimport * as React from \"react\";\n\nconst squaresReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_SQUARES\":\n      return {\n        squares: [...new Array(action.payload.numberOfSquares)].map(() => ({\n          part: null\n        }))\n      };\n\n    case \"ADD_PART_TO_SQUARE\":\n      return {\n        squares: state.squares.map((square, i) => {\n          return i !== action.payload.index ? square : {\n            part: action.payload.part\n          };\n        })\n      };\n\n    case \"REMOVE_PART_FROM_SQUARE\":\n      return {\n        squares: state.squares.map((square, i) => {\n          return i !== action.payload.index ? {\n            part: action.payload.part\n          } : square;\n        })\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst SquaresContext = /*#__PURE__*/React.createContext(undefined);\nconst SquaresDispatch = /*#__PURE__*/React.createContext(undefined);\nexport const SquaresProvider = ({\n  children\n}) => {\n  const [state, dispatch] = React.useReducer(squaresReducer, {\n    squares: []\n  });\n  return __jsx(SquaresContext.Provider, {\n    value: state\n  }, __jsx(SquaresDispatch.Provider, {\n    value: dispatch\n  }, children));\n};\nexport const useSquaresState = () => {\n  const context = React.useContext(SquaresContext);\n\n  if (context === undefined) {\n    throw new Error(\"Please use within Squares Provider\");\n  }\n\n  return context;\n};\nexport const useSquaresDispatch = () => {\n  const context = React.useContext(SquaresDispatch);\n\n  if (context === undefined) {\n    throw new Error(\"Please use within Squares Provider\");\n  }\n\n  return context;\n};","map":null,"metadata":{},"sourceType":"module"}