{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nclass ScheduleGrid {\n  constructor(unixStartDate, unixEndDate) {\n    _defineProperty(this, \"unixStartDate\", void 0);\n\n    _defineProperty(this, \"unixEndDate\", void 0);\n\n    _defineProperty(this, \"numberofSquares\", void 0);\n\n    _defineProperty(this, \"templateAreas\", void 0);\n\n    _defineProperty(this, \"startHour\", void 0);\n\n    _defineProperty(this, \"hourDifference\", void 0);\n\n    _defineProperty(this, \"columnAmount\", void 0);\n\n    _defineProperty(this, \"hourNumbers\", void 0);\n\n    _defineProperty(this, \"endHour\", void 0);\n\n    _defineProperty(this, \"stringHours\", void 0);\n\n    this.unixStartDate = unixStartDate;\n    this.unixEndDate = unixEndDate;\n    this.startHour = 0;\n    this.hourDifference = 0;\n    this.templateAreas = \"\";\n    this.columnAmount = 0;\n    this.endHour = 0;\n    this.stringHours = [];\n    this.hourNumbers = [];\n    this.numberofSquares = 0;\n  }\n\n  setSquares() {\n    const timeDifference = this.unixEndDate - this.unixStartDate;\n    const hours = Math.floor(timeDifference / 3600);\n    const numColumns = hours * 2 + 4;\n    const numberOfSquares = numColumns * 5;\n    this.numberofSquares = numberOfSquares;\n    this.columnAmount = numColumns;\n    this.hourDifference = hours;\n  }\n\n  setHours() {\n    const startDate = new Date(this.unixStartDate * 1000);\n    const endDate = new Date(this.unixEndDate * 1000);\n    const startHour = startDate.getHours();\n    const endHour = endDate.getHours();\n    this.startHour = startHour;\n    this.endHour = endHour;\n  }\n\n  setGridTemplate() {\n    const square = \"square \";\n    const rowString = `\"${square.repeat(this.columnAmount - 1)} square\"`;\n    this.templateAreas = `${rowString.repeat(5)}`;\n  }\n\n  setHoursHeader() {\n    let hourCounter = 0;\n    let startHourCounter = this.startHour;\n    const hourNumbers = [];\n\n    while (hourCounter < this.hourDifference) {\n      hourNumbers.push(startHourCounter);\n      hourCounter++;\n      return startHourCounter < 24 ? startHourCounter++ : startHourCounter = 0;\n    }\n\n    const stringHours = [];\n    hourNumbers.forEach(hour => {\n      if (hour === 24) stringHours.push(\"12:00 a.m\");\n      if (hour === 12) stringHours.push(\"12:00 p.m\");\n      return hour > 12 ? stringHours.push(`${hour}:00 a.m`) : stringHours.push(`${hour - 12}:00 p.m`);\n    });\n    this.hourNumbers = hourNumbers;\n    this.stringHours = stringHours;\n  }\n\n  setGrid() {\n    this.setSquares();\n    this.setHours();\n    this.setGridTemplate();\n    this.setHoursHeader();\n  }\n\n}\n\nexport default function setSquares(unixStartDate, unixEndDate) {\n  const newDate = new ScheduleGrid(unixStartDate, unixEndDate);\n  newDate.setGrid();\n  console.log(newDate);\n}","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/components/SearchBox/Logic/setScheduleGrid.ts"],"names":["ScheduleGrid","constructor","unixStartDate","unixEndDate","startHour","hourDifference","templateAreas","columnAmount","endHour","stringHours","hourNumbers","numberofSquares","setSquares","timeDifference","hours","Math","floor","numColumns","numberOfSquares","setHours","startDate","Date","endDate","getHours","setGridTemplate","square","rowString","repeat","setHoursHeader","hourCounter","startHourCounter","push","forEach","hour","setGrid","newDate","console","log"],"mappings":"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","sourcesContent":["import { Dispatch } from \"react\";\r\n\r\nclass ScheduleGrid {\r\n  unixStartDate: number;\r\n  unixEndDate: number;\r\n  numberofSquares: number;\r\n  templateAreas: string;\r\n  startHour: number;\r\n  hourDifference: number;\r\n  columnAmount: number;\r\n  hourNumbers: number[];\r\n  endHour: number;\r\n  stringHours: string[];\r\n\r\n  constructor(unixStartDate, unixEndDate) {\r\n    this.unixStartDate = unixStartDate;\r\n    this.unixEndDate = unixEndDate;\r\n    this.startHour = 0;\r\n    this.hourDifference = 0;\r\n    this.templateAreas = \"\";\r\n    this.columnAmount = 0;\r\n    this.endHour = 0;\r\n    this.stringHours = [];\r\n    this.hourNumbers = [];\r\n    this.numberofSquares = 0;\r\n  }\r\n\r\n  private setSquares() {\r\n    const timeDifference: number = this.unixEndDate - this.unixStartDate;\r\n    const hours: number = Math.floor(timeDifference / 3600);\r\n    const numColumns: number = hours * 2 + 4;\r\n    const numberOfSquares: number = numColumns * 5;\r\n    this.numberofSquares = numberOfSquares;\r\n    this.columnAmount = numColumns;\r\n    this.hourDifference = hours;\r\n  }\r\n\r\n  private setHours() {\r\n    const startDate: Date = new Date(this.unixStartDate * 1000);\r\n    const endDate: Date = new Date(this.unixEndDate * 1000);\r\n\r\n    const startHour: number = startDate.getHours();\r\n    const endHour: number = endDate.getHours();\r\n\r\n    this.startHour = startHour;\r\n    this.endHour = endHour;\r\n  }\r\n\r\n  private setGridTemplate() {\r\n    const square: string = \"square \";\r\n    const rowString: string = `\"${square.repeat(\r\n      this.columnAmount - 1\r\n    )} square\"`;\r\n    this.templateAreas = `${rowString.repeat(5)}`;\r\n  }\r\n\r\n  private setHoursHeader() {\r\n    let hourCounter: number = 0;\r\n    let startHourCounter: number = this.startHour;\r\n\r\n    const hourNumbers: number[] = [];\r\n\r\n    while (hourCounter < this.hourDifference) {\r\n      hourNumbers.push(startHourCounter);\r\n      hourCounter++;\r\n      return startHourCounter < 24\r\n        ? startHourCounter++\r\n        : (startHourCounter = 0);\r\n    }\r\n\r\n    const stringHours: string[] = [];\r\n\r\n    hourNumbers.forEach((hour) => {\r\n      if (hour === 24) stringHours.push(\"12:00 a.m\");\r\n      if (hour === 12) stringHours.push(\"12:00 p.m\");\r\n      return hour > 12\r\n        ? stringHours.push(`${hour}:00 a.m`)\r\n        : stringHours.push(`${hour - 12}:00 p.m`);\r\n    });\r\n    this.hourNumbers = hourNumbers;\r\n    this.stringHours = stringHours;\r\n  }\r\n\r\n  public setGrid() {\r\n    this.setSquares();\r\n    this.setHours();\r\n    this.setGridTemplate();\r\n    this.setHoursHeader();\r\n  }\r\n}\r\n\r\nexport default function setSquares(\r\n  unixStartDate: number,\r\n  unixEndDate: number\r\n): void {\r\n  const newDate = new ScheduleGrid(unixStartDate, unixEndDate);\r\n  newDate.setGrid();\r\n  console.log(newDate);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}