{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nexport default function Queried(props) {\n  console.log(props);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 10\n    }\n  });\n}\n_c = Queried;\n\nQueried.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var query;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = _ref.query;\n            console.log(query);\n            return _context.abrupt(\"return\", {\n              props: {\n                query: query\n              }\n            });\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}(); // export default function Queried({\n//   results: { items, errors },\n//   searchType,\n// }): JSX.Element {\n//   const [state, setState] = React.useState({\n//     resultsType: searchType !== \"ALL\" ? searchType : \"PLACES\",\n//   });\n//   console.log(state.resultsType);\n//   console.log(items);\n//   //   React.useEffect(() => {\n//   //     switch(searchType){\n//   //       case \"EVENTS\":\n//   //         return setState({resultsType: \"Events\"})\n//   //       case \"PLACES\":\n//   //         return setState({resultsType: \"Places\"})\n//   //       case \"ALL\":\n//   //         return setState({resultsType: \"Places\"})\n//   //       default:\n//   //         return setState({})\n//   //     }\n//   // },[])\n//   const determineItems: () => JSX.Element | null = () => {\n//     if (!items) return null;\n//     switch (searchType) {\n//       case \"ALL\":\n//         if (Array.isArray(items.places) && Array.isArray(items.events)) {\n//           return state.resultsType === \"PLACES\"\n//             ? items.places.map((item) => (\n//                 <ResultCard key={item.id} item={item}></ResultCard>\n//               ))\n//             : items.events.map((item) => (\n//                 <ResultCard key={item.id} item={item}></ResultCard>\n//               ));\n//         } else {\n//           return null;\n//         }\n//       case \"PLACES\":\n//         return Array.isArray(items.places)\n//           ? items.places.map((item) => (\n//               <ResultCard key={item.id} item={item}></ResultCard>\n//             ))\n//           : null;\n//       case \"EVENTS\":\n//         return Array.isArray(items.events)\n//           ? items.events.map((item) => (\n//               <ResultCard key={item.id} item={item}></ResultCard>\n//             ))\n//           : null;\n//       default:\n//         if (Array.isArray(items.places) && Array.isArray(items.events)) {\n//           return state.resultsType === \"PLACES\"\n//             ? items.places.map((item) => (\n//                 <ResultCard key={item.id} item={item}></ResultCard>\n//               ))\n//             : items.events.map((item) => (\n//                 <ResultCard key={item.id} item={item}></ResultCard>\n//               ));\n//         } else {\n//           return null;\n//         }\n//     }\n//   };\n//   // React.useEffect(() => {\n//   //   if (searchType) {\n//   //     switch (searchType) {\n//   //       case \"ALL\":\n//   //         return setState({ resultsType: \"Places\" });\n//   //       case \"EVENTS\":\n//   //         return setState({ resultsType: \"Events\" });\n//   //     }\n//   //   }\n//   // });\n//   const setTypeButtons: () => JSX.Element = () => {\n//     if (searchType) {\n//       switch (searchType) {\n//         case \"ALL\":\n//           return (\n//             <React.Fragment>\n//               <button\n//                 className={css.typeButton}\n//                 onClick={() => setState({ resultsType: \"PLACES\" })}\n//               >\n//                 Places\n//               </button>\n//               <button\n//                 className={css.typeButton}\n//                 onClick={() => setState({ resultsType: \"EVENTS\" })}\n//               >\n//                 Events\n//               </button>\n//             </React.Fragment>\n//           );\n//         case \"PLACES\":\n//           return (\n//             <button\n//               className={css.typeButton}\n//               onClick={() => setState({ resultsType: \"PLACES\" })}\n//             >\n//               Places\n//             </button>\n//           );\n//         case \"EVENTS\":\n//           return (\n//             <button\n//               className={css.typeButton}\n//               onClick={() => setState({ resultsType: \"EVENTS\" })}\n//             >\n//               Events\n//             </button>\n//           );\n//         default:\n//           return (\n//             <React.Fragment>\n//               <button\n//                 className={css.typeButton}\n//                 onClick={() => setState({ resultsType: \"PLACES\" })}\n//               >\n//                 Places\n//               </button>\n//               <button\n//                 className={css.typeButton}\n//                 onClick={() => setState({ resultsType: \"EVENTS\" })}\n//               >\n//                 Events\n//               </button>\n//             </React.Fragment>\n//           );\n//       }\n//     } else {\n//       return (\n//         <React.Fragment>\n//           <button\n//             className={css.typeButton}\n//             onClick={() => setState({ resultsType: \"PLACES\" })}\n//           >\n//             Places\n//           </button>\n//           <button\n//             className={css.typeButton}\n//             onClick={() => setState({ resultsType: \"EVENTS\" })}\n//           >\n//             Events\n//           </button>\n//         </React.Fragment>\n//       );\n//     }\n//   };\n//   return (\n//     <Layout>\n//       <main className={css.queriedPage}>\n//         <section className={css.queryDisplay}></section>\n//         <section className={css.header}>\n//           {setTypeButtons()}\n//           <button className={css.sort}>Sort</button>\n//         </section>\n//         <section className={css.results}>\n//           <div className={css.resultsSlider}>{determineItems()}</div>\n//         </section>\n//       </main>\n//     </Layout>\n//   );\n// }\n// type Results = {\n//   items: { places: { [key: string]: any }[]; events: { [key: string]: any }[] };\n//   errors: { yelpPlaces: string; yelpEvents: string; ticketmaster: string };\n// };\n// type APIResponse = Promise<{ [key: string]: any }[] | string>;\n// type SearchParams = { [key: string]: any };\n// Queried.getInitialProps = async ({\n//   query,\n// }): Promise<{ results: any; searchType: string }> => {\n//   if (query.queried) {\n//     const checkURLIsString: string = query.queried.toString();\n//     const paramValueArray: string[] = checkURLIsString.split(\"+\");\n//     const searchParamsValues: SearchParams = {};\n//     paramValueArray.forEach((param) => {\n//       const indexOfEqual: number = param.search(\"=\");\n//       if (indexOfEqual === -1) return;\n//       else {\n//         const paramKey: string = param.substring(0, indexOfEqual);\n//         const paramValue: string = param.substring(indexOfEqual + 1);\n//         searchParamsValues[paramKey] = paramValue;\n//       }\n//     });\n//     class APICalls {\n//       searchParams: SearchParams;\n//       results: Results;\n//       constructor(searchParams: SearchParams) {\n//         this.searchParams = searchParams;\n//         this.results = {\n//           items: { places: [], events: [] },\n//           errors: { yelpPlaces: \"\", yelpEvents: \"\", ticketmaster: \"\" },\n//         };\n//       }\n//       public async yelpBusinesses() {\n//         const yelpBusinessesResponse: APIResponse = await yelpBusinessesCall(\n//           this.searchParams\n//         );\n//         Array.isArray(yelpBusinessesResponse)\n//           ? (this.results.items.places = yelpBusinessesResponse)\n//           : (this.results.errors.yelpPlaces = `${yelpBusinessesResponse}`);\n//       }\n//       public async yelpEvents() {\n//         const yelpEventsResponse: APIResponse = await yelpEventsCall(\n//           this.searchParams\n//         );\n//         Array.isArray(yelpEventsResponse)\n//           ? (this.results.items.events = [\n//               ...this.results.items.events,\n//               ...yelpEventsResponse,\n//             ])\n//           : (this.results.errors.yelpEvents = `${yelpEventsResponse}`);\n//       }\n//       public async ticketMaster() {\n//         const ticketMasterResponse: APIResponse = await ticketMasterCall(\n//           this.searchParams\n//         );\n//         Array.isArray(ticketMasterResponse)\n//           ? (this.results.items.events = [\n//               ...this.results.items.events,\n//               ...ticketMasterResponse,\n//             ])\n//           : (this.results.errors.ticketmaster = `${ticketMasterResponse}`);\n//       }\n//     }\n//     const callAPIS: (searchType: string) => Promise<Results> = async (\n//       searchType\n//     ) => {\n//       const APICall = new APICalls(searchParamsValues);\n//       try {\n//         switch (searchType) {\n//           case \"PLACES\":\n//             APICall.yelpBusinesses();\n//             return APICall.results;\n//           case \"EVENTS\":\n//             APICall.yelpEvents();\n//             APICall.ticketMaster();\n//             return APICall.results;\n//           case \"ALL\":\n//             APICall.yelpBusinesses();\n//             APICall.yelpEvents();\n//             APICall.ticketMaster();\n//             return APICall.results;\n//           default:\n//             APICall.yelpBusinesses();\n//             APICall.yelpEvents();\n//             APICall.ticketMaster();\n//             return APICall.results;\n//         }\n//       } catch {\n//         APICall.results.errors.yelpPlaces = \"CALL ERROR\";\n//         APICall.results.errors.yelpEvents = \"CALL ERROR\";\n//         APICall.results.errors.ticketmaster = \"CALL ERROR\";\n//         return APICall.results;\n//       }\n//     };\n//     const results: Results = await callAPIS(searchParamsValues.searchType);\n//     return {\n//       results,\n//       searchType: searchParamsValues.searchType,\n//     };\n//   } else {\n//     return { results: {}, searchType: \"ALL\" };\n//   }\n// };\n\n\nvar _c;\n\n$RefreshReg$(_c, \"Queried\");","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","Queried","props","console","log","getInitialProps","query"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AASA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAqC;AAClDC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD;KAHuBD,O;;AAcxBA,OAAO,CAACI,eAAR;AAAA,uEAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,KAAT,QAASA,KAAT;AACxBH,YAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AADwB,6CAEjB;AACLJ,cAAAA,KAAK,EAAE;AACLI,gBAAAA,KAAK,EAALA;AADK;AADF,aAFiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAAA;AAAA;AAAA;AAAA,I,CASA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import * as React from \"react\";\r\nimport { Layout, ResultCard } from \"../../components\";\r\nimport {\r\n  yelpBusinessesCall,\r\n  yelpEventsCall,\r\n  ticketMasterCall,\r\n} from \"../../apicalls\";\r\nimport css from \"../../styles/Queried.module.scss\";\r\n\r\nexport default function Queried(props): JSX.Element {\r\n  console.log(props);\r\n  return <div></div>;\r\n}\r\n\r\ntype Results = {\r\n  items: { places: { [key: string]: any }[]; events: { [key: string]: any }[] };\r\n  errors: { yelpPlaces: string; yelpEvents: string; ticketmaster: string };\r\n};\r\n\r\ntype APIResponse = Promise<{ [key: string]: any }[] | string>;\r\n\r\ntype SearchParams = { [key: string]: any };\r\n\r\nQueried.getInitialProps = async ({ query }): Promise<{ props: any }> => {\r\n  console.log(query);\r\n  return {\r\n    props: {\r\n      query,\r\n    },\r\n  };\r\n};\r\n\r\n// export default function Queried({\r\n//   results: { items, errors },\r\n//   searchType,\r\n// }): JSX.Element {\r\n//   const [state, setState] = React.useState({\r\n//     resultsType: searchType !== \"ALL\" ? searchType : \"PLACES\",\r\n//   });\r\n\r\n//   console.log(state.resultsType);\r\n//   console.log(items);\r\n//   //   React.useEffect(() => {\r\n//   //     switch(searchType){\r\n//   //       case \"EVENTS\":\r\n//   //         return setState({resultsType: \"Events\"})\r\n//   //       case \"PLACES\":\r\n//   //         return setState({resultsType: \"Places\"})\r\n//   //       case \"ALL\":\r\n//   //         return setState({resultsType: \"Places\"})\r\n//   //       default:\r\n//   //         return setState({})\r\n//   //     }\r\n//   // },[])\r\n//   const determineItems: () => JSX.Element | null = () => {\r\n//     if (!items) return null;\r\n//     switch (searchType) {\r\n//       case \"ALL\":\r\n//         if (Array.isArray(items.places) && Array.isArray(items.events)) {\r\n//           return state.resultsType === \"PLACES\"\r\n//             ? items.places.map((item) => (\r\n//                 <ResultCard key={item.id} item={item}></ResultCard>\r\n//               ))\r\n//             : items.events.map((item) => (\r\n//                 <ResultCard key={item.id} item={item}></ResultCard>\r\n//               ));\r\n//         } else {\r\n//           return null;\r\n//         }\r\n\r\n//       case \"PLACES\":\r\n//         return Array.isArray(items.places)\r\n//           ? items.places.map((item) => (\r\n//               <ResultCard key={item.id} item={item}></ResultCard>\r\n//             ))\r\n//           : null;\r\n//       case \"EVENTS\":\r\n//         return Array.isArray(items.events)\r\n//           ? items.events.map((item) => (\r\n//               <ResultCard key={item.id} item={item}></ResultCard>\r\n//             ))\r\n//           : null;\r\n//       default:\r\n//         if (Array.isArray(items.places) && Array.isArray(items.events)) {\r\n//           return state.resultsType === \"PLACES\"\r\n//             ? items.places.map((item) => (\r\n//                 <ResultCard key={item.id} item={item}></ResultCard>\r\n//               ))\r\n//             : items.events.map((item) => (\r\n//                 <ResultCard key={item.id} item={item}></ResultCard>\r\n//               ));\r\n//         } else {\r\n//           return null;\r\n//         }\r\n//     }\r\n//   };\r\n\r\n//   // React.useEffect(() => {\r\n//   //   if (searchType) {\r\n//   //     switch (searchType) {\r\n//   //       case \"ALL\":\r\n//   //         return setState({ resultsType: \"Places\" });\r\n//   //       case \"EVENTS\":\r\n//   //         return setState({ resultsType: \"Events\" });\r\n//   //     }\r\n//   //   }\r\n//   // });\r\n\r\n//   const setTypeButtons: () => JSX.Element = () => {\r\n//     if (searchType) {\r\n//       switch (searchType) {\r\n//         case \"ALL\":\r\n//           return (\r\n//             <React.Fragment>\r\n//               <button\r\n//                 className={css.typeButton}\r\n//                 onClick={() => setState({ resultsType: \"PLACES\" })}\r\n//               >\r\n//                 Places\r\n//               </button>\r\n//               <button\r\n//                 className={css.typeButton}\r\n//                 onClick={() => setState({ resultsType: \"EVENTS\" })}\r\n//               >\r\n//                 Events\r\n//               </button>\r\n//             </React.Fragment>\r\n//           );\r\n//         case \"PLACES\":\r\n//           return (\r\n//             <button\r\n//               className={css.typeButton}\r\n//               onClick={() => setState({ resultsType: \"PLACES\" })}\r\n//             >\r\n//               Places\r\n//             </button>\r\n//           );\r\n\r\n//         case \"EVENTS\":\r\n//           return (\r\n//             <button\r\n//               className={css.typeButton}\r\n//               onClick={() => setState({ resultsType: \"EVENTS\" })}\r\n//             >\r\n//               Events\r\n//             </button>\r\n//           );\r\n//         default:\r\n//           return (\r\n//             <React.Fragment>\r\n//               <button\r\n//                 className={css.typeButton}\r\n//                 onClick={() => setState({ resultsType: \"PLACES\" })}\r\n//               >\r\n//                 Places\r\n//               </button>\r\n//               <button\r\n//                 className={css.typeButton}\r\n//                 onClick={() => setState({ resultsType: \"EVENTS\" })}\r\n//               >\r\n//                 Events\r\n//               </button>\r\n//             </React.Fragment>\r\n//           );\r\n//       }\r\n//     } else {\r\n//       return (\r\n//         <React.Fragment>\r\n//           <button\r\n//             className={css.typeButton}\r\n//             onClick={() => setState({ resultsType: \"PLACES\" })}\r\n//           >\r\n//             Places\r\n//           </button>\r\n//           <button\r\n//             className={css.typeButton}\r\n//             onClick={() => setState({ resultsType: \"EVENTS\" })}\r\n//           >\r\n//             Events\r\n//           </button>\r\n//         </React.Fragment>\r\n//       );\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <Layout>\r\n//       <main className={css.queriedPage}>\r\n//         <section className={css.queryDisplay}></section>\r\n//         <section className={css.header}>\r\n//           {setTypeButtons()}\r\n//           <button className={css.sort}>Sort</button>\r\n//         </section>\r\n//         <section className={css.results}>\r\n//           <div className={css.resultsSlider}>{determineItems()}</div>\r\n//         </section>\r\n//       </main>\r\n//     </Layout>\r\n//   );\r\n// }\r\n\r\n// type Results = {\r\n//   items: { places: { [key: string]: any }[]; events: { [key: string]: any }[] };\r\n//   errors: { yelpPlaces: string; yelpEvents: string; ticketmaster: string };\r\n// };\r\n\r\n// type APIResponse = Promise<{ [key: string]: any }[] | string>;\r\n\r\n// type SearchParams = { [key: string]: any };\r\n\r\n// Queried.getInitialProps = async ({\r\n//   query,\r\n// }): Promise<{ results: any; searchType: string }> => {\r\n//   if (query.queried) {\r\n//     const checkURLIsString: string = query.queried.toString();\r\n//     const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n//     const searchParamsValues: SearchParams = {};\r\n\r\n//     paramValueArray.forEach((param) => {\r\n//       const indexOfEqual: number = param.search(\"=\");\r\n//       if (indexOfEqual === -1) return;\r\n//       else {\r\n//         const paramKey: string = param.substring(0, indexOfEqual);\r\n//         const paramValue: string = param.substring(indexOfEqual + 1);\r\n//         searchParamsValues[paramKey] = paramValue;\r\n//       }\r\n//     });\r\n\r\n//     class APICalls {\r\n//       searchParams: SearchParams;\r\n//       results: Results;\r\n//       constructor(searchParams: SearchParams) {\r\n//         this.searchParams = searchParams;\r\n//         this.results = {\r\n//           items: { places: [], events: [] },\r\n//           errors: { yelpPlaces: \"\", yelpEvents: \"\", ticketmaster: \"\" },\r\n//         };\r\n//       }\r\n\r\n//       public async yelpBusinesses() {\r\n//         const yelpBusinessesResponse: APIResponse = await yelpBusinessesCall(\r\n//           this.searchParams\r\n//         );\r\n//         Array.isArray(yelpBusinessesResponse)\r\n//           ? (this.results.items.places = yelpBusinessesResponse)\r\n//           : (this.results.errors.yelpPlaces = `${yelpBusinessesResponse}`);\r\n//       }\r\n//       public async yelpEvents() {\r\n//         const yelpEventsResponse: APIResponse = await yelpEventsCall(\r\n//           this.searchParams\r\n//         );\r\n//         Array.isArray(yelpEventsResponse)\r\n//           ? (this.results.items.events = [\r\n//               ...this.results.items.events,\r\n//               ...yelpEventsResponse,\r\n//             ])\r\n//           : (this.results.errors.yelpEvents = `${yelpEventsResponse}`);\r\n//       }\r\n//       public async ticketMaster() {\r\n//         const ticketMasterResponse: APIResponse = await ticketMasterCall(\r\n//           this.searchParams\r\n//         );\r\n//         Array.isArray(ticketMasterResponse)\r\n//           ? (this.results.items.events = [\r\n//               ...this.results.items.events,\r\n//               ...ticketMasterResponse,\r\n//             ])\r\n//           : (this.results.errors.ticketmaster = `${ticketMasterResponse}`);\r\n//       }\r\n//     }\r\n\r\n//     const callAPIS: (searchType: string) => Promise<Results> = async (\r\n//       searchType\r\n//     ) => {\r\n//       const APICall = new APICalls(searchParamsValues);\r\n\r\n//       try {\r\n//         switch (searchType) {\r\n//           case \"PLACES\":\r\n//             APICall.yelpBusinesses();\r\n\r\n//             return APICall.results;\r\n\r\n//           case \"EVENTS\":\r\n//             APICall.yelpEvents();\r\n//             APICall.ticketMaster();\r\n//             return APICall.results;\r\n//           case \"ALL\":\r\n//             APICall.yelpBusinesses();\r\n//             APICall.yelpEvents();\r\n//             APICall.ticketMaster();\r\n//             return APICall.results;\r\n//           default:\r\n//             APICall.yelpBusinesses();\r\n//             APICall.yelpEvents();\r\n//             APICall.ticketMaster();\r\n//             return APICall.results;\r\n//         }\r\n//       } catch {\r\n//         APICall.results.errors.yelpPlaces = \"CALL ERROR\";\r\n//         APICall.results.errors.yelpEvents = \"CALL ERROR\";\r\n//         APICall.results.errors.ticketmaster = \"CALL ERROR\";\r\n//         return APICall.results;\r\n//       }\r\n//     };\r\n\r\n//     const results: Results = await callAPIS(searchParamsValues.searchType);\r\n\r\n//     return {\r\n//       results,\r\n//       searchType: searchParamsValues.searchType,\r\n//     };\r\n//   } else {\r\n//     return { results: {}, searchType: \"ALL\" };\r\n//   }\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}