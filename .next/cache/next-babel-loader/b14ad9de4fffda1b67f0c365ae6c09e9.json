{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nexport var yelpBusinessesCall = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var location, radius, placeType, response, responseJson;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            location = _ref.location, radius = _ref.radius, placeType = _ref.placeType;\n            _context.prev = 1;\n            _context.next = 4;\n            return fetch(\"/api/yelpBusinessesAPI\", {\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n              },\n              method: \"POST\",\n              body: JSON.stringify({\n                location: location,\n                radius: radius,\n                term: placeType\n              })\n            });\n\n          case 4:\n            response = _context.sent;\n            responseJson = response.json();\n            console.log(responseJson);\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](1);\n            console.log(_context.t0);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 9]]);\n  }));\n\n  return function yelpBusinessesCall(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/components/SearchBox/APICalls/yelpBusinessesCall.ts"],"names":["yelpBusinessesCall","location","radius","placeType","fetch","headers","Accept","method","body","JSON","stringify","term","response","responseJson","json","console","log"],"mappings":";;AAIA,OAAO,IAAMA,kBAIa;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,QAAT,QAASA,QAAT,EAAmBC,MAAnB,QAAmBA,MAAnB,EAA2BC,SAA3B,QAA2BA,SAA3B;AAAA;AAAA;AAAA,mBAEQC,KAAK,CAAC,wBAAD,EAA2B;AAC/DC,cAAAA,OAAO,EAAE;AACPC,gBAAAA,MAAM,EAAE,kBADD;AAEP,gCAAgB;AAFT,eADsD;AAK/DC,cAAAA,MAAM,EAAE,MALuD;AAM/DC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBT,gBAAAA,QAAQ,EAARA,QADmB;AAEnBC,gBAAAA,MAAM,EAANA,MAFmB;AAGnBS,gBAAAA,IAAI,EAAER;AAHa,eAAf;AANyD,aAA3B,CAFb;;AAAA;AAEnBS,YAAAA,QAFmB;AAcnBC,YAAAA,YAdmB,GAcWD,QAAQ,CAACE,IAAT,EAdX;AAezBC,YAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ;AAfyB;AAAA;;AAAA;AAAA;AAAA;AAiBzBE,YAAAA,OAAO,CAACC,GAAR;;AAjByB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAJbhB,kBAIa;AAAA;AAAA;AAAA,GAJnB","sourcesContent":["import { SearchQuery } from \"../SearchBox\";\r\n\r\ntype Params = Pick<SearchQuery, \"location\" | \"radius\" | \"placeType\">;\r\n\r\nexport const yelpBusinessesCall: ({\r\n  location,\r\n  radius,\r\n  placeType,\r\n}: Params) => Promise<any> = async ({ location, radius, placeType }) => {\r\n  try {\r\n    const response: Response = await fetch(\"/api/yelpBusinessesAPI\", {\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        location,\r\n        radius,\r\n        term: placeType,\r\n      }),\r\n    });\r\n    const responseJson: Promise<JSON> = response.json();\r\n    console.log(responseJson);\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}