{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\components\\\\SearchBox\\\\SearchBox.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from \"react\";\nimport { SearchSelector, WhereInput, WhenInput, EventsInput, PlacesInput } from \"./Parts\";\nimport ScheduleGrid from \"./Logic/ScheduleGrid\";\nimport Link from \"next/link\";\nimport { useGridDispatch } from \"../../state/SearchGridContext\";\nimport { useSquaresDispatch } from \"../../state/GridSquaresContext\";\nimport css from \"./SearchBox.module.scss\";\nexport const SearchBox = props => {\n  const [searchQuery, setSearchQuery] = React.useState({\n    searchType: \"ALL\",\n    eventsCategory: \"\",\n    radius: \"\",\n    location: \"\",\n    endDate: null,\n    startDate: null,\n    placeType: \"\",\n    startFormatted: \"\",\n    endFormatted: \"\",\n    unixStartDate: null,\n    unixEndDate: null,\n    ticketMasterCategories: \"\",\n    yelpCategories: \"\"\n  });\n  const squaresDispatch = useSquaresDispatch();\n  const gridDispatch = useGridDispatch();\n\n  const handleSubmit = () => {\n    const newDatesInput = new ScheduleGrid(searchQuery.unixStartDate, searchQuery.unixEndDate);\n    newDatesInput.setGrid();\n    return squaresDispatch({\n      type: \"ADD_SQUARES\",\n      payload: {\n        numberOfSquares: newDatesInput.numberofSquares\n      }\n    }), gridDispatch({\n      type: \"ADD_GRID_TEMPLATE\",\n      payload: {\n        hourStrings: newDatesInput.hourStrings,\n        gridTemplate: newDatesInput.templateAreas\n      }\n    });\n  };\n\n  const checkFieldsDisplayLink = searchType => {\n    const {\n      location,\n      radius,\n      placeType,\n      startFormatted,\n      endFormatted,\n      unixStartDate,\n      unixEndDate,\n      eventsCategory\n    } = searchQuery;\n\n    switch (searchType) {\n      case \"ALL\":\n        return searchQuery.location !== \"\" && searchQuery.startDate !== null && searchQuery.radius !== \"\" && searchQuery.endDate !== null && searchQuery.placeType !== \"\" ? __jsx(Link, {\n          href: {\n            pathname: \"/search/[queried]\",\n            query: {\n              searchType,\n              location,\n              radius,\n              placeType,\n              startFormatted,\n              endFormatted,\n              unixEndDate,\n              unixStartDate,\n              eventsCategory\n            }\n          },\n          as: `/search/searchType=ALL+location=${searchQuery.location}+radius=${searchQuery.radius}+placeType=${searchQuery.placeType}+startFormatted=${searchQuery.startFormatted}+endFormatted=${searchQuery.endFormatted}+unixStartDate=${searchQuery.unixStartDate}+unixEndDate=${searchQuery.unixEndDate}+eventsCategory=${searchQuery.eventsCategory}`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 11\n          }\n        }, __jsx(\"button\", {\n          onClick: handleSubmit,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }\n        }, \"Search\")) : __jsx(\"button\", {\n          onClick: () => alert(\"please fill out missing fields\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 11\n          }\n        }, \"Search\");\n\n      case \"PLACES\":\n        return searchQuery.location !== \"\" && searchQuery.startDate !== null && searchQuery.radius !== \"\" && searchQuery.endDate !== null && searchQuery.placeType !== \"\" ? __jsx(Link, {\n          href: {\n            pathname: \"/search/[queried]\",\n            query: {\n              searchType,\n              location,\n              radius,\n              placeType,\n              startFormatted,\n              endFormatted\n            }\n          },\n          as: `/search/searchType=PLACES+location=${searchQuery.location}+radius=${searchQuery.radius}+placeType=${searchQuery.placeType}+startFormatted=${searchQuery.startFormatted}+endFormatted=${searchQuery.endFormatted}`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 11\n          }\n        }, __jsx(\"button\", {\n          style: {\n            color: \"green\"\n          },\n          onClick: handleSubmit,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }\n        }, \"Search\")) : __jsx(\"button\", {\n          onClick: () => alert(\"please fill out missing fields\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 11\n          }\n        }, \"Search\");\n\n      case \"EVENTS\":\n        return searchQuery.location !== \"\" && searchQuery.startDate !== null && searchQuery.radius !== \"\" && searchQuery.endDate !== null ? __jsx(Link, {\n          href: {\n            pathname: \"/search/[queried]\",\n            query: {\n              searchType,\n              location,\n              radius,\n              startFormatted,\n              endFormatted,\n              unixStartDate,\n              unixEndDate,\n              eventsCategory\n            }\n          },\n          as: `/search/searchType=EVENTS+location=${searchQuery.location}+radius=${searchQuery.radius}+startFormatted=${searchQuery.startFormatted}+endFormatted=${searchQuery.endFormatted}+unixStartDate=${searchQuery.unixStartDate}+unixEndDate=${searchQuery.unixEndDate}+eventsCategory=${searchQuery.eventsCategory}`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 11\n          }\n        }, __jsx(\"button\", {\n          style: {\n            color: \"green\"\n          },\n          onClick: handleSubmit,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }\n        }, \"Search\")) : __jsx(\"button\", {\n          onClick: () => alert(\"please fill out missing fields\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 11\n          }\n        }, \"Search\");\n\n      default:\n        return searchQuery.location !== \"\" && searchQuery.startDate !== null && searchQuery.radius !== \"\" && searchQuery.endDate !== null && searchQuery.placeType !== \"\" ? __jsx(Link, {\n          href: {\n            pathname: \"/search/[queried]\",\n            query: {\n              searchType,\n              location,\n              radius,\n              placeType,\n              startFormatted,\n              endFormatted,\n              unixEndDate,\n              unixStartDate,\n              eventsCategory\n            }\n          },\n          as: `/search/searchType=ALL+location=${searchQuery.location}+radius=${searchQuery.radius}+placeType=${searchQuery.placeType}+startFormatted=${searchQuery.startFormatted}+endFormatted=${searchQuery.endFormatted}+unixStartDate=${searchQuery.unixStartDate}+unixEndDate=${searchQuery.unixEndDate}+eventsCategory=${searchQuery.eventsCategory}`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 11\n          }\n        }, __jsx(\"button\", {\n          style: {\n            color: \"green\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 13\n          }\n        }, \"Search\")) : __jsx(\"button\", {\n          onClick: () => alert(\"please fill out missing fields\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 11\n          }\n        }, \"Search\");\n    }\n  };\n\n  const handleInputChange = (key, input) => {\n    return setSearchQuery(state => _objectSpread(_objectSpread({}, state), {}, {\n      [key]: input\n    }));\n  };\n\n  const handleQueryDate = (key, date) => {\n    if (key === \"startDate\") {\n      const unixStartDate = Math.round(new Date(date).getTime() / 1000);\n      const timeOffSet = date.getTimezoneOffset() * 60;\n      const localStartTimeISO = new Date((unixStartDate - timeOffSet) * 1000).toISOString();\n      const localStartTimeISOFormatted = `${localStartTimeISO.substring(0, 19)}Z`;\n      return setSearchQuery(state => _objectSpread(_objectSpread({}, state), {}, {\n        [key]: date,\n        unixStartDate,\n        startFormatted: localStartTimeISOFormatted\n      }));\n    } else {\n      const unixEndDate = Math.round(new Date(date).getTime() / 1000);\n      const timeOffSet = date.getTimezoneOffset() * 60;\n      const localEndTimeISO = new Date((unixEndDate - timeOffSet) * 1000).toISOString();\n      const localEndTimeISOFormatted = `${localEndTimeISO.substring(0, 19)}Z`;\n      return setSearchQuery(state => _objectSpread(_objectSpread({}, state), {}, {\n        [key]: date,\n        unixEndDate,\n        endFormatted: localEndTimeISOFormatted\n      }));\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: css.searchBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 5\n    }\n  }, __jsx(SearchSelector, {\n    searchType: searchQuery.searchType,\n    handleInputChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }\n  }), __jsx(WhereInput, {\n    handleInputChange: handleInputChange,\n    location: searchQuery.location,\n    radius: searchQuery.radius,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }\n  }), __jsx(WhenInput, {\n    handleQueryDate: handleQueryDate,\n    startDate: searchQuery.startDate,\n    endDate: searchQuery.endDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }\n  }), __jsx(EventsInput, {\n    handleInputChange: handleInputChange,\n    eventsCategory: searchQuery.eventsCategory,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }\n  }), __jsx(PlacesInput, {\n    handleInputChange: handleInputChange,\n    placeType: searchQuery.placeType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }\n  }), checkFieldsDisplayLink(searchQuery.searchType));\n};","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/components/SearchBox/SearchBox.tsx"],"names":["React","SearchSelector","WhereInput","WhenInput","EventsInput","PlacesInput","ScheduleGrid","Link","useGridDispatch","useSquaresDispatch","css","SearchBox","props","searchQuery","setSearchQuery","useState","searchType","eventsCategory","radius","location","endDate","startDate","placeType","startFormatted","endFormatted","unixStartDate","unixEndDate","ticketMasterCategories","yelpCategories","squaresDispatch","gridDispatch","handleSubmit","newDatesInput","setGrid","type","payload","numberOfSquares","numberofSquares","hourStrings","gridTemplate","templateAreas","checkFieldsDisplayLink","pathname","query","alert","color","handleInputChange","key","input","state","handleQueryDate","date","Math","round","Date","getTime","timeOffSet","getTimezoneOffset","localStartTimeISO","toISOString","localStartTimeISOFormatted","substring","localEndTimeISO","localEndTimeISOFormatted","searchBox"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n  SearchSelector,\r\n  WhereInput,\r\n  WhenInput,\r\n  EventsInput,\r\n  PlacesInput,\r\n} from \"./Parts\";\r\nimport ScheduleGrid from \"./Logic/ScheduleGrid\";\r\nimport Link from \"next/link\";\r\nimport { useGridDispatch } from \"../../state/SearchGridContext\";\r\nimport { useSquaresDispatch } from \"../../state/GridSquaresContext\";\r\nimport css from \"./SearchBox.module.scss\";\r\n\r\nexport type InputChange = (key: string, input: string | Date) => void;\r\n\r\nexport default interface InputProps {\r\n  handleInputChange: InputChange;\r\n  searchType: string;\r\n  placeType: string;\r\n  radius: string;\r\n  eventsCategory: string;\r\n  location: string;\r\n  startDate: Date;\r\n  endDate: Date;\r\n  handleQueryDate: (key: string, date: Date) => void;\r\n}\r\n\r\nexport interface SearchQuery {\r\n  searchType: string;\r\n  eventsCategory: string;\r\n  radius: string;\r\n  location: string;\r\n  placeType: string;\r\n  endDate: Date;\r\n  startDate: Date;\r\n  startFormatted: string;\r\n  endFormatted: string;\r\n  unixStartDate: number;\r\n  unixEndDate: number;\r\n  ticketMasterCategories: string;\r\n  yelpCategories: string;\r\n}\r\n\r\nexport const SearchBox: React.FC = (props) => {\r\n  const [searchQuery, setSearchQuery] = React.useState<SearchQuery>({\r\n    searchType: \"ALL\",\r\n    eventsCategory: \"\",\r\n    radius: \"\",\r\n    location: \"\",\r\n    endDate: null,\r\n    startDate: null,\r\n    placeType: \"\",\r\n    startFormatted: \"\",\r\n    endFormatted: \"\",\r\n    unixStartDate: null,\r\n    unixEndDate: null,\r\n    ticketMasterCategories: \"\",\r\n    yelpCategories: \"\",\r\n  });\r\n\r\n  const squaresDispatch = useSquaresDispatch();\r\n  const gridDispatch = useGridDispatch();\r\n\r\n  const handleSubmit: () => void = () => {\r\n    const newDatesInput: ScheduleGrid = new ScheduleGrid(\r\n      searchQuery.unixStartDate,\r\n      searchQuery.unixEndDate\r\n    );\r\n    newDatesInput.setGrid();\r\n    return (\r\n      squaresDispatch({\r\n        type: \"ADD_SQUARES\",\r\n        payload: { numberOfSquares: newDatesInput.numberofSquares },\r\n      }),\r\n      gridDispatch({\r\n        type: \"ADD_GRID_TEMPLATE\",\r\n        payload: {\r\n          hourStrings: newDatesInput.hourStrings,\r\n          gridTemplate: newDatesInput.templateAreas,\r\n        },\r\n      })\r\n    );\r\n  };\r\n\r\n  const checkFieldsDisplayLink: (searchType: string) => JSX.Element = (\r\n    searchType\r\n  ) => {\r\n    const {\r\n      location,\r\n      radius,\r\n      placeType,\r\n      startFormatted,\r\n      endFormatted,\r\n      unixStartDate,\r\n      unixEndDate,\r\n      eventsCategory,\r\n    } = searchQuery;\r\n    switch (searchType) {\r\n      case \"ALL\":\r\n        return searchQuery.location !== \"\" &&\r\n          searchQuery.startDate !== null &&\r\n          searchQuery.radius !== \"\" &&\r\n          searchQuery.endDate !== null &&\r\n          searchQuery.placeType !== \"\" ? (\r\n          <Link\r\n            href={{\r\n              pathname: \"/search/[queried]\",\r\n              query: {\r\n                searchType,\r\n                location,\r\n                radius,\r\n                placeType,\r\n                startFormatted,\r\n                endFormatted,\r\n                unixEndDate,\r\n                unixStartDate,\r\n                eventsCategory,\r\n              },\r\n            }}\r\n            as={`/search/searchType=ALL+location=${searchQuery.location}+radius=${searchQuery.radius}+placeType=${searchQuery.placeType}+startFormatted=${searchQuery.startFormatted}+endFormatted=${searchQuery.endFormatted}+unixStartDate=${searchQuery.unixStartDate}+unixEndDate=${searchQuery.unixEndDate}+eventsCategory=${searchQuery.eventsCategory}`}\r\n          >\r\n            <button onClick={handleSubmit}>Search</button>\r\n          </Link>\r\n        ) : (\r\n          <button onClick={() => alert(\"please fill out missing fields\")}>\r\n            Search\r\n          </button>\r\n        );\r\n\r\n      case \"PLACES\":\r\n        return searchQuery.location !== \"\" &&\r\n          searchQuery.startDate !== null &&\r\n          searchQuery.radius !== \"\" &&\r\n          searchQuery.endDate !== null &&\r\n          searchQuery.placeType !== \"\" ? (\r\n          <Link\r\n            href={{\r\n              pathname: \"/search/[queried]\",\r\n              query: {\r\n                searchType,\r\n                location,\r\n                radius,\r\n                placeType,\r\n                startFormatted,\r\n                endFormatted,\r\n              },\r\n            }}\r\n            as={`/search/searchType=PLACES+location=${searchQuery.location}+radius=${searchQuery.radius}+placeType=${searchQuery.placeType}+startFormatted=${searchQuery.startFormatted}+endFormatted=${searchQuery.endFormatted}`}\r\n          >\r\n            <button style={{ color: \"green\" }} onClick={handleSubmit}>\r\n              Search\r\n            </button>\r\n          </Link>\r\n        ) : (\r\n          <button onClick={() => alert(\"please fill out missing fields\")}>\r\n            Search\r\n          </button>\r\n        );\r\n\r\n      case \"EVENTS\":\r\n        return searchQuery.location !== \"\" &&\r\n          searchQuery.startDate !== null &&\r\n          searchQuery.radius !== \"\" &&\r\n          searchQuery.endDate !== null ? (\r\n          <Link\r\n            href={{\r\n              pathname: \"/search/[queried]\",\r\n              query: {\r\n                searchType,\r\n                location,\r\n                radius,\r\n                startFormatted,\r\n                endFormatted,\r\n                unixStartDate,\r\n                unixEndDate,\r\n                eventsCategory,\r\n              },\r\n            }}\r\n            as={`/search/searchType=EVENTS+location=${searchQuery.location}+radius=${searchQuery.radius}+startFormatted=${searchQuery.startFormatted}+endFormatted=${searchQuery.endFormatted}+unixStartDate=${searchQuery.unixStartDate}+unixEndDate=${searchQuery.unixEndDate}+eventsCategory=${searchQuery.eventsCategory}`}\r\n          >\r\n            <button style={{ color: \"green\" }} onClick={handleSubmit}>\r\n              Search\r\n            </button>\r\n          </Link>\r\n        ) : (\r\n          <button onClick={() => alert(\"please fill out missing fields\")}>\r\n            Search\r\n          </button>\r\n        );\r\n\r\n      default:\r\n        return searchQuery.location !== \"\" &&\r\n          searchQuery.startDate !== null &&\r\n          searchQuery.radius !== \"\" &&\r\n          searchQuery.endDate !== null &&\r\n          searchQuery.placeType !== \"\" ? (\r\n          <Link\r\n            href={{\r\n              pathname: \"/search/[queried]\",\r\n              query: {\r\n                searchType,\r\n                location,\r\n                radius,\r\n                placeType,\r\n                startFormatted,\r\n                endFormatted,\r\n                unixEndDate,\r\n                unixStartDate,\r\n                eventsCategory,\r\n              },\r\n            }}\r\n            as={`/search/searchType=ALL+location=${searchQuery.location}+radius=${searchQuery.radius}+placeType=${searchQuery.placeType}+startFormatted=${searchQuery.startFormatted}+endFormatted=${searchQuery.endFormatted}+unixStartDate=${searchQuery.unixStartDate}+unixEndDate=${searchQuery.unixEndDate}+eventsCategory=${searchQuery.eventsCategory}`}\r\n          >\r\n            <button style={{ color: \"green\" }}>Search</button>\r\n          </Link>\r\n        ) : (\r\n          <button onClick={() => alert(\"please fill out missing fields\")}>\r\n            Search\r\n          </button>\r\n        );\r\n    }\r\n  };\r\n\r\n  const handleInputChange: InputChange = (key, input) => {\r\n    return setSearchQuery((state) => ({\r\n      ...state,\r\n      [key]: input,\r\n    }));\r\n  };\r\n\r\n  const handleQueryDate: (key: string, date: Date) => void = (key, date) => {\r\n    if (key === \"startDate\") {\r\n      const unixStartDate: number = Math.round(new Date(date).getTime() / 1000);\r\n      const timeOffSet: number = date.getTimezoneOffset() * 60;\r\n      const localStartTimeISO: string = new Date(\r\n        (unixStartDate - timeOffSet) * 1000\r\n      ).toISOString();\r\n      const localStartTimeISOFormatted: string = `${localStartTimeISO.substring(\r\n        0,\r\n        19\r\n      )}Z`;\r\n\r\n      return setSearchQuery((state) => ({\r\n        ...state,\r\n        [key]: date,\r\n        unixStartDate,\r\n        startFormatted: localStartTimeISOFormatted,\r\n      }));\r\n    } else {\r\n      const unixEndDate: number = Math.round(new Date(date).getTime() / 1000);\r\n      const timeOffSet: number = date.getTimezoneOffset() * 60;\r\n      const localEndTimeISO: string = new Date(\r\n        (unixEndDate - timeOffSet) * 1000\r\n      ).toISOString();\r\n      const localEndTimeISOFormatted: string = `${localEndTimeISO.substring(\r\n        0,\r\n        19\r\n      )}Z`;\r\n      return setSearchQuery((state) => ({\r\n        ...state,\r\n        [key]: date,\r\n        unixEndDate,\r\n        endFormatted: localEndTimeISOFormatted,\r\n      }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={css.searchBox}>\r\n      <SearchSelector\r\n        searchType={searchQuery.searchType}\r\n        handleInputChange={handleInputChange}\r\n      ></SearchSelector>\r\n      <WhereInput\r\n        handleInputChange={handleInputChange}\r\n        location={searchQuery.location}\r\n        radius={searchQuery.radius}\r\n      ></WhereInput>\r\n      <WhenInput\r\n        handleQueryDate={handleQueryDate}\r\n        startDate={searchQuery.startDate}\r\n        endDate={searchQuery.endDate}\r\n      ></WhenInput>\r\n      <EventsInput\r\n        handleInputChange={handleInputChange}\r\n        eventsCategory={searchQuery.eventsCategory}\r\n      ></EventsInput>\r\n      <PlacesInput\r\n        handleInputChange={handleInputChange}\r\n        placeType={searchQuery.placeType}\r\n      ></PlacesInput>\r\n\r\n      {checkFieldsDisplayLink(searchQuery.searchType)}\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}