{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { Layout, ResultCard } from \"../../components\";\nimport { yelpBusinessesCall, yelpEventsCall, ticketMasterCall } from \"../../apicalls\";\nimport css from \"../../styles/Queried.module.scss\";\nexport default function Queried(_ref) {\n  _s();\n\n  var _this = this;\n\n  var _ref$results = _ref.results,\n      items = _ref$results.items,\n      errors = _ref$results.errors,\n      searchType = _ref.searchType;\n\n  var _React$useState = React.useState({\n    resultsType: \"\"\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  console.log(items);\n\n  var determineItems = function determineItems() {\n    if (!items) return null;\n\n    switch (searchType) {\n      case \"ALL\":\n        if (Array.isArray(items.places) && Array.isArray(items.events)) {\n          return state.resultsType === \"PLACES\" ? items.places.map(function (item) {\n            return __jsx(ResultCard, {\n              key: item.id,\n              item: item,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 25,\n                columnNumber: 17\n              }\n            });\n          }) : items.events.map(function (item) {\n            return __jsx(ResultCard, {\n              key: item.id,\n              item: item,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 28,\n                columnNumber: 17\n              }\n            });\n          });\n        } else {\n          return null;\n        }\n\n      case \"PLACES\":\n        return Array.isArray(items.places) ? items.places.map(function (item) {\n          return __jsx(ResultCard, {\n            key: item.id,\n            item: item,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 15\n            }\n          });\n        }) : null;\n\n      case \"EVENTS\":\n        return Array.isArray(items.events) ? items.events.map(function (item) {\n          return __jsx(ResultCard, {\n            key: item.id,\n            item: item,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 15\n            }\n          });\n        }) : null;\n\n      default:\n        if (Array.isArray(items.places) && Array.isArray(items.events)) {\n          return state.resultsType === \"PLACES\" ? items.places.map(function (item) {\n            return __jsx(ResultCard, {\n              key: item.id,\n              item: item,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 17\n              }\n            });\n          }) : items.events.map(function (item) {\n            return __jsx(ResultCard, {\n              key: item.id,\n              item: item,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 17\n              }\n            });\n          });\n        } else {\n          return null;\n        }\n\n    }\n  };\n\n  var setTypeButtons = function setTypeButtons() {\n    if (searchType) {\n      switch (searchType) {\n        case \"ALL\":\n          return __jsx(React.Fragment, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 13\n            }\n          }, __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: function onClick() {\n              return setState({\n                resultsType: \"PLACES\"\n              });\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 15\n            }\n          }, \"Places\"), __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: function onClick() {\n              return setState({\n                resultsType: \"EVENTS\"\n              });\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 15\n            }\n          }, \"Events\"));\n\n        case \"PLACES\":\n          return __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: function onClick() {\n              return setState({\n                resultsType: \"PLACES\"\n              });\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 13\n            }\n          }, \"Places\");\n\n        case \"EVENTS\":\n          return __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: function onClick() {\n              return setState({\n                resultsType: \"EVENTS\"\n              });\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 13\n            }\n          }, \"Events\");\n\n        default:\n          return __jsx(React.Fragment, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 13\n            }\n          }, __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: function onClick() {\n              return setState({\n                resultsType: \"PLACES\"\n              });\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 15\n            }\n          }, \"Places\"), __jsx(\"button\", {\n            className: css.typeButton,\n            onClick: function onClick() {\n              return setState({\n                resultsType: \"EVENTS\"\n              });\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 15\n            }\n          }, \"Events\"));\n      }\n    } else {\n      return __jsx(React.Fragment, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 9\n        }\n      }, __jsx(\"button\", {\n        className: css.typeButton,\n        onClick: function onClick() {\n          return setState({\n            resultsType: \"PLACES\"\n          });\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }\n      }, \"Places\"), __jsx(\"button\", {\n        className: css.typeButton,\n        onClick: function onClick() {\n          return setState({\n            resultsType: \"EVENTS\"\n          });\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }\n      }, \"Events\"));\n    }\n  };\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 5\n    }\n  }, __jsx(\"main\", {\n    className: css.queriedPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }, __jsx(\"section\", {\n    className: css.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, setTypeButtons(), __jsx(\"button\", {\n    className: css.sort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, \"Sort\")), __jsx(\"div\", {\n    className: css.resultsSlider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  }, determineItems())));\n}\n\n_s(Queried, \"YaSE04uFrK5Ev6iRtmvOc2euI84=\");\n\n_c = Queried;\n\nQueried.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref2) {\n    var query, pathname, asPath, searchType, location, radius, placeType, startFormatted, endFormatted, unixStartDate, unixEndDate, eventsCategory, APICalls, callAPIS, results, checkURLIsString, paramValueArray, searchParamsValues;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            query = _ref2.query, pathname = _ref2.pathname, asPath = _ref2.asPath;\n            searchType = query.searchType, location = query.location, radius = query.radius, placeType = query.placeType, startFormatted = query.startFormatted, endFormatted = query.endFormatted, unixStartDate = query.unixStartDate, unixEndDate = query.unixEndDate, eventsCategory = query.eventsCategory;\n\n            if (!(location && radius && startFormatted && endFormatted)) {\n              _context5.next = 12;\n              break;\n            }\n\n            console.log(\"api call\");\n\n            APICalls = /*#__PURE__*/function () {\n              function APICalls(searchParams) {\n                _classCallCheck(this, APICalls);\n\n                _defineProperty(this, \"searchParams\", void 0);\n\n                _defineProperty(this, \"results\", void 0);\n\n                this.searchParams = searchParams;\n                this.results = {\n                  items: {\n                    places: [],\n                    events: []\n                  },\n                  errors: {\n                    yelpPlaces: \"\",\n                    yelpEvents: \"\",\n                    ticketmaster: \"\"\n                  }\n                };\n              }\n\n              _createClass(APICalls, [{\n                key: \"yelpBusinesses\",\n                value: function () {\n                  var _yelpBusinesses = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                    var _this$searchParams, location, radius, placeType, yelpBusinessesResponse;\n\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _this$searchParams = this.searchParams, location = _this$searchParams.location, radius = _this$searchParams.radius, placeType = _this$searchParams.placeType;\n                            _context.next = 3;\n                            return yelpBusinessesCall({\n                              location: location,\n                              radius: radius,\n                              placeType: placeType\n                            });\n\n                          case 3:\n                            yelpBusinessesResponse = _context.sent;\n                            Array.isArray(yelpBusinessesResponse) ? this.results.items.places = yelpBusinessesResponse : this.results.errors.yelpPlaces = \"\".concat(yelpBusinessesResponse);\n\n                          case 5:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, this);\n                  }));\n\n                  function yelpBusinesses() {\n                    return _yelpBusinesses.apply(this, arguments);\n                  }\n\n                  return yelpBusinesses;\n                }()\n              }, {\n                key: \"yelpEvents\",\n                value: function () {\n                  var _yelpEvents = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                    var _this$searchParams2, location, radius, unixStartDate, unixEndDate, yelpEventsResponse;\n\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _this$searchParams2 = this.searchParams, location = _this$searchParams2.location, radius = _this$searchParams2.radius, unixStartDate = _this$searchParams2.unixStartDate, unixEndDate = _this$searchParams2.unixEndDate;\n                            _context2.next = 3;\n                            return yelpEventsCall({\n                              location: location,\n                              radius: radius,\n                              unixStartDate: unixStartDate,\n                              unixEndDate: unixEndDate\n                            });\n\n                          case 3:\n                            yelpEventsResponse = _context2.sent;\n                            Array.isArray(yelpEventsResponse) ? this.results.items.events = [].concat(_toConsumableArray(this.results.items.events), _toConsumableArray(yelpEventsResponse)) : this.results.errors.yelpEvents = \"\".concat(yelpEventsResponse);\n\n                          case 5:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, this);\n                  }));\n\n                  function yelpEvents() {\n                    return _yelpEvents.apply(this, arguments);\n                  }\n\n                  return yelpEvents;\n                }()\n              }, {\n                key: \"ticketMaster\",\n                value: function () {\n                  var _ticketMaster = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                    var _this$searchParams3, location, radius, startFormatted, endFormatted, ticketMasterResponse;\n\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            _this$searchParams3 = this.searchParams, location = _this$searchParams3.location, radius = _this$searchParams3.radius, startFormatted = _this$searchParams3.startFormatted, endFormatted = _this$searchParams3.endFormatted;\n                            _context3.next = 3;\n                            return ticketMasterCall({\n                              location: location,\n                              radius: radius,\n                              startFormatted: startFormatted,\n                              endFormatted: endFormatted\n                            });\n\n                          case 3:\n                            ticketMasterResponse = _context3.sent;\n                            Array.isArray(ticketMasterResponse) ? this.results.items.events = [].concat(_toConsumableArray(this.results.items.events), _toConsumableArray(ticketMasterResponse)) : this.results.errors.ticketmaster = \"\".concat(ticketMasterResponse);\n\n                          case 5:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3, this);\n                  }));\n\n                  function ticketMaster() {\n                    return _ticketMaster.apply(this, arguments);\n                  }\n\n                  return ticketMaster;\n                }()\n              }]);\n\n              return APICalls;\n            }();\n\n            callAPIS = /*#__PURE__*/function () {\n              var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(searchType) {\n                var APICall;\n                return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                  while (1) {\n                    switch (_context4.prev = _context4.next) {\n                      case 0:\n                        APICall = new APICalls({\n                          location: location,\n                          radius: radius,\n                          placeType: placeType,\n                          startFormatted: startFormatted,\n                          endFormatted: endFormatted,\n                          unixStartDate: unixStartDate,\n                          unixEndDate: unixEndDate,\n                          eventsCategory: eventsCategory\n                        });\n                        _context4.prev = 1;\n                        _context4.t0 = searchType;\n                        _context4.next = _context4.t0 === \"PLACES\" ? 5 : _context4.t0 === \"EVENTS\" ? 7 : _context4.t0 === \"ALL\" ? 10 : 14;\n                        break;\n\n                      case 5:\n                        APICall.yelpBusinesses();\n                        return _context4.abrupt(\"return\", APICall.results);\n\n                      case 7:\n                        APICall.yelpEvents();\n                        APICall.ticketMaster();\n                        return _context4.abrupt(\"return\", APICall.results);\n\n                      case 10:\n                        APICall.yelpBusinesses();\n                        APICall.yelpEvents();\n                        APICall.ticketMaster();\n                        return _context4.abrupt(\"return\", APICall.results);\n\n                      case 14:\n                        APICall.yelpBusinesses();\n                        APICall.yelpEvents();\n                        APICall.ticketMaster();\n                        return _context4.abrupt(\"return\", APICall.results);\n\n                      case 18:\n                        _context4.next = 26;\n                        break;\n\n                      case 20:\n                        _context4.prev = 20;\n                        _context4.t1 = _context4[\"catch\"](1);\n                        APICall.results.errors.yelpPlaces = \"CALL ERROR\";\n                        APICall.results.errors.yelpEvents = \"CALL ERROR\";\n                        APICall.results.errors.ticketmaster = \"CALL ERROR\";\n                        return _context4.abrupt(\"return\", APICall.results);\n\n                      case 26:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }\n                }, _callee4, null, [[1, 20]]);\n              }));\n\n              return function callAPIS(_x2) {\n                return _ref4.apply(this, arguments);\n              };\n            }();\n\n            _context5.next = 8;\n            return callAPIS(searchType);\n\n          case 8:\n            results = _context5.sent;\n            return _context5.abrupt(\"return\", {\n              results: results,\n              searchType: searchType\n            });\n\n          case 12:\n            checkURLIsString = query.queried.toString();\n            paramValueArray = checkURLIsString.split(\"+\");\n            searchParamsValues = {};\n            paramValueArray.forEach(function (param) {\n              var indexOfEqual = param.search(\"=\");\n              if (indexOfEqual === -1) return;else {\n                var paramKey = param.substring(0, indexOfEqual);\n                var paramValue = param.substring(indexOfEqual + 1);\n                searchParamsValues[paramKey] = paramValue;\n              }\n            });\n            return _context5.abrupt(\"return\", {\n              results: {\n                error: \"BadCall\"\n              },\n              searchType: \"ALL\"\n            });\n\n          case 17:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar _c;\n\n$RefreshReg$(_c, \"Queried\");","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","Layout","ResultCard","yelpBusinessesCall","yelpEventsCall","ticketMasterCall","css","Queried","results","items","errors","searchType","useState","resultsType","state","setState","console","log","determineItems","Array","isArray","places","events","map","item","id","setTypeButtons","typeButton","queriedPage","header","sort","resultsSlider","getInitialProps","query","pathname","asPath","location","radius","placeType","startFormatted","endFormatted","unixStartDate","unixEndDate","eventsCategory","APICalls","searchParams","yelpPlaces","yelpEvents","ticketmaster","yelpBusinessesResponse","yelpEventsResponse","ticketMasterResponse","callAPIS","APICall","yelpBusinesses","ticketMaster","checkURLIsString","queried","toString","paramValueArray","split","searchParamsValues","forEach","param","indexOfEqual","search","paramKey","substring","paramValue","error"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { Layout, ResultCard } from \"../../components\";\r\nimport {\r\n  yelpBusinessesCall,\r\n  yelpEventsCall,\r\n  ticketMasterCall,\r\n} from \"../../apicalls\";\r\nimport css from \"../../styles/Queried.module.scss\";\r\n\r\nexport default function Queried({\r\n  results: { items, errors },\r\n  searchType,\r\n}): JSX.Element {\r\n  const [state, setState] = React.useState({ resultsType: \"\" });\r\n\r\n  console.log(items);\r\n\r\n  const determineItems: () => JSX.Element | null = () => {\r\n    if (!items) return null;\r\n    switch (searchType) {\r\n      case \"ALL\":\r\n        if (Array.isArray(items.places) && Array.isArray(items.events)) {\r\n          return state.resultsType === \"PLACES\"\r\n            ? items.places.map((item) => (\r\n                <ResultCard key={item.id} item={item}></ResultCard>\r\n              ))\r\n            : items.events.map((item) => (\r\n                <ResultCard key={item.id} item={item}></ResultCard>\r\n              ));\r\n        } else {\r\n          return null;\r\n        }\r\n\r\n      case \"PLACES\":\r\n        return Array.isArray(items.places)\r\n          ? items.places.map((item) => (\r\n              <ResultCard key={item.id} item={item}></ResultCard>\r\n            ))\r\n          : null;\r\n      case \"EVENTS\":\r\n        return Array.isArray(items.events)\r\n          ? items.events.map((item) => (\r\n              <ResultCard key={item.id} item={item}></ResultCard>\r\n            ))\r\n          : null;\r\n      default:\r\n        if (Array.isArray(items.places) && Array.isArray(items.events)) {\r\n          return state.resultsType === \"PLACES\"\r\n            ? items.places.map((item) => (\r\n                <ResultCard key={item.id} item={item}></ResultCard>\r\n              ))\r\n            : items.events.map((item) => (\r\n                <ResultCard key={item.id} item={item}></ResultCard>\r\n              ));\r\n        } else {\r\n          return null;\r\n        }\r\n    }\r\n  };\r\n\r\n  const setTypeButtons: () => JSX.Element = () => {\r\n    if (searchType) {\r\n      switch (searchType) {\r\n        case \"ALL\":\r\n          return (\r\n            <React.Fragment>\r\n              <button\r\n                className={css.typeButton}\r\n                onClick={() => setState({ resultsType: \"PLACES\" })}\r\n              >\r\n                Places\r\n              </button>\r\n              <button\r\n                className={css.typeButton}\r\n                onClick={() => setState({ resultsType: \"EVENTS\" })}\r\n              >\r\n                Events\r\n              </button>\r\n            </React.Fragment>\r\n          );\r\n        case \"PLACES\":\r\n          return (\r\n            <button\r\n              className={css.typeButton}\r\n              onClick={() => setState({ resultsType: \"PLACES\" })}\r\n            >\r\n              Places\r\n            </button>\r\n          );\r\n\r\n        case \"EVENTS\":\r\n          return (\r\n            <button\r\n              className={css.typeButton}\r\n              onClick={() => setState({ resultsType: \"EVENTS\" })}\r\n            >\r\n              Events\r\n            </button>\r\n          );\r\n        default:\r\n          return (\r\n            <React.Fragment>\r\n              <button\r\n                className={css.typeButton}\r\n                onClick={() => setState({ resultsType: \"PLACES\" })}\r\n              >\r\n                Places\r\n              </button>\r\n              <button\r\n                className={css.typeButton}\r\n                onClick={() => setState({ resultsType: \"EVENTS\" })}\r\n              >\r\n                Events\r\n              </button>\r\n            </React.Fragment>\r\n          );\r\n      }\r\n    } else {\r\n      return (\r\n        <React.Fragment>\r\n          <button\r\n            className={css.typeButton}\r\n            onClick={() => setState({ resultsType: \"PLACES\" })}\r\n          >\r\n            Places\r\n          </button>\r\n          <button\r\n            className={css.typeButton}\r\n            onClick={() => setState({ resultsType: \"EVENTS\" })}\r\n          >\r\n            Events\r\n          </button>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <main className={css.queriedPage}>\r\n        {/* <section className={css.queryDisplay}></section> */}\r\n        <section className={css.header}>\r\n          {setTypeButtons()}\r\n          <button className={css.sort}>Sort</button>\r\n        </section>\r\n\r\n        <div className={css.resultsSlider}>{determineItems()}</div>\r\n      </main>\r\n    </Layout>\r\n  );\r\n}\r\n\r\ntype Results = {\r\n  items: { places: { [key: string]: any }[]; events: { [key: string]: any }[] };\r\n  errors: { yelpPlaces: string; yelpEvents: string; ticketmaster: string };\r\n};\r\n\r\ntype APIResponse = Promise<{ [key: string]: any }[] | string>;\r\n\r\ntype SearchParams = { [key: string]: any };\r\n\r\nQueried.getInitialProps = async ({\r\n  query,\r\n  pathname,\r\n  asPath,\r\n}): Promise<{\r\n  results: any;\r\n  searchType: string;\r\n}> => {\r\n  const {\r\n    searchType,\r\n    location,\r\n    radius,\r\n    placeType,\r\n    startFormatted,\r\n    endFormatted,\r\n    unixStartDate,\r\n    unixEndDate,\r\n    eventsCategory,\r\n  } = query;\r\n\r\n  if (location && radius && startFormatted && endFormatted) {\r\n    console.log(\"api call\");\r\n    class APICalls {\r\n      searchParams: SearchParams;\r\n      results: Results;\r\n      constructor(searchParams: SearchParams) {\r\n        this.searchParams = searchParams;\r\n        this.results = {\r\n          items: { places: [], events: [] },\r\n          errors: { yelpPlaces: \"\", yelpEvents: \"\", ticketmaster: \"\" },\r\n        };\r\n      }\r\n\r\n      public async yelpBusinesses() {\r\n        const { location, radius, placeType } = this.searchParams;\r\n        const yelpBusinessesResponse: APIResponse = await yelpBusinessesCall({\r\n          location,\r\n          radius,\r\n          placeType,\r\n        });\r\n        Array.isArray(yelpBusinessesResponse)\r\n          ? (this.results.items.places = yelpBusinessesResponse)\r\n          : (this.results.errors.yelpPlaces = `${yelpBusinessesResponse}`);\r\n      }\r\n      public async yelpEvents() {\r\n        const {\r\n          location,\r\n          radius,\r\n          unixStartDate,\r\n          unixEndDate,\r\n        } = this.searchParams;\r\n        const yelpEventsResponse: APIResponse = await yelpEventsCall({\r\n          location,\r\n          radius,\r\n          unixStartDate,\r\n          unixEndDate,\r\n        });\r\n        Array.isArray(yelpEventsResponse)\r\n          ? (this.results.items.events = [\r\n              ...this.results.items.events,\r\n              ...yelpEventsResponse,\r\n            ])\r\n          : (this.results.errors.yelpEvents = `${yelpEventsResponse}`);\r\n      }\r\n      public async ticketMaster() {\r\n        const {\r\n          location,\r\n          radius,\r\n          startFormatted,\r\n          endFormatted,\r\n        } = this.searchParams;\r\n        const ticketMasterResponse: APIResponse = await ticketMasterCall({\r\n          location,\r\n          radius,\r\n          startFormatted,\r\n          endFormatted,\r\n        });\r\n        Array.isArray(ticketMasterResponse)\r\n          ? (this.results.items.events = [\r\n              ...this.results.items.events,\r\n              ...ticketMasterResponse,\r\n            ])\r\n          : (this.results.errors.ticketmaster = `${ticketMasterResponse}`);\r\n      }\r\n    }\r\n\r\n    const callAPIS: (searchType: string) => Promise<Results> = async (\r\n      searchType\r\n    ) => {\r\n      const APICall = new APICalls({\r\n        location,\r\n        radius,\r\n        placeType,\r\n        startFormatted,\r\n        endFormatted,\r\n        unixStartDate,\r\n        unixEndDate,\r\n        eventsCategory,\r\n      });\r\n\r\n      try {\r\n        switch (searchType) {\r\n          case \"PLACES\":\r\n            APICall.yelpBusinesses();\r\n\r\n            return APICall.results;\r\n\r\n          case \"EVENTS\":\r\n            APICall.yelpEvents();\r\n            APICall.ticketMaster();\r\n            return APICall.results;\r\n          case \"ALL\":\r\n            APICall.yelpBusinesses();\r\n            APICall.yelpEvents();\r\n            APICall.ticketMaster();\r\n            return APICall.results;\r\n          default:\r\n            APICall.yelpBusinesses();\r\n            APICall.yelpEvents();\r\n            APICall.ticketMaster();\r\n            return APICall.results;\r\n        }\r\n      } catch {\r\n        APICall.results.errors.yelpPlaces = \"CALL ERROR\";\r\n        APICall.results.errors.yelpEvents = \"CALL ERROR\";\r\n        APICall.results.errors.ticketmaster = \"CALL ERROR\";\r\n        return APICall.results;\r\n      }\r\n    };\r\n\r\n    const results: Results = await callAPIS(searchType);\r\n\r\n    return {\r\n      results,\r\n      searchType,\r\n    };\r\n  } else {\r\n    const checkURLIsString: string = query.queried.toString();\r\n    const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n    const searchParamsValues: SearchParams = {};\r\n\r\n    paramValueArray.forEach((param) => {\r\n      const indexOfEqual: number = param.search(\"=\");\r\n      if (indexOfEqual === -1) return;\r\n      else {\r\n        const paramKey: string = param.substring(0, indexOfEqual);\r\n        const paramValue: string = param.substring(indexOfEqual + 1);\r\n        searchParamsValues[paramKey] = paramValue;\r\n      }\r\n    });\r\n\r\n    return {\r\n      results: { error: \"BadCall\" },\r\n      searchType: \"ALL\",\r\n    };\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}