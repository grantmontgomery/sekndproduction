{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\components\\\\SearchBox\\\\SearchBox.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from \"react\";\nimport { SearchSelector, WhereInput, WhenInput, EventsInput, PlacesInput } from \"./Parts\";\nimport Link from \"next/link\";\nimport css from \"./SearchBox.module.scss\";\nexport const SearchBox = props => {\n  const [searchQuery, setSearchQuery] = React.useState({\n    searchType: \"ALL\",\n    eventsCategory: \"\",\n    radius: \"\",\n    startTime: 0,\n    location: \"\",\n    endTime: 0,\n    endDate: null,\n    startDate: null,\n    placeType: \"\",\n    startFormatted: \"\",\n    endFormatted: \"\",\n    unixStartDate: null,\n    unixEndDate: null,\n    ticketMasterCategories: \"\",\n    yelpCategories: \"\"\n  });\n\n  const checkFields = searchType => {\n    switch (searchType) {\n      case \"ALL\":\n        return searchQuery.location !== \"\" && searchQuery.startTime !== 0 && searchQuery.radius !== \"\" && searchQuery.endTime !== 0 && searchQuery.placeType !== \"\" ? __jsx(Link, {\n          href: \"/search/[queried]\",\n          as: `/search/searchType=ALL+location=${searchQuery.location}+radius=${searchQuery.radius}+placeType=${searchQuery.placeType}+startFormatted=${searchQuery.startFormatted}+endFormatted=${searchQuery.endFormatted}+unixStartDate=${searchQuery.unixStartDate}+unixEndDate=${searchQuery.unixEndDate}+eventsCategory=${searchQuery.eventsCategory}`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 11\n          }\n        }, __jsx(\"button\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }\n        }, \"Search\")) : __jsx(\"button\", {\n          onClick: () => alert(\"please fill out missing fields\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 11\n          }\n        }, \"Search\");\n\n      case \"PLACES\":\n        return searchQuery.location !== \"\" && searchQuery.startTime !== 0 && searchQuery.radius !== \"\" && searchQuery.endTime !== 0 && searchQuery.placeType !== \"\" ? __jsx(Link, {\n          href: \"/search/[queried]\",\n          as: `/search/searchType=PLACES+location=${searchQuery.location}+radius=${searchQuery.radius}+placeType=${searchQuery.placeType}+startFormatted=${searchQuery.startFormatted}+endFormatted=${searchQuery.endFormatted}`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 11\n          }\n        }, __jsx(\"button\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }\n        }, \"Search\")) : __jsx(\"button\", {\n          onClick: () => alert(\"please fill out missing fields\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 11\n          }\n        }, \"Search\");\n\n      case \"EVENTS\":\n        return searchQuery.location !== \"\" && searchQuery.startTime !== 0 && searchQuery.radius !== \"\" && searchQuery.endTime !== 0 ? __jsx(Link, {\n          href: \"/search/[queried]\",\n          as: `/search/searchType=EVENTS+location=${searchQuery.location}+radius=${searchQuery.radius}+startFormatted=${searchQuery.startFormatted}+endFormatted=${searchQuery.endFormatted}+unixStartDate=${searchQuery.unixStartDate}+unixEndDate=${searchQuery.unixEndDate}+eventsCategory=${searchQuery.eventsCategory}`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 11\n          }\n        }, __jsx(\"button\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }\n        }, \"Search\")) : __jsx(\"button\", {\n          onClick: () => alert(\"please fill out missing fields\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 11\n          }\n        }, \"Search\");\n\n      default:\n        return searchQuery.location !== \"\" && searchQuery.startTime !== 0 && searchQuery.radius !== \"\" && searchQuery.endTime !== 0 && searchQuery.placeType !== \"\" ? __jsx(Link, {\n          href: \"/search/[queried]\",\n          as: `/search/searchType=ALL+location=${searchQuery.location}+radius=${searchQuery.radius}+placeType=${searchQuery.placeType}+startFormatted=${searchQuery.startFormatted}+endFormatted=${searchQuery.endFormatted}+unixStartDate=${searchQuery.unixStartDate}+unixEndDate=${searchQuery.unixEndDate}+eventsCategory=${searchQuery.eventsCategory}`,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 11\n          }\n        }, __jsx(\"button\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }\n        }, \"Search\")) : __jsx(\"button\", {\n          onClick: () => alert(\"please fill out missing fields\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 11\n          }\n        }, \"Search\");\n    }\n  };\n\n  const linked = () => {\n    return __jsx(Link, {\n      href: \"/search/[queried]\",\n      as: `/search/${searchQuery}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 7\n      }\n    }, __jsx(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }\n    }, \"Search\"));\n  };\n\n  const handleInputChange = (key, input) => {\n    return setSearchQuery(state => _objectSpread(_objectSpread({}, state), {}, {\n      [key]: input\n    }));\n  };\n\n  const handleQueryDate = (key, date) => {\n    if (key === \"startDate\") {\n      const unixStartDate = Math.round(new Date(date).getTime() / 1000);\n      const timeOffSet = date.getTimezoneOffset() * 60;\n      const localStartTimeISO = new Date((unixStartDate - timeOffSet) * 1000).toISOString();\n      const localStartTimeISOFormatted = `${localStartTimeISO.substring(0, 19)}Z`;\n      return setSearchQuery(state => _objectSpread(_objectSpread({}, state), {}, {\n        [key]: date,\n        unixStartDate,\n        startFormatted: localStartTimeISOFormatted\n      }));\n    } else {\n      const unixEndDate = Math.round(new Date(date).getTime() / 1000);\n      const timeOffSet = date.getTimezoneOffset() * 60;\n      const localEndTimeISO = new Date((unixEndDate - timeOffSet) * 1000).toISOString();\n      const localEndTimeISOFormatted = `${localEndTimeISO.substring(0, 19)}Z`;\n      return setSearchQuery(state => _objectSpread(_objectSpread({}, state), {}, {\n        [key]: date,\n        unixEndDate,\n        endFormatted: localEndTimeISOFormatted\n      }));\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: css.searchBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 5\n    }\n  }, __jsx(SearchSelector, {\n    searchType: searchQuery.searchType,\n    handleInputChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }\n  }), __jsx(WhereInput, {\n    handleInputChange: handleInputChange,\n    location: searchQuery.location,\n    radius: searchQuery.radius,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }\n  }), __jsx(WhenInput, {\n    handleQueryDate: handleQueryDate,\n    startDate: searchQuery.startDate,\n    endDate: searchQuery.endDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }\n  }), __jsx(EventsInput, {\n    handleInputChange: handleInputChange,\n    eventsCategory: searchQuery.eventsCategory,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }\n  }), __jsx(PlacesInput, {\n    handleInputChange: handleInputChange,\n    placeType: searchQuery.placeType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }\n  }), __jsx(Link, {\n    href: \"/search/[queried]\",\n    as: `/search/location=${searchQuery.location}+radius=${searchQuery.radius}+placeType=${searchQuery.placeType}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }\n  }, \"Search\")));\n};","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/components/SearchBox/SearchBox.tsx"],"names":["React","SearchSelector","WhereInput","WhenInput","EventsInput","PlacesInput","Link","css","SearchBox","props","searchQuery","setSearchQuery","useState","searchType","eventsCategory","radius","startTime","location","endTime","endDate","startDate","placeType","startFormatted","endFormatted","unixStartDate","unixEndDate","ticketMasterCategories","yelpCategories","checkFields","alert","linked","handleInputChange","key","input","state","handleQueryDate","date","Math","round","Date","getTime","timeOffSet","getTimezoneOffset","localStartTimeISO","toISOString","localStartTimeISOFormatted","substring","localEndTimeISO","localEndTimeISOFormatted","searchBox"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n  SearchSelector,\r\n  WhereInput,\r\n  WhenInput,\r\n  EventsInput,\r\n  PlacesInput,\r\n} from \"./Parts\";\r\nimport Link from \"next/link\";\r\nimport css from \"./SearchBox.module.scss\";\r\n\r\nexport type InputChange = (key: string, input: string | Date) => void;\r\n\r\nexport default interface InputProps {\r\n  handleInputChange: InputChange;\r\n  searchType: string;\r\n  placeType: string;\r\n  radius: string;\r\n  eventsCategory: string;\r\n  location: string;\r\n  startDate: Date;\r\n  endDate: Date;\r\n  handleQueryDate: (key: string, date: Date) => void;\r\n}\r\n\r\nexport interface SearchQuery {\r\n  searchType: string;\r\n  eventsCategory: string;\r\n  radius: string;\r\n  location: string;\r\n  startTime: number;\r\n  endTime: number;\r\n  placeType: string;\r\n  endDate: Date;\r\n  startDate: Date;\r\n  startFormatted: string;\r\n  endFormatted: string;\r\n  unixStartDate: number;\r\n  unixEndDate: number;\r\n  ticketMasterCategories: string;\r\n  yelpCategories: string;\r\n}\r\n\r\nexport const SearchBox: React.FC = (props) => {\r\n  const [searchQuery, setSearchQuery] = React.useState<SearchQuery>({\r\n    searchType: \"ALL\",\r\n    eventsCategory: \"\",\r\n    radius: \"\",\r\n    startTime: 0,\r\n    location: \"\",\r\n    endTime: 0,\r\n    endDate: null,\r\n    startDate: null,\r\n    placeType: \"\",\r\n    startFormatted: \"\",\r\n    endFormatted: \"\",\r\n    unixStartDate: null,\r\n    unixEndDate: null,\r\n    ticketMasterCategories: \"\",\r\n    yelpCategories: \"\",\r\n  });\r\n\r\n  const checkFields: (searchType: string) => string = (searchType) => {\r\n    switch (searchType) {\r\n      case \"ALL\":\r\n        return searchQuery.location !== \"\" &&\r\n          searchQuery.startTime !== 0 &&\r\n          searchQuery.radius !== \"\" &&\r\n          searchQuery.endTime !== 0 &&\r\n          searchQuery.placeType !== \"\" ? (\r\n          <Link\r\n            href=\"/search/[queried]\"\r\n            as={`/search/searchType=ALL+location=${searchQuery.location}+radius=${searchQuery.radius}+placeType=${searchQuery.placeType}+startFormatted=${searchQuery.startFormatted}+endFormatted=${searchQuery.endFormatted}+unixStartDate=${searchQuery.unixStartDate}+unixEndDate=${searchQuery.unixEndDate}+eventsCategory=${searchQuery.eventsCategory}`}\r\n          >\r\n            <button>Search</button>\r\n          </Link>\r\n        ) : (\r\n          <button onClick={() => alert(\"please fill out missing fields\")}>\r\n            Search\r\n          </button>\r\n        );\r\n\r\n      case \"PLACES\":\r\n        return searchQuery.location !== \"\" &&\r\n          searchQuery.startTime !== 0 &&\r\n          searchQuery.radius !== \"\" &&\r\n          searchQuery.endTime !== 0 &&\r\n          searchQuery.placeType !== \"\" ? (\r\n          <Link\r\n            href=\"/search/[queried]\"\r\n            as={`/search/searchType=PLACES+location=${searchQuery.location}+radius=${searchQuery.radius}+placeType=${searchQuery.placeType}+startFormatted=${searchQuery.startFormatted}+endFormatted=${searchQuery.endFormatted}`}\r\n          >\r\n            <button>Search</button>\r\n          </Link>\r\n        ) : (\r\n          <button onClick={() => alert(\"please fill out missing fields\")}>\r\n            Search\r\n          </button>\r\n        );\r\n\r\n      case \"EVENTS\":\r\n        return searchQuery.location !== \"\" &&\r\n          searchQuery.startTime !== 0 &&\r\n          searchQuery.radius !== \"\" &&\r\n          searchQuery.endTime !== 0 ? (\r\n          <Link\r\n            href=\"/search/[queried]\"\r\n            as={`/search/searchType=EVENTS+location=${searchQuery.location}+radius=${searchQuery.radius}+startFormatted=${searchQuery.startFormatted}+endFormatted=${searchQuery.endFormatted}+unixStartDate=${searchQuery.unixStartDate}+unixEndDate=${searchQuery.unixEndDate}+eventsCategory=${searchQuery.eventsCategory}`}\r\n          >\r\n            <button>Search</button>\r\n          </Link>\r\n        ) : (\r\n          <button onClick={() => alert(\"please fill out missing fields\")}>\r\n            Search\r\n          </button>\r\n        );\r\n\r\n      default:\r\n        return searchQuery.location !== \"\" &&\r\n          searchQuery.startTime !== 0 &&\r\n          searchQuery.radius !== \"\" &&\r\n          searchQuery.endTime !== 0 &&\r\n          searchQuery.placeType !== \"\" ? (\r\n          <Link\r\n            href=\"/search/[queried]\"\r\n            as={`/search/searchType=ALL+location=${searchQuery.location}+radius=${searchQuery.radius}+placeType=${searchQuery.placeType}+startFormatted=${searchQuery.startFormatted}+endFormatted=${searchQuery.endFormatted}+unixStartDate=${searchQuery.unixStartDate}+unixEndDate=${searchQuery.unixEndDate}+eventsCategory=${searchQuery.eventsCategory}`}\r\n          >\r\n            <button>Search</button>\r\n          </Link>\r\n        ) : (\r\n          <button onClick={() => alert(\"please fill out missing fields\")}>\r\n            Search\r\n          </button>\r\n        );\r\n    }\r\n  };\r\n\r\n  const linked = () => {\r\n    return (\r\n      <Link href=\"/search/[queried]\" as={`/search/${searchQuery}`}>\r\n        <button>Search</button>\r\n      </Link>\r\n    );\r\n  };\r\n\r\n  const handleInputChange: InputChange = (key, input) => {\r\n    return setSearchQuery((state) => ({\r\n      ...state,\r\n      [key]: input,\r\n    }));\r\n  };\r\n\r\n  const handleQueryDate: (key: string, date: Date) => void = (key, date) => {\r\n    if (key === \"startDate\") {\r\n      const unixStartDate: number = Math.round(new Date(date).getTime() / 1000);\r\n      const timeOffSet: number = date.getTimezoneOffset() * 60;\r\n      const localStartTimeISO: string = new Date(\r\n        (unixStartDate - timeOffSet) * 1000\r\n      ).toISOString();\r\n      const localStartTimeISOFormatted: string = `${localStartTimeISO.substring(\r\n        0,\r\n        19\r\n      )}Z`;\r\n\r\n      return setSearchQuery((state) => ({\r\n        ...state,\r\n        [key]: date,\r\n        unixStartDate,\r\n        startFormatted: localStartTimeISOFormatted,\r\n      }));\r\n    } else {\r\n      const unixEndDate: number = Math.round(new Date(date).getTime() / 1000);\r\n      const timeOffSet: number = date.getTimezoneOffset() * 60;\r\n      const localEndTimeISO: string = new Date(\r\n        (unixEndDate - timeOffSet) * 1000\r\n      ).toISOString();\r\n      const localEndTimeISOFormatted: string = `${localEndTimeISO.substring(\r\n        0,\r\n        19\r\n      )}Z`;\r\n      return setSearchQuery((state) => ({\r\n        ...state,\r\n        [key]: date,\r\n        unixEndDate,\r\n        endFormatted: localEndTimeISOFormatted,\r\n      }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={css.searchBox}>\r\n      <SearchSelector\r\n        searchType={searchQuery.searchType}\r\n        handleInputChange={handleInputChange}\r\n      ></SearchSelector>\r\n      <WhereInput\r\n        handleInputChange={handleInputChange}\r\n        location={searchQuery.location}\r\n        radius={searchQuery.radius}\r\n      ></WhereInput>\r\n      <WhenInput\r\n        handleQueryDate={handleQueryDate}\r\n        startDate={searchQuery.startDate}\r\n        endDate={searchQuery.endDate}\r\n      ></WhenInput>\r\n      <EventsInput\r\n        handleInputChange={handleInputChange}\r\n        eventsCategory={searchQuery.eventsCategory}\r\n      ></EventsInput>\r\n      <PlacesInput\r\n        handleInputChange={handleInputChange}\r\n        placeType={searchQuery.placeType}\r\n      ></PlacesInput>\r\n      {/* <button\r\n        className={css.searchButton}\r\n        onClick={() => (\r\n          yelpEventsCall(searchQuery),\r\n          yelpBusinessesCall(searchQuery),\r\n          ticketmasterCall(searchQuery)\r\n        )}\r\n      >\r\n        Search\r\n      </button> */}\r\n      <Link\r\n        href=\"/search/[queried]\"\r\n        as={`/search/location=${searchQuery.location}+radius=${searchQuery.radius}+placeType=${searchQuery.placeType}`}\r\n      >\r\n        <button>Search</button>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}