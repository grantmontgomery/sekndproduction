{"ast":null,"code":"var __jsx = React.createElement;\nimport * as React from \"react\";\nimport { Layout, ResultCard } from \"../../components\";\nimport { yelpBusinessesCall } from \"../../apicalls\";\nimport css from \"../../styles/Queried.module.scss\";\nexport default function Queried({\n  results,\n  searchType\n}) {\n  const [state, setState] = React.useState({\n    resultsType: \"\"\n  });\n  React.useEffect(() => {\n    if (searchType) {\n      switch (searchType) {\n        case \"ALL\":\n      }\n    }\n  });\n\n  const setTypeButtons = () => {\n    if (searchType) {\n      switch (searchType) {\n        case \"ALL\":\n          return __jsx(React.Fragment, null, __jsx(\"button\", {\n            className: css.typeButton\n          }, \"Places\"), __jsx(\"button\", {\n            className: css.typeButton\n          }, \"Events\"));\n\n        case \"PLACES\":\n          return __jsx(\"button\", {\n            className: css.typeButton\n          }, \"Places\");\n\n        case \"EVENTS\":\n          return __jsx(\"button\", {\n            className: css.typeButton\n          }, \"Events\");\n\n        default:\n          return __jsx(React.Fragment, null, __jsx(\"button\", {\n            className: css.typeButton\n          }, \"Places\"), __jsx(\"button\", {\n            className: css.typeButton\n          }, \"Events\"));\n      }\n    } else {\n      return __jsx(React.Fragment, null, __jsx(\"button\", {\n        className: css.typeButton\n      }, \"Places\"), __jsx(\"button\", {\n        className: css.typeButton\n      }, \"Events\"));\n    }\n  };\n\n  console.log(Array.isArray(results));\n  return __jsx(Layout, null, __jsx(\"main\", {\n    className: css.queriedPage\n  }, __jsx(\"section\", {\n    className: css.queryDisplay\n  }), __jsx(\"section\", {\n    className: css.header\n  }, setTypeButtons(), __jsx(\"button\", {\n    className: css.sort\n  }, \"Sort\")), __jsx(\"section\", {\n    className: css.results\n  }, __jsx(\"div\", {\n    className: css.resultsSlider\n  }, results && Array.isArray(results) ? results.map(item => {\n    return __jsx(ResultCard, {\n      key: item.id,\n      item: item\n    });\n  }) : null, __jsx(ResultCard, {\n    item: {}\n  })))));\n}\n\nQueried.getInitialProps = async ({\n  query\n}) => {\n  if (query.queried) {\n    const checkURLIsString = query.queried.toString();\n    const paramValueArray = checkURLIsString.split(\"+\");\n    const searchParamsValues = {};\n    paramValueArray.forEach(param => {\n      const indexOfEqual = param.search(\"=\");\n      if (indexOfEqual === -1) return;else {\n        const paramKey = param.substring(0, indexOfEqual);\n        const paramValue = param.substring(indexOfEqual + 1);\n        searchParamsValues[paramKey] = paramValue;\n      }\n    });\n    const apiResponse = await yelpBusinessesCall(searchParamsValues);\n    return {\n      results: apiResponse,\n      searchType: searchParamsValues.searchType\n    };\n  } else {\n    return {\n      results: {},\n      searchType: \"ALL\"\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module"}