{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport useSWR from \"swr\";\nexport default function useAPICalls(setSearchParameters, urlStart) {\n  _s();\n\n  if (!setSearchParameters) return null;\n\n  var _useSWR = useSWR(setSearchParameters.searchType !== \"EVENTS\" ? \"\".concat(urlStart, \"/api/yelpBusinessesAPI\") : null, /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n      var location, radius, placeType, response, responseJSON, businesses;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              location = setSearchParameters.location, radius = setSearchParameters.radius, placeType = setSearchParameters.placeType;\n              _context.prev = 1;\n              _context.next = 4;\n              return fetch(url, {\n                headers: {\n                  Accept: \"application/json\",\n                  \"Content-Type\": \"application/json\"\n                },\n                method: \"POST\",\n                body: JSON.stringify({\n                  location: location,\n                  radius: parseInt(radius),\n                  term: placeType\n                })\n              });\n\n            case 4:\n              response = _context.sent;\n              _context.next = 7;\n              return response.json();\n\n            case 7:\n              responseJSON = _context.sent;\n              businesses = responseJSON.businesses;\n              businesses.forEach(function (business) {\n                return business[\"type\"] = \"place\", business[\"source\"] = \"yelp\", business[\"inParts\"] = false;\n              });\n              return _context.abrupt(\"return\", businesses);\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](1);\n              return _context.abrupt(\"return\", _context.t0.message);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 13]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }()),\n      yelpPlaces = _useSWR.data,\n      yelpPlacesError = _useSWR.error,\n      yelpPlacesLoading = _useSWR.isValidating;\n\n  var _useSWR2 = useSWR(setSearchParameters.searchType !== \"PLACES\" ? \"\".concat(urlStart, \"/api/yelpEventsAPI\") : null, /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url) {\n      var location, radius, unixStartDate, unixEndDate, response, responseJSON, events;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              location = setSearchParameters.location, radius = setSearchParameters.radius, unixStartDate = setSearchParameters.unixStartDate, unixEndDate = setSearchParameters.unixEndDate;\n              _context2.prev = 1;\n              _context2.next = 4;\n              return fetch(url, {\n                headers: {\n                  Accept: \"application/json\",\n                  \"Content-Type\": \"application/json\"\n                },\n                method: \"POST\",\n                body: JSON.stringify({\n                  location: location,\n                  radius: parseInt(radius),\n                  start_date: parseInt(unixStartDate),\n                  end_date: parseInt(unixEndDate)\n                })\n              });\n\n            case 4:\n              response = _context2.sent;\n              _context2.next = 7;\n              return response.json();\n\n            case 7:\n              responseJSON = _context2.sent;\n              events = responseJSON.events;\n              events.forEach(function (event) {\n                return event[\"type\"] = \"event\", event[\"source\"] = \"yelp\", event[\"inParts\"] = false;\n              });\n              return _context2.abrupt(\"return\", events);\n\n            case 13:\n              _context2.prev = 13;\n              _context2.t0 = _context2[\"catch\"](1);\n              return _context2.abrupt(\"return\", _context2.t0.message);\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 13]]);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }()),\n      yelpEvents = _useSWR2.data,\n      yelpEventsError = _useSWR2.error,\n      yelpEventsLoading = _useSWR2.isValidating;\n\n  var _useSWR3 = useSWR(setSearchParameters.searchType !== \"PLACES\" ? \"\".concat(urlStart, \"/api/ticketmasterAPI\") : null, /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(url) {\n      var _setSearchParameters, location, radius, startFormatted, endFormatted, response, responseJSON, events;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _setSearchParameters = setSearchParameters(), location = _setSearchParameters.location, radius = _setSearchParameters.radius, startFormatted = _setSearchParameters.startFormatted, endFormatted = _setSearchParameters.endFormatted;\n              _context3.prev = 1;\n              _context3.next = 4;\n              return fetch(url, {\n                headers: {\n                  Accept: \"application/json\",\n                  \"Content-Type\": \"application/json\"\n                },\n                method: \"POST\",\n                body: JSON.stringify({\n                  location: location,\n                  radius: Math.floor(parseInt(radius) * 0.001).toString(),\n                  startDateTime: startFormatted,\n                  endDateTime: endFormatted\n                })\n              });\n\n            case 4:\n              response = _context3.sent;\n              _context3.next = 7;\n              return response.json();\n\n            case 7:\n              responseJSON = _context3.sent;\n              events = responseJSON._embedded.events;\n              events.forEach(function (event) {\n                return event[\"source\"] = \"ticketmaster\", event[\"type\"] = \"event\", event[\"inParts\"] = false;\n              });\n              return _context3.abrupt(\"return\", events);\n\n            case 13:\n              _context3.prev = 13;\n              _context3.t0 = _context3[\"catch\"](1);\n              return _context3.abrupt(\"return\", _context3.t0.message);\n\n            case 16:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[1, 13]]);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }()),\n      ticketmaster = _useSWR3.data,\n      ticketmasterError = _useSWR3.error,\n      ticketmasterLoading = _useSWR3.isValidating;\n\n  var checkYelpPlacesArray = Array.isArray(yelpPlaces) ? yelpPlaces : [];\n  var checkYelpEventsArray = Array.isArray(yelpEvents) ? yelpEvents : [];\n  var checkTicketMasterArray = Array.isArray(ticketmaster) ? ticketmaster : [];\n  return {\n    items: [].concat(_toConsumableArray(checkTicketMasterArray), _toConsumableArray(checkYelpEventsArray), _toConsumableArray(checkYelpPlacesArray)),\n    loading: ticketmasterLoading || yelpEventsLoading || yelpPlacesLoading,\n    errors: {\n      yelpEventsError: yelpEventsError,\n      yelpPlacesError: yelpPlacesError,\n      ticketmasterError: ticketmasterError\n    }\n  };\n}\n\n_s(useAPICalls, \"z/lIHzJJb1Rtaz0VIMPo38LURzk=\", false, function () {\n  return [useSWR, useSWR, useSWR];\n});","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/swr/useAPICalls.ts"],"names":["useSWR","useAPICalls","setSearchParameters","urlStart","searchType","url","location","radius","placeType","fetch","headers","Accept","method","body","JSON","stringify","parseInt","term","response","json","responseJSON","businesses","forEach","business","message","yelpPlaces","data","yelpPlacesError","error","yelpPlacesLoading","isValidating","unixStartDate","unixEndDate","start_date","end_date","events","event","yelpEvents","yelpEventsError","yelpEventsLoading","startFormatted","endFormatted","Math","floor","toString","startDateTime","endDateTime","_embedded","ticketmaster","ticketmasterError","ticketmasterLoading","checkYelpPlacesArray","Array","isArray","checkYelpEventsArray","checkTicketMasterArray","items","loading","errors"],"mappings":"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","sourcesContent":["import useSWR, { responseInterface } from \"swr\";\r\n\r\ntype APIResponse = { [key: string]: any }[];\r\n\r\ntype Results = {\r\n  items: { [key: string]: any }[];\r\n  errors: {\r\n    yelpPlacesError?: string | undefined;\r\n    yelpEventsError?: string | undefined;\r\n    ticketmasterError?: string | undefined;\r\n  };\r\n};\r\n\r\nexport default function useAPICalls(\r\n  setSearchParameters: { [key: string]: any } | null,\r\n  urlStart: string\r\n): {\r\n  items: APIResponse;\r\n  loading: boolean;\r\n  errors: {\r\n    yelpPlacesError: string;\r\n    yelpEventsError: string;\r\n    ticketmasterError: string;\r\n  };\r\n} {\r\n  if (!setSearchParameters) return null;\r\n  const {\r\n    data: yelpPlaces,\r\n    error: yelpPlacesError,\r\n    isValidating: yelpPlacesLoading,\r\n  }: responseInterface<APIResponse, string> = useSWR(\r\n    setSearchParameters.searchType !== \"EVENTS\"\r\n      ? `${urlStart}/api/yelpBusinessesAPI`\r\n      : null,\r\n    async (url) => {\r\n      const { location, radius, placeType } = setSearchParameters;\r\n      try {\r\n        const response: Response = await fetch(url, {\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            location,\r\n            radius: parseInt(radius),\r\n            term: placeType,\r\n          }),\r\n        });\r\n\r\n        const responseJSON = await response.json();\r\n\r\n        const {\r\n          businesses,\r\n        }: { businesses: { [key: string]: any }[] } = responseJSON;\r\n        businesses.forEach(\r\n          (business) => (\r\n            (business[\"type\"] = \"place\"),\r\n            (business[\"source\"] = \"yelp\"),\r\n            (business[\"inParts\"] = false)\r\n          )\r\n        );\r\n\r\n        return businesses;\r\n      } catch (err) {\r\n        return err.message;\r\n      }\r\n    }\r\n  );\r\n\r\n  const {\r\n    data: yelpEvents,\r\n    error: yelpEventsError,\r\n    isValidating: yelpEventsLoading,\r\n  }: responseInterface<APIResponse, string> = useSWR(\r\n    setSearchParameters.searchType !== \"PLACES\"\r\n      ? `${urlStart}/api/yelpEventsAPI`\r\n      : null,\r\n    async (url) => {\r\n      const {\r\n        location,\r\n        radius,\r\n        unixStartDate,\r\n        unixEndDate,\r\n      } = setSearchParameters;\r\n      try {\r\n        const response: Response = await fetch(url, {\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            location,\r\n            radius: parseInt(radius),\r\n            start_date: parseInt(unixStartDate),\r\n            end_date: parseInt(unixEndDate),\r\n          }),\r\n        });\r\n\r\n        const responseJSON = await response.json();\r\n\r\n        const { events }: { events: { [key: string]: any }[] } = responseJSON;\r\n        events.forEach(\r\n          (event) => (\r\n            (event[\"type\"] = \"event\"),\r\n            (event[\"source\"] = \"yelp\"),\r\n            (event[\"inParts\"] = false)\r\n          )\r\n        );\r\n        return events;\r\n      } catch (err) {\r\n        return err.message;\r\n      }\r\n    }\r\n  );\r\n\r\n  const {\r\n    data: ticketmaster,\r\n    error: ticketmasterError,\r\n    isValidating: ticketmasterLoading,\r\n  }: responseInterface<APIResponse, string> = useSWR(\r\n    setSearchParameters.searchType !== \"PLACES\"\r\n      ? `${urlStart}/api/ticketmasterAPI`\r\n      : null,\r\n    async (url) => {\r\n      const {\r\n        location,\r\n        radius,\r\n        startFormatted,\r\n        endFormatted,\r\n      } = setSearchParameters();\r\n      try {\r\n        const response: Response = await fetch(url, {\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            location,\r\n            radius: Math.floor(parseInt(radius) * 0.001).toString(),\r\n            startDateTime: startFormatted,\r\n            endDateTime: endFormatted,\r\n          }),\r\n        });\r\n\r\n        const responseJSON = await response.json();\r\n        const {\r\n          _embedded: { events },\r\n        }: { _embedded: { events: { [key: string]: any }[] } } = responseJSON;\r\n\r\n        events.forEach(\r\n          (event) => (\r\n            (event[\"source\"] = \"ticketmaster\"),\r\n            (event[\"type\"] = \"event\"),\r\n            (event[\"inParts\"] = false)\r\n          )\r\n        );\r\n\r\n        return events;\r\n      } catch (err) {\r\n        return err.message;\r\n      }\r\n    }\r\n  );\r\n\r\n  const checkYelpPlacesArray: Results[\"items\"] | [] = Array.isArray(yelpPlaces)\r\n    ? yelpPlaces\r\n    : [];\r\n  const checkYelpEventsArray: Results[\"items\"] | [] = Array.isArray(yelpEvents)\r\n    ? yelpEvents\r\n    : [];\r\n  const checkTicketMasterArray: Results[\"items\"] | [] = Array.isArray(\r\n    ticketmaster\r\n  )\r\n    ? ticketmaster\r\n    : [];\r\n\r\n  return {\r\n    items: [\r\n      ...checkTicketMasterArray,\r\n      ...checkYelpEventsArray,\r\n      ...checkYelpPlacesArray,\r\n    ],\r\n    loading: ticketmasterLoading || yelpEventsLoading || yelpPlacesLoading,\r\n    errors: { yelpEventsError, yelpPlacesError, ticketmasterError },\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}