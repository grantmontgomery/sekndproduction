{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { Layout } from \"../../components\";\nimport { useRouter } from \"next/router\";\nexport default function Queried() {\n  const [state, setState] = React.useState({\n    resultsType: \"\"\n  });\n  const [results, setResults] = React.useState({\n    items: [],\n    errors: {\n      yelpPlaces: \"\",\n      yelpEvents: \"\",\n      ticketmaster: \"\"\n    }\n  });\n  const router = useRouter();\n  const urlStart = true ? \"http://localhost:3000\" : \"https://sekndapp.com\";\n  const searchParams = router.query.queried ? true : false;\n  console.log(router.query);\n  console.log(searchParams); // const {data:yelpPlaces, error: yelpPlacesError} = useSWR(router.query.searchType !== \"EVENTS\" ? `${process.env.NODE_ENV}/api/yelpBusinessesAPI`: null,\n  // async (url) =>  {\n  // }\n  // )\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 10\n    }\n  });\n} // export default function Queried({\n//   results: { items, errors },\n//   searchType,\n// }): JSX.Element {\n//   const [state, setState] = React.useState({ resultsType: \"\" });\n//   const router = useRouter();\n//   console.log(router);\n//   console.log(items);\n//   const determineItems: () => JSX.Element | null = () => {\n//     if (!items) return null;\n//     switch (searchType) {\n//       case \"ALL\":\n//         if (Array.isArray(items.places) && Array.isArray(items.events)) {\n//           return state.resultsType === \"PLACES\"\n//             ? items.places.map((item) => (\n//                 <ResultCard key={item.id} item={item}></ResultCard>\n//               ))\n//             : items.events.map((item) => (\n//                 <ResultCard key={item.id} item={item}></ResultCard>\n//               ));\n//         } else {\n//           return null;\n//         }\n//       case \"PLACES\":\n//         return Array.isArray(items.places)\n//           ? items.places.map((item) => (\n//               <ResultCard key={item.id} item={item}></ResultCard>\n//             ))\n//           : null;\n//       case \"EVENTS\":\n//         return Array.isArray(items.events)\n//           ? items.events.map((item) => (\n//               <ResultCard key={item.id} item={item}></ResultCard>\n//             ))\n//           : null;\n//       default:\n//         if (Array.isArray(items.places) && Array.isArray(items.events)) {\n//           return state.resultsType === \"PLACES\"\n//             ? items.places.map((item) => (\n//                 <ResultCard key={item.id} item={item}></ResultCard>\n//               ))\n//             : items.events.map((item) => (\n//                 <ResultCard key={item.id} item={item}></ResultCard>\n//               ));\n//         } else {\n//           return null;\n//         }\n//     }\n//   };\n//   const setTypeButtons: () => JSX.Element = () => {\n//     if (searchType) {\n//       switch (searchType) {\n//         case \"ALL\":\n//           return (\n//             <React.Fragment>\n//               <button\n//                 className={css.typeButton}\n//                 onClick={() => setState({ resultsType: \"PLACES\" })}\n//               >\n//                 Places\n//               </button>\n//               <button\n//                 className={css.typeButton}\n//                 onClick={() => setState({ resultsType: \"EVENTS\" })}\n//               >\n//                 Events\n//               </button>\n//             </React.Fragment>\n//           );\n//         case \"PLACES\":\n//           return (\n//             <button\n//               className={css.typeButton}\n//               onClick={() => setState({ resultsType: \"PLACES\" })}\n//             >\n//               Places\n//             </button>\n//           );\n//         case \"EVENTS\":\n//           return (\n//             <button\n//               className={css.typeButton}\n//               onClick={() => setState({ resultsType: \"EVENTS\" })}\n//             >\n//               Events\n//             </button>\n//           );\n//         default:\n//           return (\n//             <React.Fragment>\n//               <button\n//                 className={css.typeButton}\n//                 onClick={() => setState({ resultsType: \"PLACES\" })}\n//               >\n//                 Places\n//               </button>\n//               <button\n//                 className={css.typeButton}\n//                 onClick={() => setState({ resultsType: \"EVENTS\" })}\n//               >\n//                 Events\n//               </button>\n//             </React.Fragment>\n//           );\n//       }\n//     } else {\n//       return (\n//         <React.Fragment>\n//           <button\n//             className={css.typeButton}\n//             onClick={() => setState({ resultsType: \"PLACES\" })}\n//           >\n//             Places\n//           </button>\n//           <button\n//             className={css.typeButton}\n//             onClick={() => setState({ resultsType: \"EVENTS\" })}\n//           >\n//             Events\n//           </button>\n//         </React.Fragment>\n//       );\n//     }\n//   };\n//   return (\n//     <Layout>\n//       <main className={css.queriedPage}>\n//         {/* <section className={css.queryDisplay}></section> */}\n//         <section className={css.header}>\n//           {setTypeButtons()}\n//           <button className={css.sort}>Sort</button>\n//         </section>\n//         <div className={css.resultsSlider}>{determineItems()}</div>\n//       </main>\n//     </Layout>\n//   );\n// }\n// type Results = {\n//   items: { places: { [key: string]: any }[]; events: { [key: string]: any }[] };\n//   errors: { yelpPlaces: string; yelpEvents: string; ticketmaster: string };\n// };\n// type APIResponse = Promise<{ [key: string]: any }[] | string>;\n// type SearchParams = { [key: string]: any };\n// Queried.getInitialProps = async ({\n//   query,\n//   pathname,\n//   asPath,\n// }): Promise<{\n//   results: any;\n//   searchType: string;\n// }> => {\n//   const {\n//     searchType,\n//     location,\n//     radius,\n//     placeType,\n//     startFormatted,\n//     endFormatted,\n//     unixStartDate,\n//     unixEndDate,\n//     eventsCategory,\n//   } = query;\n//   if (location && radius && startFormatted && endFormatted) {\n//     console.log(\"api call\");\n// class APICalls {\n//   searchParams: SearchParams;\n//   results: Results;\n//   constructor(searchParams: SearchParams) {\n//     this.searchParams = searchParams;\n//     this.results = {\n//       items: { places: [], events: [] },\n//       errors: { yelpPlaces: \"\", yelpEvents: \"\", ticketmaster: \"\" },\n//     };\n//   }\n//   public async yelpBusinesses() {\n//     const { location, radius, placeType } = this.searchParams;\n//     const yelpBusinessesResponse: APIResponse = await yelpBusinessesCall({\n//       location,\n//       radius,\n//       placeType,\n//     });\n//     Array.isArray(yelpBusinessesResponse)\n//       ? (this.results.items.places = yelpBusinessesResponse)\n//       : (this.results.errors.yelpPlaces = `${yelpBusinessesResponse}`);\n//   }\n//   public async yelpEvents() {\n//     const {\n//       location,\n//       radius,\n//       unixStartDate,\n//       unixEndDate,\n//     } = this.searchParams;\n//     const yelpEventsResponse: APIResponse = await yelpEventsCall({\n//       location,\n//       radius,\n//       unixStartDate,\n//       unixEndDate,\n//     });\n//     Array.isArray(yelpEventsResponse)\n//       ? (this.results.items.events = [\n//           ...this.results.items.events,\n//           ...yelpEventsResponse,\n//         ])\n//       : (this.results.errors.yelpEvents = `${yelpEventsResponse}`);\n//   }\n//   public async ticketMaster() {\n//     const {\n//       location,\n//       radius,\n//       startFormatted,\n//       endFormatted,\n//     } = this.searchParams;\n//     const ticketMasterResponse: APIResponse = await ticketMasterCall({\n//       location,\n//       radius,\n//       startFormatted,\n//       endFormatted,\n//     });\n//     Array.isArray(ticketMasterResponse)\n//       ? (this.results.items.events = [\n//           ...this.results.items.events,\n//           ...ticketMasterResponse,\n//         ])\n//       : (this.results.errors.ticketmaster = `${ticketMasterResponse}`);\n//   }\n// }\n//     const callAPIS: (searchType: string) => Promise<Results> = async (\n//       searchType\n//     ) => {\n//       const APICall = new APICalls({\n//         location,\n//         radius,\n//         placeType,\n//         startFormatted,\n//         endFormatted,\n//         unixStartDate,\n//         unixEndDate,\n//         eventsCategory,\n//       });\n//       try {\n//         switch (searchType) {\n//           case \"PLACES\":\n//             APICall.yelpBusinesses();\n//             return APICall.results;\n//           case \"EVENTS\":\n//             APICall.yelpEvents();\n//             APICall.ticketMaster();\n//             return APICall.results;\n//           case \"ALL\":\n//             APICall.yelpBusinesses();\n//             APICall.yelpEvents();\n//             APICall.ticketMaster();\n//             return APICall.results;\n//           default:\n//             APICall.yelpBusinesses();\n//             APICall.yelpEvents();\n//             APICall.ticketMaster();\n//             return APICall.results;\n//         }\n//       } catch {\n//         APICall.results.errors.yelpPlaces = \"CALL ERROR\";\n//         APICall.results.errors.yelpEvents = \"CALL ERROR\";\n//         APICall.results.errors.ticketmaster = \"CALL ERROR\";\n//         return APICall.results;\n//       }\n//     };\n//     const results: Results = await callAPIS(searchType);\n//     return {\n//       results,\n//       searchType,\n//     };\n//   } else {\n//     const checkURLIsString: string = query.queried.toString();\n//     const paramValueArray: string[] = checkURLIsString.split(\"+\");\n//     const searchParamsValues: SearchParams = {};\n//     paramValueArray.forEach((param) => {\n//       const indexOfEqual: number = param.search(\"=\");\n//       if (indexOfEqual === -1) return;\n//       else {\n//         const paramKey: string = param.substring(0, indexOfEqual);\n//         const paramValue: string = param.substring(indexOfEqual + 1);\n//         searchParamsValues[paramKey] = paramValue;\n//       }\n//     });\n//     return {\n//       results: { error: \"BadCall\" },\n//       searchType: \"ALL\",\n//     };\n//   }\n// };","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","Layout","useRouter","Queried","state","setState","useState","resultsType","results","setResults","items","errors","yelpPlaces","yelpEvents","ticketmaster","router","urlStart","searchParams","query","queried","console","log"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAmC,kBAAnC;AAMA,SAAqBC,SAArB,QAAsC,aAAtC;AAcA,eAAe,SAASC,OAAT,GAAgC;AAC7C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,KAAK,CAACM,QAAN,CAAwC;AAChEC,IAAAA,WAAW,EAAE;AADmD,GAAxC,CAA1B;AAGA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,KAAK,CAACM,QAAN,CAAwB;AACpDI,IAAAA,KAAK,EAAE,EAD6C;AAEpDC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,UAAU,EAAE,EAAd;AAAkBC,MAAAA,UAAU,EAAE,EAA9B;AAAkCC,MAAAA,YAAY,EAAE;AAAhD;AAF4C,GAAxB,CAA9B;AAIA,QAAMC,MAAkB,GAAGb,SAAS,EAApC;AAEA,QAAMc,QAAgB,GACpB,OACI,uBADJ,GAEI,sBAHN;AAKA,QAAMC,YAAY,GAAGF,MAAM,CAACG,KAAP,CAAaC,OAAb,GAAuB,IAAvB,GAA8B,KAAnD;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,MAAM,CAACG,KAAnB;AAEAE,EAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAZ,EAnB6C,CAqB7C;AACA;AAEA;AACA;;AAEA,SAAO,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import * as React from \"react\";\r\nimport { Layout, ResultCard } from \"../../components\";\r\nimport {\r\n  yelpBusinessesCall,\r\n  yelpEventsCall,\r\n  ticketMasterCall,\r\n} from \"../../apicalls\";\r\nimport { NextRouter, useRouter } from \"next/router\";\r\nimport useSWR, { responseInterface } from \"swr\";\r\nimport css from \"../../styles/Queried.module.scss\";\r\nimport { ParsedUrlQuery } from \"querystring\";\r\n\r\ntype Results = {\r\n  items: { [key: string]: any }[];\r\n  errors: { yelpPlaces: string; yelpEvents: string; ticketmaster: string };\r\n};\r\n\r\ntype APIResponse = Promise<{ [key: string]: any }[] | string>;\r\n\r\ntype SearchParams = { [key: string]: any };\r\n\r\nexport default function Queried(): JSX.Element {\r\n  const [state, setState] = React.useState<{ resultsType: string }>({\r\n    resultsType: \"\",\r\n  });\r\n  const [results, setResults] = React.useState<Results>({\r\n    items: [],\r\n    errors: { yelpPlaces: \"\", yelpEvents: \"\", ticketmaster: \"\" },\r\n  });\r\n  const router: NextRouter = useRouter();\r\n\r\n  const urlStart: string =\r\n    process.env.NODE_ENV !== \"production\"\r\n      ? \"http://localhost:3000\"\r\n      : \"https://sekndapp.com\";\r\n\r\n  const searchParams = router.query.queried ? true : false;\r\n\r\n  console.log(router.query);\r\n\r\n  console.log(searchParams);\r\n\r\n  // const {data:yelpPlaces, error: yelpPlacesError} = useSWR(router.query.searchType !== \"EVENTS\" ? `${process.env.NODE_ENV}/api/yelpBusinessesAPI`: null,\r\n  // async (url) =>  {\r\n\r\n  // }\r\n  // )\r\n\r\n  return <Layout></Layout>;\r\n}\r\n\r\n// export default function Queried({\r\n//   results: { items, errors },\r\n//   searchType,\r\n// }): JSX.Element {\r\n//   const [state, setState] = React.useState({ resultsType: \"\" });\r\n\r\n//   const router = useRouter();\r\n//   console.log(router);\r\n\r\n//   console.log(items);\r\n\r\n//   const determineItems: () => JSX.Element | null = () => {\r\n//     if (!items) return null;\r\n//     switch (searchType) {\r\n//       case \"ALL\":\r\n//         if (Array.isArray(items.places) && Array.isArray(items.events)) {\r\n//           return state.resultsType === \"PLACES\"\r\n//             ? items.places.map((item) => (\r\n//                 <ResultCard key={item.id} item={item}></ResultCard>\r\n//               ))\r\n//             : items.events.map((item) => (\r\n//                 <ResultCard key={item.id} item={item}></ResultCard>\r\n//               ));\r\n//         } else {\r\n//           return null;\r\n//         }\r\n\r\n//       case \"PLACES\":\r\n//         return Array.isArray(items.places)\r\n//           ? items.places.map((item) => (\r\n//               <ResultCard key={item.id} item={item}></ResultCard>\r\n//             ))\r\n//           : null;\r\n//       case \"EVENTS\":\r\n//         return Array.isArray(items.events)\r\n//           ? items.events.map((item) => (\r\n//               <ResultCard key={item.id} item={item}></ResultCard>\r\n//             ))\r\n//           : null;\r\n//       default:\r\n//         if (Array.isArray(items.places) && Array.isArray(items.events)) {\r\n//           return state.resultsType === \"PLACES\"\r\n//             ? items.places.map((item) => (\r\n//                 <ResultCard key={item.id} item={item}></ResultCard>\r\n//               ))\r\n//             : items.events.map((item) => (\r\n//                 <ResultCard key={item.id} item={item}></ResultCard>\r\n//               ));\r\n//         } else {\r\n//           return null;\r\n//         }\r\n//     }\r\n//   };\r\n\r\n//   const setTypeButtons: () => JSX.Element = () => {\r\n//     if (searchType) {\r\n//       switch (searchType) {\r\n//         case \"ALL\":\r\n//           return (\r\n//             <React.Fragment>\r\n//               <button\r\n//                 className={css.typeButton}\r\n//                 onClick={() => setState({ resultsType: \"PLACES\" })}\r\n//               >\r\n//                 Places\r\n//               </button>\r\n//               <button\r\n//                 className={css.typeButton}\r\n//                 onClick={() => setState({ resultsType: \"EVENTS\" })}\r\n//               >\r\n//                 Events\r\n//               </button>\r\n//             </React.Fragment>\r\n//           );\r\n//         case \"PLACES\":\r\n//           return (\r\n//             <button\r\n//               className={css.typeButton}\r\n//               onClick={() => setState({ resultsType: \"PLACES\" })}\r\n//             >\r\n//               Places\r\n//             </button>\r\n//           );\r\n\r\n//         case \"EVENTS\":\r\n//           return (\r\n//             <button\r\n//               className={css.typeButton}\r\n//               onClick={() => setState({ resultsType: \"EVENTS\" })}\r\n//             >\r\n//               Events\r\n//             </button>\r\n//           );\r\n//         default:\r\n//           return (\r\n//             <React.Fragment>\r\n//               <button\r\n//                 className={css.typeButton}\r\n//                 onClick={() => setState({ resultsType: \"PLACES\" })}\r\n//               >\r\n//                 Places\r\n//               </button>\r\n//               <button\r\n//                 className={css.typeButton}\r\n//                 onClick={() => setState({ resultsType: \"EVENTS\" })}\r\n//               >\r\n//                 Events\r\n//               </button>\r\n//             </React.Fragment>\r\n//           );\r\n//       }\r\n//     } else {\r\n//       return (\r\n//         <React.Fragment>\r\n//           <button\r\n//             className={css.typeButton}\r\n//             onClick={() => setState({ resultsType: \"PLACES\" })}\r\n//           >\r\n//             Places\r\n//           </button>\r\n//           <button\r\n//             className={css.typeButton}\r\n//             onClick={() => setState({ resultsType: \"EVENTS\" })}\r\n//           >\r\n//             Events\r\n//           </button>\r\n//         </React.Fragment>\r\n//       );\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <Layout>\r\n//       <main className={css.queriedPage}>\r\n//         {/* <section className={css.queryDisplay}></section> */}\r\n//         <section className={css.header}>\r\n//           {setTypeButtons()}\r\n//           <button className={css.sort}>Sort</button>\r\n//         </section>\r\n\r\n//         <div className={css.resultsSlider}>{determineItems()}</div>\r\n//       </main>\r\n//     </Layout>\r\n//   );\r\n// }\r\n\r\n// type Results = {\r\n//   items: { places: { [key: string]: any }[]; events: { [key: string]: any }[] };\r\n//   errors: { yelpPlaces: string; yelpEvents: string; ticketmaster: string };\r\n// };\r\n\r\n// type APIResponse = Promise<{ [key: string]: any }[] | string>;\r\n\r\n// type SearchParams = { [key: string]: any };\r\n\r\n// Queried.getInitialProps = async ({\r\n//   query,\r\n//   pathname,\r\n//   asPath,\r\n// }): Promise<{\r\n//   results: any;\r\n//   searchType: string;\r\n// }> => {\r\n//   const {\r\n//     searchType,\r\n//     location,\r\n//     radius,\r\n//     placeType,\r\n//     startFormatted,\r\n//     endFormatted,\r\n//     unixStartDate,\r\n//     unixEndDate,\r\n//     eventsCategory,\r\n//   } = query;\r\n\r\n//   if (location && radius && startFormatted && endFormatted) {\r\n//     console.log(\"api call\");\r\n// class APICalls {\r\n//   searchParams: SearchParams;\r\n//   results: Results;\r\n//   constructor(searchParams: SearchParams) {\r\n//     this.searchParams = searchParams;\r\n//     this.results = {\r\n//       items: { places: [], events: [] },\r\n//       errors: { yelpPlaces: \"\", yelpEvents: \"\", ticketmaster: \"\" },\r\n//     };\r\n//   }\r\n\r\n//   public async yelpBusinesses() {\r\n//     const { location, radius, placeType } = this.searchParams;\r\n//     const yelpBusinessesResponse: APIResponse = await yelpBusinessesCall({\r\n//       location,\r\n//       radius,\r\n//       placeType,\r\n//     });\r\n//     Array.isArray(yelpBusinessesResponse)\r\n//       ? (this.results.items.places = yelpBusinessesResponse)\r\n//       : (this.results.errors.yelpPlaces = `${yelpBusinessesResponse}`);\r\n//   }\r\n//   public async yelpEvents() {\r\n//     const {\r\n//       location,\r\n//       radius,\r\n//       unixStartDate,\r\n//       unixEndDate,\r\n//     } = this.searchParams;\r\n//     const yelpEventsResponse: APIResponse = await yelpEventsCall({\r\n//       location,\r\n//       radius,\r\n//       unixStartDate,\r\n//       unixEndDate,\r\n//     });\r\n//     Array.isArray(yelpEventsResponse)\r\n//       ? (this.results.items.events = [\r\n//           ...this.results.items.events,\r\n//           ...yelpEventsResponse,\r\n//         ])\r\n//       : (this.results.errors.yelpEvents = `${yelpEventsResponse}`);\r\n//   }\r\n//   public async ticketMaster() {\r\n//     const {\r\n//       location,\r\n//       radius,\r\n//       startFormatted,\r\n//       endFormatted,\r\n//     } = this.searchParams;\r\n//     const ticketMasterResponse: APIResponse = await ticketMasterCall({\r\n//       location,\r\n//       radius,\r\n//       startFormatted,\r\n//       endFormatted,\r\n//     });\r\n//     Array.isArray(ticketMasterResponse)\r\n//       ? (this.results.items.events = [\r\n//           ...this.results.items.events,\r\n//           ...ticketMasterResponse,\r\n//         ])\r\n//       : (this.results.errors.ticketmaster = `${ticketMasterResponse}`);\r\n//   }\r\n// }\r\n\r\n//     const callAPIS: (searchType: string) => Promise<Results> = async (\r\n//       searchType\r\n//     ) => {\r\n//       const APICall = new APICalls({\r\n//         location,\r\n//         radius,\r\n//         placeType,\r\n//         startFormatted,\r\n//         endFormatted,\r\n//         unixStartDate,\r\n//         unixEndDate,\r\n//         eventsCategory,\r\n//       });\r\n\r\n//       try {\r\n//         switch (searchType) {\r\n//           case \"PLACES\":\r\n//             APICall.yelpBusinesses();\r\n\r\n//             return APICall.results;\r\n\r\n//           case \"EVENTS\":\r\n//             APICall.yelpEvents();\r\n//             APICall.ticketMaster();\r\n//             return APICall.results;\r\n//           case \"ALL\":\r\n//             APICall.yelpBusinesses();\r\n//             APICall.yelpEvents();\r\n//             APICall.ticketMaster();\r\n//             return APICall.results;\r\n//           default:\r\n//             APICall.yelpBusinesses();\r\n//             APICall.yelpEvents();\r\n//             APICall.ticketMaster();\r\n//             return APICall.results;\r\n//         }\r\n//       } catch {\r\n//         APICall.results.errors.yelpPlaces = \"CALL ERROR\";\r\n//         APICall.results.errors.yelpEvents = \"CALL ERROR\";\r\n//         APICall.results.errors.ticketmaster = \"CALL ERROR\";\r\n//         return APICall.results;\r\n//       }\r\n//     };\r\n\r\n//     const results: Results = await callAPIS(searchType);\r\n\r\n//     return {\r\n//       results,\r\n//       searchType,\r\n//     };\r\n//   } else {\r\n//     const checkURLIsString: string = query.queried.toString();\r\n//     const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n//     const searchParamsValues: SearchParams = {};\r\n\r\n//     paramValueArray.forEach((param) => {\r\n//       const indexOfEqual: number = param.search(\"=\");\r\n//       if (indexOfEqual === -1) return;\r\n//       else {\r\n//         const paramKey: string = param.substring(0, indexOfEqual);\r\n//         const paramValue: string = param.substring(indexOfEqual + 1);\r\n//         searchParamsValues[paramKey] = paramValue;\r\n//       }\r\n//     });\r\n\r\n//     return {\r\n//       results: { error: \"BadCall\" },\r\n//       searchType: \"ALL\",\r\n//     };\r\n//   }\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}