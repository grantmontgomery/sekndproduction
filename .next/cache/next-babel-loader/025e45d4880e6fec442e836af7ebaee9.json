{"ast":null,"code":"export const ticketMasterCall = async ({\n  location,\n  radius,\n  startFormatted,\n  endFormatted\n}) => {\n  try {\n    const response = await fetch(\"http://localhost:3000/api/ticketmasterAPI\", {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"POST\",\n      body: JSON.stringify({\n        location,\n        radius: Math.floor(parseInt(radius) * 0.001).toString(),\n        startDateTime: startFormatted,\n        endDateTime: endFormatted\n      })\n    });\n    const responseJson = await response.json();\n    const {\n      _embedded: {\n        events\n      }\n    } = responseJson;\n    events.forEach(event => (event[\"source\"] = \"ticketmaster\", event[\"type\"] = \"event\", event[\"inParts\"] = false));\n    return events;\n  } catch (err) {\n    return err.message;\n  }\n};","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/apicalls/ticketmasterCall.ts"],"names":["ticketMasterCall","location","radius","startFormatted","endFormatted","response","fetch","headers","Accept","method","body","JSON","stringify","Math","floor","parseInt","toString","startDateTime","endDateTime","responseJson","json","_embedded","events","forEach","event","err","message"],"mappings":"AAIA,OAAO,MAAMA,gBAKa,GAAG,OAAO;AAClCC,EAAAA,QADkC;AAElCC,EAAAA,MAFkC;AAGlCC,EAAAA,cAHkC;AAIlCC,EAAAA;AAJkC,CAAP,KAKvB;AACJ,MAAI;AACF,UAAMC,QAAkB,GAAG,MAAMC,KAAK,CACpC,2CADoC,EAEpC;AACEC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,kBADD;AAEP,wBAAgB;AAFT,OADX;AAKEC,MAAAA,MAAM,EAAE,MALV;AAMEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBX,QAAAA,QADmB;AAEnBC,QAAAA,MAAM,EAAEW,IAAI,CAACC,KAAL,CAAWC,QAAQ,CAACb,MAAD,CAAR,GAAmB,KAA9B,EAAqCc,QAArC,EAFW;AAGnBC,QAAAA,aAAa,EAAEd,cAHI;AAInBe,QAAAA,WAAW,EAAEd;AAJM,OAAf;AANR,KAFoC,CAAtC;AAgBA,UAAMe,YAAY,GAAG,MAAMd,QAAQ,CAACe,IAAT,EAA3B;AACA,UAAM;AACJC,MAAAA,SAAS,EAAE;AAAEC,QAAAA;AAAF;AADP,QAEmDH,YAFzD;AAIAG,IAAAA,MAAM,CAACC,OAAP,CACGC,KAAD,KACGA,KAAK,CAAC,QAAD,CAAL,GAAkB,cAAnB,EACCA,KAAK,CAAC,MAAD,CAAL,GAAgB,OADjB,EAECA,KAAK,CAAC,SAAD,CAAL,GAAmB,KAHtB,CADF;AAQA,WAAOF,MAAP;AACD,GA/BD,CA+BE,OAAOG,GAAP,EAAY;AACZ,WAAOA,GAAG,CAACC,OAAX;AACD;AACF,CA7CM","sourcesContent":["type Params = {\r\n  [key: string]: string;\r\n};\r\n\r\nexport const ticketMasterCall: ({\r\n  location,\r\n  radius,\r\n  startFormatted,\r\n  endFormatted,\r\n}: Params) => Promise<any> = async ({\r\n  location,\r\n  radius,\r\n  startFormatted,\r\n  endFormatted,\r\n}) => {\r\n  try {\r\n    const response: Response = await fetch(\r\n      \"http://localhost:3000/api/ticketmasterAPI\",\r\n      {\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n          location,\r\n          radius: Math.floor(parseInt(radius) * 0.001).toString(),\r\n          startDateTime: startFormatted,\r\n          endDateTime: endFormatted,\r\n        }),\r\n      }\r\n    );\r\n    const responseJson = await response.json();\r\n    const {\r\n      _embedded: { events },\r\n    }: { _embedded: { events: { [key: string]: any }[] } } = responseJson;\r\n\r\n    events.forEach(\r\n      (event) => (\r\n        (event[\"source\"] = \"ticketmaster\"),\r\n        (event[\"type\"] = \"event\"),\r\n        (event[\"inParts\"] = false)\r\n      )\r\n    );\r\n\r\n    return events;\r\n  } catch (err) {\r\n    return err.message;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}