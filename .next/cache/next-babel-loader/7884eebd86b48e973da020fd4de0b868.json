{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\n\nconst Queried = props => {\n  const [state, setState] = React.useState({\n    resultsType: \"\"\n  }); // React.useEffect(() => {\n  //   if (searchType) {\n  //     switch (searchType) {\n  //       case \"ALL\":\n  //     }\n  //   }\n  // });\n\n  console.log(props);\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 10\n    }\n  }); // const setTypeButtons: () => JSX.Element = () => {\n  //   if (searchType) {\n  //     switch (searchType) {\n  //       case \"ALL\":\n  //         return (\n  //           <React.Fragment>\n  //             <button className={css.typeButton}>Places</button>\n  //             <button className={css.typeButton}>Events</button>\n  //           </React.Fragment>\n  //         );\n  //       case \"PLACES\":\n  //         return <button className={css.typeButton}>Places</button>;\n  //       case \"EVENTS\":\n  //         return <button className={css.typeButton}>Events</button>;\n  //       default:\n  //         return (\n  //           <React.Fragment>\n  //             <button className={css.typeButton}>Places</button>\n  //             <button className={css.typeButton}>Events</button>\n  //           </React.Fragment>\n  //         );\n  //     }\n  //   } else {\n  //     return (\n  //       <React.Fragment>\n  //         <button className={css.typeButton}>Places</button>\n  //         <button className={css.typeButton}>Events</button>\n  //       </React.Fragment>\n  //     );\n  //   }\n  // };\n  // return (\n  //   <Layout>\n  //     <main className={css.queriedPage}>\n  //       <section className={css.queryDisplay}></section>\n  //       <section className={css.header}>\n  //         {setTypeButtons()}\n  //         <button className={css.sort}>Sort</button>\n  //       </section>\n  //       <section className={css.results}>\n  //         <div className={css.resultsSlider}>\n  //           {/* {results\n  //             ? results.map((item) => {\n  //                 return <ResultCard key={item.id} item={item}></ResultCard>;\n  //               })\n  //             : null} */}\n  //         </div>\n  //       </section>\n  //     </main>\n  //   </Layout>\n  // );\n}; // Queried.getInitialProps = async ({\n//   query,\n// }): Promise<{ results: any; searchType: string }> => {\n//   if (query.queried) {\n//     const checkURLIsString: string = query.queried.toString();\n//     const paramValueArray: string[] = checkURLIsString.split(\"+\");\n//     const searchParamsValues: { [key: string]: string } = {};\n//     paramValueArray.forEach((param) => {\n//       const indexOfEqual: number = param.search(\"=\");\n//       if (indexOfEqual === -1) return;\n//       else {\n//         const paramKey: string = param.substring(0, indexOfEqual);\n//         const paramValue: string = param.substring(indexOfEqual + 1);\n//         searchParamsValues[paramKey] = paramValue;\n//       }\n//     });\n//     const apiResponse: Promise<\n//       { [key: string]: any }[] | string\n//     > = await yelpBusinessesCall(searchParamsValues);\n//     return { results: apiResponse, searchType: searchParamsValues.searchType };\n//   } else {\n//     return { results: {}, searchType: \"ALL\" };\n//   }\n// };\n\n\nexport async function getServerSideProps({\n  query,\n  params\n}) {\n  if (query.queried) {\n    const checkURLIsString = query.queried.toString();\n    const paramValueArray = checkURLIsString.split(\"+\");\n    const searchParamsValues = {};\n    console.log(params);\n    paramValueArray.forEach(param => {\n      const indexOfEqual = param.search(\"=\");\n      if (indexOfEqual === -1) return;else {\n        const paramKey = param.substring(0, indexOfEqual);\n        const paramValue = param.substring(indexOfEqual + 1);\n        searchParamsValues[paramKey] = paramValue;\n      }\n    });\n    const response = await fetch(\"/api/yelpBusinessesAPI\", {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"POST\",\n      body: JSON.stringify({\n        location: searchParamsValues.location,\n        radius: searchParamsValues.radius,\n        term: searchParamsValues.placeType\n      })\n    });\n    const responseJson = await response.json();\n    return {\n      props: {\n        results: searchParamsValues\n      }\n    };\n  } else {\n    return {\n      props: {\n        results: {},\n        searchType: \"ALL\"\n      }\n    };\n  }\n}\nexport default Queried;","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","Queried","props","state","setState","useState","resultsType","console","log","getServerSideProps","query","params","queried","checkURLIsString","toString","paramValueArray","split","searchParamsValues","forEach","param","indexOfEqual","search","paramKey","substring","paramValue","response","fetch","headers","Accept","method","body","JSON","stringify","location","radius","term","placeType","responseJson","json","results","searchType"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AASA,MAAMC,OAAiB,GAAIC,KAAD,IAAW;AACnC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,KAAK,CAACK,QAAN,CAAe;AAAEC,IAAAA,WAAW,EAAE;AAAf,GAAf,CAA1B,CADmC,CAEnC;AACA;AACA;AACA;AACA;AACA;AACA;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AACA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP,CAVmC,CAYnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CAjED,C,CAmEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,eAAeO,kBAAf,CAAkC;AACvCC,EAAAA,KADuC;AAEvCC,EAAAA;AAFuC,CAAlC,EAGuD;AAC5D,MAAID,KAAK,CAACE,OAAV,EAAmB;AACjB,UAAMC,gBAAwB,GAAGH,KAAK,CAACE,OAAN,CAAcE,QAAd,EAAjC;AACA,UAAMC,eAAyB,GAAGF,gBAAgB,CAACG,KAAjB,CAAuB,GAAvB,CAAlC;AAEA,UAAMC,kBAA6C,GAAG,EAAtD;AAEAV,IAAAA,OAAO,CAACC,GAAR,CAAYG,MAAZ;AAEAI,IAAAA,eAAe,CAACG,OAAhB,CAAyBC,KAAD,IAAW;AACjC,YAAMC,YAAoB,GAAGD,KAAK,CAACE,MAAN,CAAa,GAAb,CAA7B;AACA,UAAID,YAAY,KAAK,CAAC,CAAtB,EAAyB,OAAzB,KACK;AACH,cAAME,QAAgB,GAAGH,KAAK,CAACI,SAAN,CAAgB,CAAhB,EAAmBH,YAAnB,CAAzB;AACA,cAAMI,UAAkB,GAAGL,KAAK,CAACI,SAAN,CAAgBH,YAAY,GAAG,CAA/B,CAA3B;AACAH,QAAAA,kBAAkB,CAACK,QAAD,CAAlB,GAA+BE,UAA/B;AACD;AACF,KARD;AAUA,UAAMC,QAAkB,GAAG,MAAMC,KAAK,CAAC,wBAAD,EAA2B;AAC/DC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,kBADD;AAEP,wBAAgB;AAFT,OADsD;AAK/DC,MAAAA,MAAM,EAAE,MALuD;AAM/DC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,QAAQ,EAAEhB,kBAAkB,CAACgB,QADV;AAEnBC,QAAAA,MAAM,EAAEjB,kBAAkB,CAACiB,MAFR;AAGnBC,QAAAA,IAAI,EAAElB,kBAAkB,CAACmB;AAHN,OAAf;AANyD,KAA3B,CAAtC;AAaA,UAAMC,YAAY,GAAG,MAAMZ,QAAQ,CAACa,IAAT,EAA3B;AAEA,WAAO;AACLpC,MAAAA,KAAK,EAAE;AACLqC,QAAAA,OAAO,EAAEtB;AADJ;AADF,KAAP;AAKD,GAtCD,MAsCO;AACL,WAAO;AAAEf,MAAAA,KAAK,EAAE;AAAEqC,QAAAA,OAAO,EAAE,EAAX;AAAeC,QAAAA,UAAU,EAAE;AAA3B;AAAT,KAAP;AACD;AACF;AAED,eAAevC,OAAf","sourcesContent":["import * as React from \"react\";\r\nimport { Layout, ResultCard } from \"../../components\";\r\nimport {\r\n  yelpBusinessesCall,\r\n  yelpEventsCall,\r\n  ticketMasterCall,\r\n} from \"../../apicalls\";\r\nimport css from \"../../styles/Queried.module.scss\";\r\n\r\nconst Queried: React.FC = (props) => {\r\n  const [state, setState] = React.useState({ resultsType: \"\" });\r\n  // React.useEffect(() => {\r\n  //   if (searchType) {\r\n  //     switch (searchType) {\r\n  //       case \"ALL\":\r\n  //     }\r\n  //   }\r\n  // });\r\n  console.log(props);\r\n  return <div></div>;\r\n\r\n  // const setTypeButtons: () => JSX.Element = () => {\r\n  //   if (searchType) {\r\n  //     switch (searchType) {\r\n  //       case \"ALL\":\r\n  //         return (\r\n  //           <React.Fragment>\r\n  //             <button className={css.typeButton}>Places</button>\r\n  //             <button className={css.typeButton}>Events</button>\r\n  //           </React.Fragment>\r\n  //         );\r\n  //       case \"PLACES\":\r\n  //         return <button className={css.typeButton}>Places</button>;\r\n\r\n  //       case \"EVENTS\":\r\n  //         return <button className={css.typeButton}>Events</button>;\r\n  //       default:\r\n  //         return (\r\n  //           <React.Fragment>\r\n  //             <button className={css.typeButton}>Places</button>\r\n  //             <button className={css.typeButton}>Events</button>\r\n  //           </React.Fragment>\r\n  //         );\r\n  //     }\r\n  //   } else {\r\n  //     return (\r\n  //       <React.Fragment>\r\n  //         <button className={css.typeButton}>Places</button>\r\n  //         <button className={css.typeButton}>Events</button>\r\n  //       </React.Fragment>\r\n  //     );\r\n  //   }\r\n  // };\r\n\r\n  // return (\r\n  //   <Layout>\r\n  //     <main className={css.queriedPage}>\r\n  //       <section className={css.queryDisplay}></section>\r\n  //       <section className={css.header}>\r\n  //         {setTypeButtons()}\r\n  //         <button className={css.sort}>Sort</button>\r\n  //       </section>\r\n  //       <section className={css.results}>\r\n  //         <div className={css.resultsSlider}>\r\n  //           {/* {results\r\n  //             ? results.map((item) => {\r\n  //                 return <ResultCard key={item.id} item={item}></ResultCard>;\r\n  //               })\r\n  //             : null} */}\r\n  //         </div>\r\n  //       </section>\r\n  //     </main>\r\n  //   </Layout>\r\n  // );\r\n};\r\n\r\n// Queried.getInitialProps = async ({\r\n//   query,\r\n// }): Promise<{ results: any; searchType: string }> => {\r\n//   if (query.queried) {\r\n//     const checkURLIsString: string = query.queried.toString();\r\n//     const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n//     const searchParamsValues: { [key: string]: string } = {};\r\n\r\n//     paramValueArray.forEach((param) => {\r\n//       const indexOfEqual: number = param.search(\"=\");\r\n//       if (indexOfEqual === -1) return;\r\n//       else {\r\n//         const paramKey: string = param.substring(0, indexOfEqual);\r\n//         const paramValue: string = param.substring(indexOfEqual + 1);\r\n//         searchParamsValues[paramKey] = paramValue;\r\n//       }\r\n//     });\r\n\r\n//     const apiResponse: Promise<\r\n//       { [key: string]: any }[] | string\r\n//     > = await yelpBusinessesCall(searchParamsValues);\r\n\r\n//     return { results: apiResponse, searchType: searchParamsValues.searchType };\r\n//   } else {\r\n//     return { results: {}, searchType: \"ALL\" };\r\n//   }\r\n// };\r\n\r\nexport async function getServerSideProps({\r\n  query,\r\n  params,\r\n}): Promise<{ props: { results: any; searchType?: string } }> {\r\n  if (query.queried) {\r\n    const checkURLIsString: string = query.queried.toString();\r\n    const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n    const searchParamsValues: { [key: string]: string } = {};\r\n\r\n    console.log(params);\r\n\r\n    paramValueArray.forEach((param) => {\r\n      const indexOfEqual: number = param.search(\"=\");\r\n      if (indexOfEqual === -1) return;\r\n      else {\r\n        const paramKey: string = param.substring(0, indexOfEqual);\r\n        const paramValue: string = param.substring(indexOfEqual + 1);\r\n        searchParamsValues[paramKey] = paramValue;\r\n      }\r\n    });\r\n\r\n    const response: Response = await fetch(\"/api/yelpBusinessesAPI\", {\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        location: searchParamsValues.location,\r\n        radius: searchParamsValues.radius,\r\n        term: searchParamsValues.placeType,\r\n      }),\r\n    });\r\n\r\n    const responseJson = await response.json();\r\n\r\n    return {\r\n      props: {\r\n        results: searchParamsValues,\r\n      },\r\n    };\r\n  } else {\r\n    return { props: { results: {}, searchType: \"ALL\" } };\r\n  }\r\n}\r\n\r\nexport default Queried;\r\n"]},"metadata":{},"sourceType":"module"}