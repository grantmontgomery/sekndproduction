{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { Layout, ResultCard } from \"../../components\";\nimport { yelpBusinessesCall } from \"../../apicalls\";\nimport css from \"../../styles/Queried.module.scss\";\nexport default function Queried(_ref) {\n  _s();\n\n  var _this = this;\n\n  var results = _ref.results,\n      searchType = _ref.searchType;\n\n  var _React$useState = React.useState({\n    resultsType: \"\"\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (searchType) {\n      switch (searchType) {\n        case \"ALL\":\n      }\n    }\n  });\n\n  var setTypeButtons = function setTypeButtons() {\n    if (searchType) {\n      switch (searchType) {\n        case \"ALL\":\n          return __jsx(React.Fragment, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 13\n            }\n          }, __jsx(\"button\", {\n            className: css.typeButton,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 15\n            }\n          }, \"Places\"), __jsx(\"button\", {\n            className: css.typeButton,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 27,\n              columnNumber: 15\n            }\n          }, \"Events\"));\n\n        case \"PLACES\":\n          return __jsx(\"button\", {\n            className: css.typeButton,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 18\n            }\n          }, \"Places\");\n\n        case \"EVENTS\":\n          return __jsx(\"button\", {\n            className: css.typeButton,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 18\n            }\n          }, \"Events\");\n\n        default:\n          return __jsx(React.Fragment, {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 13\n            }\n          }, __jsx(\"button\", {\n            className: css.typeButton,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 15\n            }\n          }, \"Places\"), __jsx(\"button\", {\n            className: css.typeButton,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 15\n            }\n          }, \"Events\"));\n      }\n    } else {\n      return __jsx(React.Fragment, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 9\n        }\n      }, __jsx(\"button\", {\n        className: css.typeButton,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }\n      }, \"Places\"), __jsx(\"button\", {\n        className: css.typeButton,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }\n      }, \"Events\"));\n    }\n  };\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, __jsx(\"main\", {\n    className: css.queriedPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, __jsx(\"section\", {\n    className: css.queryDisplay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }), __jsx(\"section\", {\n    className: css.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, setTypeButtons(), __jsx(\"button\", {\n    className: css.sort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, \"Sort\")), __jsx(\"section\", {\n    className: css.results,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: css.resultsSlider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, results && Array.isArray(results) ? results.map(function (item) {\n    return __jsx(ResultCard, {\n      key: item.id,\n      item: item,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 26\n      }\n    });\n  }) : null))));\n}\n\n_s(Queried, \"IMZgU6u6YjTbWlHz+JGfUpzN6o8=\");\n\n_c = Queried;\n\nQueried.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n    var query, checkURLIsString, paramValueArray, searchParamsValues, apiResponse;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = _ref2.query;\n\n            if (!query.queried) {\n              _context.next = 12;\n              break;\n            }\n\n            checkURLIsString = query.queried.toString();\n            paramValueArray = checkURLIsString.split(\"+\");\n            searchParamsValues = {};\n            paramValueArray.forEach(function (param) {\n              var indexOfEqual = param.search(\"=\");\n              if (indexOfEqual === -1) return;else {\n                var paramKey = param.substring(0, indexOfEqual);\n                var paramValue = param.substring(indexOfEqual + 1);\n                searchParamsValues[paramKey] = paramValue;\n              }\n            });\n            _context.next = 8;\n            return yelpBusinessesCall(searchParamsValues);\n\n          case 8:\n            apiResponse = _context.sent;\n            return _context.abrupt(\"return\", {\n              results: apiResponse,\n              searchType: searchParamsValues.searchType\n            });\n\n          case 12:\n            return _context.abrupt(\"return\", {\n              results: {},\n              searchType: \"ALL\"\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar _c;\n\n$RefreshReg$(_c, \"Queried\");","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","Layout","ResultCard","yelpBusinessesCall","css","Queried","results","searchType","useState","resultsType","state","setState","useEffect","setTypeButtons","typeButton","queriedPage","queryDisplay","header","sort","resultsSlider","Array","isArray","map","item","id","getInitialProps","query","queried","checkURLIsString","toString","paramValueArray","split","searchParamsValues","forEach","param","indexOfEqual","search","paramKey","substring","paramValue","apiResponse"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { Layout, ResultCard } from \"../../components\";\r\nimport {\r\n  yelpBusinessesCall,\r\n  yelpEventsCall,\r\n  ticketMasterCall,\r\n} from \"../../apicalls\";\r\nimport css from \"../../styles/Queried.module.scss\";\r\n\r\nexport default function Queried({ results, searchType }): JSX.Element {\r\n  const [state, setState] = React.useState({ resultsType: \"\" });\r\n  React.useEffect(() => {\r\n    if (searchType) {\r\n      switch (searchType) {\r\n        case \"ALL\":\r\n      }\r\n    }\r\n  });\r\n\r\n  const setTypeButtons: () => JSX.Element = () => {\r\n    if (searchType) {\r\n      switch (searchType) {\r\n        case \"ALL\":\r\n          return (\r\n            <React.Fragment>\r\n              <button className={css.typeButton}>Places</button>\r\n              <button className={css.typeButton}>Events</button>\r\n            </React.Fragment>\r\n          );\r\n        case \"PLACES\":\r\n          return <button className={css.typeButton}>Places</button>;\r\n\r\n        case \"EVENTS\":\r\n          return <button className={css.typeButton}>Events</button>;\r\n        default:\r\n          return (\r\n            <React.Fragment>\r\n              <button className={css.typeButton}>Places</button>\r\n              <button className={css.typeButton}>Events</button>\r\n            </React.Fragment>\r\n          );\r\n      }\r\n    } else {\r\n      return (\r\n        <React.Fragment>\r\n          <button className={css.typeButton}>Places</button>\r\n          <button className={css.typeButton}>Events</button>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <main className={css.queriedPage}>\r\n        <section className={css.queryDisplay}></section>\r\n        <section className={css.header}>\r\n          {setTypeButtons()}\r\n          <button className={css.sort}>Sort</button>\r\n        </section>\r\n        <section className={css.results}>\r\n          <div className={css.resultsSlider}>\r\n            {results && Array.isArray(results)\r\n              ? results.map((item) => {\r\n                  return <ResultCard key={item.id} item={item}></ResultCard>;\r\n                })\r\n              : null}\r\n          </div>\r\n        </section>\r\n      </main>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nQueried.getInitialProps = async ({\r\n  query,\r\n}): Promise<{ results: any; searchType: string }> => {\r\n  if (query.queried) {\r\n    const checkURLIsString: string = query.queried.toString();\r\n    const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n    const searchParamsValues: { [key: string]: string } = {};\r\n\r\n    paramValueArray.forEach((param) => {\r\n      const indexOfEqual: number = param.search(\"=\");\r\n      if (indexOfEqual === -1) return;\r\n      else {\r\n        const paramKey: string = param.substring(0, indexOfEqual);\r\n        const paramValue: string = param.substring(indexOfEqual + 1);\r\n        searchParamsValues[paramKey] = paramValue;\r\n      }\r\n    });\r\n\r\n    const apiResponse: Promise<\r\n      { [key: string]: any }[] | string\r\n    > = await yelpBusinessesCall(searchParamsValues);\r\n\r\n    return { results: apiResponse, searchType: searchParamsValues.searchType };\r\n  } else {\r\n    return { results: {}, searchType: \"ALL\" };\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}