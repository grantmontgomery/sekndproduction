{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { Layout } from \"../../components\";\nimport { yelpBusinessesCall, yelpEventsCall, ticketMasterCall } from \"../../apicalls\";\nimport { useRouter } from \"next/router\";\nexport default function Queried() {\n  var _React$useState = React.useState({\n    resultsType: \"\"\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  var _React$useState3 = React.useState({\n    items: [],\n    errors: {\n      yelpPlaces: \"\",\n      yelpEvents: \"\",\n      ticketmaster: \"\"\n    }\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      results = _React$useState4[0],\n      setResults = _React$useState4[1];\n\n  var router = useRouter();\n\n  var APICalls = /*#__PURE__*/function () {\n    function APICalls(searchParams) {\n      _classCallCheck(this, APICalls);\n\n      _defineProperty(this, \"searchParams\", void 0);\n\n      _defineProperty(this, \"results\", void 0);\n\n      this.searchParams = searchParams;\n      this.results = {\n        items: [],\n        errors: {\n          yelpPlaces: \"\",\n          yelpEvents: \"\",\n          ticketmaster: \"\"\n        }\n      };\n    }\n\n    _createClass(APICalls, [{\n      key: \"yelpBusinesses\",\n      value: function () {\n        var _yelpBusinesses = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var _this$searchParams, location, radius, placeType, yelpBusinessesResponse;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _this$searchParams = this.searchParams, location = _this$searchParams.location, radius = _this$searchParams.radius, placeType = _this$searchParams.placeType;\n                  _context.next = 3;\n                  return yelpBusinessesCall({\n                    location: location,\n                    radius: radius,\n                    placeType: placeType\n                  });\n\n                case 3:\n                  yelpBusinessesResponse = _context.sent;\n                  Array.isArray(yelpBusinessesResponse) ? this.results.items = yelpBusinessesResponse : this.results.errors.yelpPlaces = \"\".concat(yelpBusinessesResponse);\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        function yelpBusinesses() {\n          return _yelpBusinesses.apply(this, arguments);\n        }\n\n        return yelpBusinesses;\n      }()\n    }, {\n      key: \"yelpEvents\",\n      value: function () {\n        var _yelpEvents = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n          var _this$searchParams2, location, radius, unixStartDate, unixEndDate, yelpEventsResponse;\n\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _this$searchParams2 = this.searchParams, location = _this$searchParams2.location, radius = _this$searchParams2.radius, unixStartDate = _this$searchParams2.unixStartDate, unixEndDate = _this$searchParams2.unixEndDate;\n                  _context2.next = 3;\n                  return yelpEventsCall({\n                    location: location,\n                    radius: radius,\n                    unixStartDate: unixStartDate,\n                    unixEndDate: unixEndDate\n                  });\n\n                case 3:\n                  yelpEventsResponse = _context2.sent;\n                  Array.isArray(yelpEventsResponse) ? this.results.items = [].concat(_toConsumableArray(this.results.items), _toConsumableArray(yelpEventsResponse)) : this.results.errors.yelpEvents = \"\".concat(yelpEventsResponse);\n\n                case 5:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n\n        function yelpEvents() {\n          return _yelpEvents.apply(this, arguments);\n        }\n\n        return yelpEvents;\n      }()\n    }, {\n      key: \"ticketMaster\",\n      value: function () {\n        var _ticketMaster = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n          var _this$searchParams3, location, radius, startFormatted, endFormatted, ticketMasterResponse;\n\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _this$searchParams3 = this.searchParams, location = _this$searchParams3.location, radius = _this$searchParams3.radius, startFormatted = _this$searchParams3.startFormatted, endFormatted = _this$searchParams3.endFormatted;\n                  _context3.next = 3;\n                  return ticketMasterCall({\n                    location: location,\n                    radius: radius,\n                    startFormatted: startFormatted,\n                    endFormatted: endFormatted\n                  });\n\n                case 3:\n                  ticketMasterResponse = _context3.sent;\n                  Array.isArray(ticketMasterResponse) ? this.results.items = [].concat(_toConsumableArray(this.results.items), _toConsumableArray(ticketMasterResponse)) : this.results.errors.ticketmaster = \"\".concat(ticketMasterResponse);\n\n                case 5:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, this);\n        }));\n\n        function ticketMaster() {\n          return _ticketMaster.apply(this, arguments);\n        }\n\n        return ticketMaster;\n      }()\n    }]);\n\n    return APICalls;\n  }();\n\n  React.useEffect(function () {\n    var query = router.query;\n    console.log(query);\n    console.log(\"running new call.\");\n    var newQuery = new APICalls(query);\n\n    switch (query.searchType) {\n      case \"ALL\":\n        newQuery.yelpBusinesses();\n        newQuery.yelpEvents();\n        newQuery.ticketMaster();\n        console.log(newQuery.results);\n        setResults(query.results);\n\n      case \"PLACES\":\n        newQuery.yelpBusinesses();\n        setResults(query.results);\n\n      case \"EVENTS\":\n        newQuery.yelpEvents();\n        newQuery.ticketMaster();\n        setResults(query.results);\n\n      default:\n        newQuery.yelpBusinesses();\n        newQuery.yelpEvents();\n        newQuery.ticketMaster();\n        setResults(query.results);\n    }\n  }, []);\n  console.log(results);\n  return __jsx(Layout, null);\n} // export default function Queried({\n//   results: { items, errors },\n//   searchType,\n// }): JSX.Element {\n//   const [state, setState] = React.useState({ resultsType: \"\" });\n//   const router = useRouter();\n//   console.log(router);\n//   console.log(items);\n//   const determineItems: () => JSX.Element | null = () => {\n//     if (!items) return null;\n//     switch (searchType) {\n//       case \"ALL\":\n//         if (Array.isArray(items.places) && Array.isArray(items.events)) {\n//           return state.resultsType === \"PLACES\"\n//             ? items.places.map((item) => (\n//                 <ResultCard key={item.id} item={item}></ResultCard>\n//               ))\n//             : items.events.map((item) => (\n//                 <ResultCard key={item.id} item={item}></ResultCard>\n//               ));\n//         } else {\n//           return null;\n//         }\n//       case \"PLACES\":\n//         return Array.isArray(items.places)\n//           ? items.places.map((item) => (\n//               <ResultCard key={item.id} item={item}></ResultCard>\n//             ))\n//           : null;\n//       case \"EVENTS\":\n//         return Array.isArray(items.events)\n//           ? items.events.map((item) => (\n//               <ResultCard key={item.id} item={item}></ResultCard>\n//             ))\n//           : null;\n//       default:\n//         if (Array.isArray(items.places) && Array.isArray(items.events)) {\n//           return state.resultsType === \"PLACES\"\n//             ? items.places.map((item) => (\n//                 <ResultCard key={item.id} item={item}></ResultCard>\n//               ))\n//             : items.events.map((item) => (\n//                 <ResultCard key={item.id} item={item}></ResultCard>\n//               ));\n//         } else {\n//           return null;\n//         }\n//     }\n//   };\n//   const setTypeButtons: () => JSX.Element = () => {\n//     if (searchType) {\n//       switch (searchType) {\n//         case \"ALL\":\n//           return (\n//             <React.Fragment>\n//               <button\n//                 className={css.typeButton}\n//                 onClick={() => setState({ resultsType: \"PLACES\" })}\n//               >\n//                 Places\n//               </button>\n//               <button\n//                 className={css.typeButton}\n//                 onClick={() => setState({ resultsType: \"EVENTS\" })}\n//               >\n//                 Events\n//               </button>\n//             </React.Fragment>\n//           );\n//         case \"PLACES\":\n//           return (\n//             <button\n//               className={css.typeButton}\n//               onClick={() => setState({ resultsType: \"PLACES\" })}\n//             >\n//               Places\n//             </button>\n//           );\n//         case \"EVENTS\":\n//           return (\n//             <button\n//               className={css.typeButton}\n//               onClick={() => setState({ resultsType: \"EVENTS\" })}\n//             >\n//               Events\n//             </button>\n//           );\n//         default:\n//           return (\n//             <React.Fragment>\n//               <button\n//                 className={css.typeButton}\n//                 onClick={() => setState({ resultsType: \"PLACES\" })}\n//               >\n//                 Places\n//               </button>\n//               <button\n//                 className={css.typeButton}\n//                 onClick={() => setState({ resultsType: \"EVENTS\" })}\n//               >\n//                 Events\n//               </button>\n//             </React.Fragment>\n//           );\n//       }\n//     } else {\n//       return (\n//         <React.Fragment>\n//           <button\n//             className={css.typeButton}\n//             onClick={() => setState({ resultsType: \"PLACES\" })}\n//           >\n//             Places\n//           </button>\n//           <button\n//             className={css.typeButton}\n//             onClick={() => setState({ resultsType: \"EVENTS\" })}\n//           >\n//             Events\n//           </button>\n//         </React.Fragment>\n//       );\n//     }\n//   };\n//   return (\n//     <Layout>\n//       <main className={css.queriedPage}>\n//         {/* <section className={css.queryDisplay}></section> */}\n//         <section className={css.header}>\n//           {setTypeButtons()}\n//           <button className={css.sort}>Sort</button>\n//         </section>\n//         <div className={css.resultsSlider}>{determineItems()}</div>\n//       </main>\n//     </Layout>\n//   );\n// }\n// type Results = {\n//   items: { places: { [key: string]: any }[]; events: { [key: string]: any }[] };\n//   errors: { yelpPlaces: string; yelpEvents: string; ticketmaster: string };\n// };\n// type APIResponse = Promise<{ [key: string]: any }[] | string>;\n// type SearchParams = { [key: string]: any };\n// Queried.getInitialProps = async ({\n//   query,\n//   pathname,\n//   asPath,\n// }): Promise<{\n//   results: any;\n//   searchType: string;\n// }> => {\n//   const {\n//     searchType,\n//     location,\n//     radius,\n//     placeType,\n//     startFormatted,\n//     endFormatted,\n//     unixStartDate,\n//     unixEndDate,\n//     eventsCategory,\n//   } = query;\n//   if (location && radius && startFormatted && endFormatted) {\n//     console.log(\"api call\");\n// class APICalls {\n//   searchParams: SearchParams;\n//   results: Results;\n//   constructor(searchParams: SearchParams) {\n//     this.searchParams = searchParams;\n//     this.results = {\n//       items: { places: [], events: [] },\n//       errors: { yelpPlaces: \"\", yelpEvents: \"\", ticketmaster: \"\" },\n//     };\n//   }\n//   public async yelpBusinesses() {\n//     const { location, radius, placeType } = this.searchParams;\n//     const yelpBusinessesResponse: APIResponse = await yelpBusinessesCall({\n//       location,\n//       radius,\n//       placeType,\n//     });\n//     Array.isArray(yelpBusinessesResponse)\n//       ? (this.results.items.places = yelpBusinessesResponse)\n//       : (this.results.errors.yelpPlaces = `${yelpBusinessesResponse}`);\n//   }\n//   public async yelpEvents() {\n//     const {\n//       location,\n//       radius,\n//       unixStartDate,\n//       unixEndDate,\n//     } = this.searchParams;\n//     const yelpEventsResponse: APIResponse = await yelpEventsCall({\n//       location,\n//       radius,\n//       unixStartDate,\n//       unixEndDate,\n//     });\n//     Array.isArray(yelpEventsResponse)\n//       ? (this.results.items.events = [\n//           ...this.results.items.events,\n//           ...yelpEventsResponse,\n//         ])\n//       : (this.results.errors.yelpEvents = `${yelpEventsResponse}`);\n//   }\n//   public async ticketMaster() {\n//     const {\n//       location,\n//       radius,\n//       startFormatted,\n//       endFormatted,\n//     } = this.searchParams;\n//     const ticketMasterResponse: APIResponse = await ticketMasterCall({\n//       location,\n//       radius,\n//       startFormatted,\n//       endFormatted,\n//     });\n//     Array.isArray(ticketMasterResponse)\n//       ? (this.results.items.events = [\n//           ...this.results.items.events,\n//           ...ticketMasterResponse,\n//         ])\n//       : (this.results.errors.ticketmaster = `${ticketMasterResponse}`);\n//   }\n// }\n//     const callAPIS: (searchType: string) => Promise<Results> = async (\n//       searchType\n//     ) => {\n//       const APICall = new APICalls({\n//         location,\n//         radius,\n//         placeType,\n//         startFormatted,\n//         endFormatted,\n//         unixStartDate,\n//         unixEndDate,\n//         eventsCategory,\n//       });\n//       try {\n//         switch (searchType) {\n//           case \"PLACES\":\n//             APICall.yelpBusinesses();\n//             return APICall.results;\n//           case \"EVENTS\":\n//             APICall.yelpEvents();\n//             APICall.ticketMaster();\n//             return APICall.results;\n//           case \"ALL\":\n//             APICall.yelpBusinesses();\n//             APICall.yelpEvents();\n//             APICall.ticketMaster();\n//             return APICall.results;\n//           default:\n//             APICall.yelpBusinesses();\n//             APICall.yelpEvents();\n//             APICall.ticketMaster();\n//             return APICall.results;\n//         }\n//       } catch {\n//         APICall.results.errors.yelpPlaces = \"CALL ERROR\";\n//         APICall.results.errors.yelpEvents = \"CALL ERROR\";\n//         APICall.results.errors.ticketmaster = \"CALL ERROR\";\n//         return APICall.results;\n//       }\n//     };\n//     const results: Results = await callAPIS(searchType);\n//     return {\n//       results,\n//       searchType,\n//     };\n//   } else {\n//     const checkURLIsString: string = query.queried.toString();\n//     const paramValueArray: string[] = checkURLIsString.split(\"+\");\n//     const searchParamsValues: SearchParams = {};\n//     paramValueArray.forEach((param) => {\n//       const indexOfEqual: number = param.search(\"=\");\n//       if (indexOfEqual === -1) return;\n//       else {\n//         const paramKey: string = param.substring(0, indexOfEqual);\n//         const paramValue: string = param.substring(indexOfEqual + 1);\n//         searchParamsValues[paramKey] = paramValue;\n//       }\n//     });\n//     return {\n//       results: { error: \"BadCall\" },\n//       searchType: \"ALL\",\n//     };\n//   }\n// };","map":null,"metadata":{},"sourceType":"module"}