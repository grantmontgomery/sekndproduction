{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from \"react\";\nimport { Layout } from \"../../components\";\nimport { yelpBusinessesCall, yelpEventsCall, ticketMasterCall } from \"../../apicalls\";\nimport { useRouter } from \"next/router\";\nexport default function Queried() {\n  const [state, setState] = React.useState({\n    resultsType: \"\"\n  });\n  const [results, setResults] = React.useState({\n    items: [],\n    errors: {\n      yelpPlaces: \"\",\n      yelpEvents: \"\",\n      ticketmaster: \"\"\n    }\n  });\n  const router = useRouter();\n\n  class APICalls {\n    constructor(searchParams) {\n      _defineProperty(this, \"searchParams\", void 0);\n\n      _defineProperty(this, \"results\", void 0);\n\n      this.searchParams = searchParams;\n      this.results = {\n        items: [],\n        errors: {\n          yelpPlaces: \"\",\n          yelpEvents: \"\",\n          ticketmaster: \"\"\n        }\n      };\n    }\n\n    async yelpBusinesses() {\n      const {\n        location,\n        radius,\n        placeType\n      } = this.searchParams;\n      const yelpBusinessesResponse = await yelpBusinessesCall({\n        location,\n        radius,\n        placeType\n      });\n      Array.isArray(yelpBusinessesResponse) ? this.results.items = yelpBusinessesResponse : this.results.errors.yelpPlaces = `${yelpBusinessesResponse}`;\n    }\n\n    async yelpEvents() {\n      const {\n        location,\n        radius,\n        unixStartDate,\n        unixEndDate\n      } = this.searchParams;\n      const yelpEventsResponse = await yelpEventsCall({\n        location,\n        radius,\n        unixStartDate,\n        unixEndDate\n      });\n      Array.isArray(yelpEventsResponse) ? this.results.items = [...this.results.items, ...yelpEventsResponse] : this.results.errors.yelpEvents = `${yelpEventsResponse}`;\n    }\n\n    async ticketMaster() {\n      const {\n        location,\n        radius,\n        startFormatted,\n        endFormatted\n      } = this.searchParams;\n      const ticketMasterResponse = await ticketMasterCall({\n        location,\n        radius,\n        startFormatted,\n        endFormatted\n      });\n      Array.isArray(ticketMasterResponse) ? this.results.items = [...this.results.items, ...ticketMasterResponse] : this.results.errors.ticketmaster = `${ticketMasterResponse}`;\n    }\n\n  }\n\n  React.useEffect(() => {\n    const {\n      query\n    } = router;\n    console.log(query);\n    console.log(\"running new call.\");\n    const newQuery = new APICalls(query);\n\n    switch (query.searchType) {\n      case \"ALL\":\n        newQuery.yelpBusinesses();\n        newQuery.yelpEvents();\n        newQuery.ticketMaster();\n        console.log(newQuery.results);\n        setResults(query.results);\n\n      case \"PLACES\":\n        newQuery.yelpBusinesses();\n        setResults(query.results);\n\n      case \"EVENTS\":\n        newQuery.yelpEvents();\n        newQuery.ticketMaster();\n        setResults(query.results);\n\n      default:\n        newQuery.yelpBusinesses();\n        newQuery.yelpEvents();\n        newQuery.ticketMaster();\n        setResults(query.results);\n    }\n  }, []);\n  console.log(results);\n  return __jsx(Layout, null);\n} // export default function Queried({\n//   results: { items, errors },\n//   searchType,\n// }): JSX.Element {\n//   const [state, setState] = React.useState({ resultsType: \"\" });\n//   const router = useRouter();\n//   console.log(router);\n//   console.log(items);\n//   const determineItems: () => JSX.Element | null = () => {\n//     if (!items) return null;\n//     switch (searchType) {\n//       case \"ALL\":\n//         if (Array.isArray(items.places) && Array.isArray(items.events)) {\n//           return state.resultsType === \"PLACES\"\n//             ? items.places.map((item) => (\n//                 <ResultCard key={item.id} item={item}></ResultCard>\n//               ))\n//             : items.events.map((item) => (\n//                 <ResultCard key={item.id} item={item}></ResultCard>\n//               ));\n//         } else {\n//           return null;\n//         }\n//       case \"PLACES\":\n//         return Array.isArray(items.places)\n//           ? items.places.map((item) => (\n//               <ResultCard key={item.id} item={item}></ResultCard>\n//             ))\n//           : null;\n//       case \"EVENTS\":\n//         return Array.isArray(items.events)\n//           ? items.events.map((item) => (\n//               <ResultCard key={item.id} item={item}></ResultCard>\n//             ))\n//           : null;\n//       default:\n//         if (Array.isArray(items.places) && Array.isArray(items.events)) {\n//           return state.resultsType === \"PLACES\"\n//             ? items.places.map((item) => (\n//                 <ResultCard key={item.id} item={item}></ResultCard>\n//               ))\n//             : items.events.map((item) => (\n//                 <ResultCard key={item.id} item={item}></ResultCard>\n//               ));\n//         } else {\n//           return null;\n//         }\n//     }\n//   };\n//   const setTypeButtons: () => JSX.Element = () => {\n//     if (searchType) {\n//       switch (searchType) {\n//         case \"ALL\":\n//           return (\n//             <React.Fragment>\n//               <button\n//                 className={css.typeButton}\n//                 onClick={() => setState({ resultsType: \"PLACES\" })}\n//               >\n//                 Places\n//               </button>\n//               <button\n//                 className={css.typeButton}\n//                 onClick={() => setState({ resultsType: \"EVENTS\" })}\n//               >\n//                 Events\n//               </button>\n//             </React.Fragment>\n//           );\n//         case \"PLACES\":\n//           return (\n//             <button\n//               className={css.typeButton}\n//               onClick={() => setState({ resultsType: \"PLACES\" })}\n//             >\n//               Places\n//             </button>\n//           );\n//         case \"EVENTS\":\n//           return (\n//             <button\n//               className={css.typeButton}\n//               onClick={() => setState({ resultsType: \"EVENTS\" })}\n//             >\n//               Events\n//             </button>\n//           );\n//         default:\n//           return (\n//             <React.Fragment>\n//               <button\n//                 className={css.typeButton}\n//                 onClick={() => setState({ resultsType: \"PLACES\" })}\n//               >\n//                 Places\n//               </button>\n//               <button\n//                 className={css.typeButton}\n//                 onClick={() => setState({ resultsType: \"EVENTS\" })}\n//               >\n//                 Events\n//               </button>\n//             </React.Fragment>\n//           );\n//       }\n//     } else {\n//       return (\n//         <React.Fragment>\n//           <button\n//             className={css.typeButton}\n//             onClick={() => setState({ resultsType: \"PLACES\" })}\n//           >\n//             Places\n//           </button>\n//           <button\n//             className={css.typeButton}\n//             onClick={() => setState({ resultsType: \"EVENTS\" })}\n//           >\n//             Events\n//           </button>\n//         </React.Fragment>\n//       );\n//     }\n//   };\n//   return (\n//     <Layout>\n//       <main className={css.queriedPage}>\n//         {/* <section className={css.queryDisplay}></section> */}\n//         <section className={css.header}>\n//           {setTypeButtons()}\n//           <button className={css.sort}>Sort</button>\n//         </section>\n//         <div className={css.resultsSlider}>{determineItems()}</div>\n//       </main>\n//     </Layout>\n//   );\n// }\n// type Results = {\n//   items: { places: { [key: string]: any }[]; events: { [key: string]: any }[] };\n//   errors: { yelpPlaces: string; yelpEvents: string; ticketmaster: string };\n// };\n// type APIResponse = Promise<{ [key: string]: any }[] | string>;\n// type SearchParams = { [key: string]: any };\n// Queried.getInitialProps = async ({\n//   query,\n//   pathname,\n//   asPath,\n// }): Promise<{\n//   results: any;\n//   searchType: string;\n// }> => {\n//   const {\n//     searchType,\n//     location,\n//     radius,\n//     placeType,\n//     startFormatted,\n//     endFormatted,\n//     unixStartDate,\n//     unixEndDate,\n//     eventsCategory,\n//   } = query;\n//   if (location && radius && startFormatted && endFormatted) {\n//     console.log(\"api call\");\n// class APICalls {\n//   searchParams: SearchParams;\n//   results: Results;\n//   constructor(searchParams: SearchParams) {\n//     this.searchParams = searchParams;\n//     this.results = {\n//       items: { places: [], events: [] },\n//       errors: { yelpPlaces: \"\", yelpEvents: \"\", ticketmaster: \"\" },\n//     };\n//   }\n//   public async yelpBusinesses() {\n//     const { location, radius, placeType } = this.searchParams;\n//     const yelpBusinessesResponse: APIResponse = await yelpBusinessesCall({\n//       location,\n//       radius,\n//       placeType,\n//     });\n//     Array.isArray(yelpBusinessesResponse)\n//       ? (this.results.items.places = yelpBusinessesResponse)\n//       : (this.results.errors.yelpPlaces = `${yelpBusinessesResponse}`);\n//   }\n//   public async yelpEvents() {\n//     const {\n//       location,\n//       radius,\n//       unixStartDate,\n//       unixEndDate,\n//     } = this.searchParams;\n//     const yelpEventsResponse: APIResponse = await yelpEventsCall({\n//       location,\n//       radius,\n//       unixStartDate,\n//       unixEndDate,\n//     });\n//     Array.isArray(yelpEventsResponse)\n//       ? (this.results.items.events = [\n//           ...this.results.items.events,\n//           ...yelpEventsResponse,\n//         ])\n//       : (this.results.errors.yelpEvents = `${yelpEventsResponse}`);\n//   }\n//   public async ticketMaster() {\n//     const {\n//       location,\n//       radius,\n//       startFormatted,\n//       endFormatted,\n//     } = this.searchParams;\n//     const ticketMasterResponse: APIResponse = await ticketMasterCall({\n//       location,\n//       radius,\n//       startFormatted,\n//       endFormatted,\n//     });\n//     Array.isArray(ticketMasterResponse)\n//       ? (this.results.items.events = [\n//           ...this.results.items.events,\n//           ...ticketMasterResponse,\n//         ])\n//       : (this.results.errors.ticketmaster = `${ticketMasterResponse}`);\n//   }\n// }\n//     const callAPIS: (searchType: string) => Promise<Results> = async (\n//       searchType\n//     ) => {\n//       const APICall = new APICalls({\n//         location,\n//         radius,\n//         placeType,\n//         startFormatted,\n//         endFormatted,\n//         unixStartDate,\n//         unixEndDate,\n//         eventsCategory,\n//       });\n//       try {\n//         switch (searchType) {\n//           case \"PLACES\":\n//             APICall.yelpBusinesses();\n//             return APICall.results;\n//           case \"EVENTS\":\n//             APICall.yelpEvents();\n//             APICall.ticketMaster();\n//             return APICall.results;\n//           case \"ALL\":\n//             APICall.yelpBusinesses();\n//             APICall.yelpEvents();\n//             APICall.ticketMaster();\n//             return APICall.results;\n//           default:\n//             APICall.yelpBusinesses();\n//             APICall.yelpEvents();\n//             APICall.ticketMaster();\n//             return APICall.results;\n//         }\n//       } catch {\n//         APICall.results.errors.yelpPlaces = \"CALL ERROR\";\n//         APICall.results.errors.yelpEvents = \"CALL ERROR\";\n//         APICall.results.errors.ticketmaster = \"CALL ERROR\";\n//         return APICall.results;\n//       }\n//     };\n//     const results: Results = await callAPIS(searchType);\n//     return {\n//       results,\n//       searchType,\n//     };\n//   } else {\n//     const checkURLIsString: string = query.queried.toString();\n//     const paramValueArray: string[] = checkURLIsString.split(\"+\");\n//     const searchParamsValues: SearchParams = {};\n//     paramValueArray.forEach((param) => {\n//       const indexOfEqual: number = param.search(\"=\");\n//       if (indexOfEqual === -1) return;\n//       else {\n//         const paramKey: string = param.substring(0, indexOfEqual);\n//         const paramValue: string = param.substring(indexOfEqual + 1);\n//         searchParamsValues[paramKey] = paramValue;\n//       }\n//     });\n//     return {\n//       results: { error: \"BadCall\" },\n//       searchType: \"ALL\",\n//     };\n//   }\n// };","map":null,"metadata":{},"sourceType":"module"}