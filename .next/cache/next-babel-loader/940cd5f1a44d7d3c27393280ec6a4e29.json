{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useGridDispatch } from \"../../../state/SearchGridContext\";\nimport { useSquaresDispatch } from \"../../../state/GridSquaresContext\";\n\nclass ScheduleGrid {\n  constructor(unixStartDate, unixEndDate) {\n    _defineProperty(this, \"unixStartDate\", void 0);\n\n    _defineProperty(this, \"unixEndDate\", void 0);\n\n    _defineProperty(this, \"numberofSquares\", void 0);\n\n    _defineProperty(this, \"templateAreas\", void 0);\n\n    _defineProperty(this, \"startHour\", void 0);\n\n    _defineProperty(this, \"hourDifference\", void 0);\n\n    _defineProperty(this, \"columnAmount\", void 0);\n\n    _defineProperty(this, \"endHour\", void 0);\n\n    _defineProperty(this, \"hourStrings\", void 0);\n\n    this.unixStartDate = unixStartDate;\n    this.unixEndDate = unixEndDate;\n    this.startHour = 0;\n    this.hourDifference = 0;\n    this.templateAreas = \"\";\n    this.columnAmount = 0;\n    this.endHour = 0;\n    this.hourStrings = [];\n    this.numberofSquares = 0;\n  }\n\n  setSquares() {\n    const timeDifference = this.unixEndDate - this.unixStartDate;\n    const hours = Math.floor(timeDifference / 3600);\n    const numColumns = hours * 2 + 4;\n    const numberOfSquares = numColumns * 5;\n    this.numberofSquares = numberOfSquares;\n    this.columnAmount = numColumns;\n    this.hourDifference = hours;\n  }\n\n  setHours() {\n    const startDate = new Date(this.unixStartDate * 1000);\n    const endDate = new Date(this.unixEndDate * 1000);\n    const startHour = startDate.getHours();\n    const endHour = endDate.getHours();\n    this.startHour = startHour;\n    this.endHour = endHour;\n  }\n\n  setGridTemplate() {\n    const square = \"square \";\n    const rowString = `\"${square.repeat(this.columnAmount - 1)} square\"`;\n    this.templateAreas = `${rowString.repeat(5)}`;\n  }\n\n  setHoursHeader() {\n    let hourCounter = 0;\n    let startHourCounter = this.startHour;\n    const hourNumbers = [];\n\n    while (hourCounter <= this.hourDifference) {\n      hourNumbers.push(startHourCounter);\n      hourCounter++;\n      startHourCounter < 24 ? startHourCounter++ : startHourCounter = 1;\n    }\n\n    const hourStrings = [];\n    hourNumbers.forEach(hour => {\n      if (hour === 24) {\n        return hourStrings.push(\"12:00 a.m\");\n      } else if (hour === 12) {\n        return hourStrings.push(\"12:00 p.m\");\n      } else {\n        return hour < 12 ? hourStrings.push(`${hour}:00 a.m`) : hourStrings.push(`${hour - 12}:00 p.m`);\n      }\n    });\n    this.hourStrings = hourStrings;\n  }\n\n  setGrid() {\n    this.setSquares();\n    this.setHours();\n    this.setGridTemplate();\n    this.setHoursHeader();\n  }\n\n}\n\nexport default function useSetGrid(unixStartDate, unixEndDate) {\n  const newDateInputs = new ScheduleGrid(unixStartDate, unixEndDate);\n  newDateInputs.setGrid();\n  return useGridDispatch()({\n    type: \"ADD_GRID_TEMPLATE\",\n    payload: {\n      hourStrings: newDateInputs.hourStrings,\n      gridTemplate: newDateInputs.templateAreas\n    }\n  }), useSquaresDispatch()({\n    type: \"ADD_SQUARES\",\n    payload: {\n      numberOfSquares: newDateInputs.numberofSquares\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/components/SearchBox/Logic/useSetGrid.ts"],"names":["useGridDispatch","useSquaresDispatch","ScheduleGrid","constructor","unixStartDate","unixEndDate","startHour","hourDifference","templateAreas","columnAmount","endHour","hourStrings","numberofSquares","setSquares","timeDifference","hours","Math","floor","numColumns","numberOfSquares","setHours","startDate","Date","endDate","getHours","setGridTemplate","square","rowString","repeat","setHoursHeader","hourCounter","startHourCounter","hourNumbers","push","forEach","hour","setGrid","useSetGrid","newDateInputs","type","payload","gridTemplate"],"mappings":"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","sourcesContent":["import { Dispatch } from \"react\";\r\nimport { useGridDispatch } from \"../../../state/SearchGridContext\";\r\nimport { useSquaresDispatch } from \"../../../state/GridSquaresContext\";\r\n\r\nclass ScheduleGrid {\r\n  unixStartDate: number;\r\n  unixEndDate: number;\r\n  numberofSquares: number;\r\n  templateAreas: string;\r\n  startHour: number;\r\n  hourDifference: number;\r\n  columnAmount: number;\r\n  endHour: number;\r\n  hourStrings: string[];\r\n\r\n  constructor(unixStartDate: number, unixEndDate: number) {\r\n    this.unixStartDate = unixStartDate;\r\n    this.unixEndDate = unixEndDate;\r\n    this.startHour = 0;\r\n    this.hourDifference = 0;\r\n    this.templateAreas = \"\";\r\n    this.columnAmount = 0;\r\n    this.endHour = 0;\r\n    this.hourStrings = [];\r\n    this.numberofSquares = 0;\r\n  }\r\n\r\n  private setSquares() {\r\n    const timeDifference: number = this.unixEndDate - this.unixStartDate;\r\n    const hours: number = Math.floor(timeDifference / 3600);\r\n    const numColumns: number = hours * 2 + 4;\r\n    const numberOfSquares: number = numColumns * 5;\r\n    this.numberofSquares = numberOfSquares;\r\n    this.columnAmount = numColumns;\r\n    this.hourDifference = hours;\r\n  }\r\n\r\n  private setHours() {\r\n    const startDate: Date = new Date(this.unixStartDate * 1000);\r\n    const endDate: Date = new Date(this.unixEndDate * 1000);\r\n\r\n    const startHour: number = startDate.getHours();\r\n    const endHour: number = endDate.getHours();\r\n\r\n    this.startHour = startHour;\r\n    this.endHour = endHour;\r\n  }\r\n\r\n  private setGridTemplate() {\r\n    const square: string = \"square \";\r\n    const rowString: string = `\"${square.repeat(\r\n      this.columnAmount - 1\r\n    )} square\"`;\r\n    this.templateAreas = `${rowString.repeat(5)}`;\r\n  }\r\n\r\n  private setHoursHeader() {\r\n    let hourCounter: number = 0;\r\n    let startHourCounter: number = this.startHour;\r\n\r\n    const hourNumbers: number[] = [];\r\n\r\n    while (hourCounter <= this.hourDifference) {\r\n      hourNumbers.push(startHourCounter);\r\n      hourCounter++;\r\n      startHourCounter < 24 ? startHourCounter++ : (startHourCounter = 1);\r\n    }\r\n\r\n    const hourStrings: string[] = [];\r\n\r\n    hourNumbers.forEach((hour) => {\r\n      if (hour === 24) {\r\n        return hourStrings.push(\"12:00 a.m\");\r\n      } else if (hour === 12) {\r\n        return hourStrings.push(\"12:00 p.m\");\r\n      } else {\r\n        return hour < 12\r\n          ? hourStrings.push(`${hour}:00 a.m`)\r\n          : hourStrings.push(`${hour - 12}:00 p.m`);\r\n      }\r\n    });\r\n    this.hourStrings = hourStrings;\r\n  }\r\n\r\n  public setGrid() {\r\n    this.setSquares();\r\n    this.setHours();\r\n    this.setGridTemplate();\r\n    this.setHoursHeader();\r\n  }\r\n}\r\n\r\nexport default function useSetGrid(\r\n  unixStartDate: number,\r\n  unixEndDate: number\r\n): void {\r\n  const newDateInputs = new ScheduleGrid(unixStartDate, unixEndDate);\r\n  newDateInputs.setGrid();\r\n  return (\r\n    useGridDispatch()({\r\n      type: \"ADD_GRID_TEMPLATE\",\r\n      payload: {\r\n        hourStrings: newDateInputs.hourStrings,\r\n        gridTemplate: newDateInputs.templateAreas,\r\n      },\r\n    }),\r\n    useSquaresDispatch()({\r\n      type: \"ADD_SQUARES\",\r\n      payload: { numberOfSquares: newDateInputs.numberofSquares },\r\n    })\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}