{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { Layout, ResultCard } from \"../../components\";\nimport useAPICalls from \"../../swr/useAPICalls\";\nimport { useRouter } from \"next/router\";\nimport css from \"../../styles/Queried.module.scss\";\nexport default function Queried() {\n  _s();\n\n  var _this = this;\n\n  var _React$useState = React.useState({\n    resultsType: \"place\"\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  var router = useRouter();\n  var urlStart = true ? \"http://localhost:3000\" : \"https://sekndapp.com\";\n\n  var setSearchParameters = function setSearchParameters() {\n    var query = router.query;\n    if (!query.queried) return null;\n    if (query.searchType) return query;\n    var checkURLIsString = query.queried.toString();\n    var paramValueArray = checkURLIsString.split(\"+\");\n    var SearchParams = {};\n    paramValueArray.forEach(function (param) {\n      var indexOfEqual = param.search(\"=\");\n      if (indexOfEqual === -1) return;else {\n        var paramKey = param.substring(0, indexOfEqual);\n        var paramValue = param.substring(indexOfEqual + 1);\n        SearchParams[paramKey] = paramValue;\n      }\n    });\n    return SearchParams;\n  };\n\n  var _useAPICalls = useAPICalls(setSearchParameters(), urlStart),\n      items = _useAPICalls.items,\n      loading = _useAPICalls.loading,\n      errors = _useAPICalls.errors;\n\n  React.useEffect(function () {\n    console.log(\"setting result type\");\n\n    if (setSearchParameters()) {\n      setSearchParameters().searchType === \"EVENTS\" ? setState({\n        resultsType: \"event\"\n      }) : null;\n    }\n  }, [setSearchParameters()]);\n\n  var setResultsButtons = function setResultsButtons() {\n    if (loading) return null;\n    return setSearchParameters() && setSearchParameters().searchType === \"ALL\" ? __jsx(React.Fragment, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }\n    }, __jsx(\"button\", {\n      className: css.typeButton,\n      onClick: function onClick() {\n        return setState({\n          resultsType: \"place\"\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }, \"Places\"), __jsx(\"button\", {\n      className: css.typeButton,\n      onClick: function onClick() {\n        return setState({\n          resultsType: \"event\"\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, \"Events\")) : null;\n  };\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, __jsx(\"main\", {\n    className: css.queriedPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, __jsx(\"section\", {\n    className: css.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, setResultsButtons(), __jsx(\"button\", {\n    className: css.sort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, \"Sort\")), loading ? __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, __jsx(ResultCard, {\n    resultsLoading: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }), __jsx(ResultCard, {\n    resultsLoading: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }), __jsx(ResultCard, {\n    resultsLoading: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  })) : __jsx(\"div\", {\n    className: css.resultsSlider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, items && items.length > 0 ? items.filter(function (item) {\n    if (setSearchParameters().searchType !== \"ALL\") return item;\n    return state.resultsType === \"place\" ? item.type === \"place\" : item.type === \"event\";\n  }).map(function (item) {\n    return __jsx(ResultCard, {\n      item: item,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 34\n      }\n    });\n  }) : null)));\n}\n\n_s(Queried, \"o91pmgopQyQLIKunW5sgbsC1+Jw=\", false, function () {\n  return [useRouter, useAPICalls];\n});\n\n_c = Queried;\n\nvar _c;\n\n$RefreshReg$(_c, \"Queried\");","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","Layout","ResultCard","useAPICalls","useRouter","css","Queried","useState","resultsType","state","setState","router","urlStart","setSearchParameters","query","queried","searchType","checkURLIsString","toString","paramValueArray","split","SearchParams","forEach","param","indexOfEqual","search","paramKey","substring","paramValue","items","loading","errors","useEffect","console","log","setResultsButtons","typeButton","queriedPage","header","sort","resultsSlider","length","filter","item","type","map"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { Layout, ResultCard, SekndLoader } from \"../../components\";\r\nimport useAPICalls from \"../../swr/useAPICalls\";\r\nimport { NextRouter, useRouter } from \"next/router\";\r\nimport css from \"../../styles/Queried.module.scss\";\r\n\r\ntype Results = {\r\n  items: { [key: string]: any }[];\r\n  errors: {\r\n    yelpPlacesError?: string | undefined;\r\n    yelpEventsError?: string | undefined;\r\n    ticketmasterError?: string | undefined;\r\n  };\r\n};\r\n\r\ntype APIResponse = { [key: string]: any }[];\r\n\r\ntype SearchParams = { [key: string]: any };\r\n\r\nexport default function Queried(): JSX.Element {\r\n  const [state, setState] = React.useState<{ resultsType: string }>({\r\n    resultsType: \"place\",\r\n  });\r\n  const router: NextRouter = useRouter();\r\n\r\n  const urlStart: string =\r\n    process.env.NODE_ENV !== \"production\"\r\n      ? \"http://localhost:3000\"\r\n      : \"https://sekndapp.com\";\r\n\r\n  const setSearchParameters: () => { [key: string]: any } | null = () => {\r\n    const { query } = router;\r\n    if (!query.queried) return null;\r\n    if (query.searchType) return query;\r\n\r\n    const checkURLIsString: string = query.queried.toString();\r\n    const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n    const SearchParams: SearchParams = {};\r\n\r\n    paramValueArray.forEach((param) => {\r\n      const indexOfEqual: number = param.search(\"=\");\r\n      if (indexOfEqual === -1) return;\r\n      else {\r\n        const paramKey: string = param.substring(0, indexOfEqual);\r\n        const paramValue: string = param.substring(indexOfEqual + 1);\r\n        SearchParams[paramKey] = paramValue;\r\n      }\r\n    });\r\n    return SearchParams;\r\n  };\r\n\r\n  const { items, loading, errors } = useAPICalls(\r\n    setSearchParameters(),\r\n    urlStart\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    console.log(\"setting result type\");\r\n    if (setSearchParameters()) {\r\n      setSearchParameters().searchType === \"EVENTS\"\r\n        ? setState({ resultsType: \"event\" })\r\n        : null;\r\n    }\r\n  }, [setSearchParameters()]);\r\n\r\n  const setResultsButtons: () => JSX.Element | null = () => {\r\n    if (loading) return null;\r\n    return setSearchParameters() &&\r\n      setSearchParameters().searchType === \"ALL\" ? (\r\n      <React.Fragment>\r\n        <button\r\n          className={css.typeButton}\r\n          onClick={() => setState({ resultsType: \"place\" })}\r\n        >\r\n          Places\r\n        </button>\r\n        <button\r\n          className={css.typeButton}\r\n          onClick={() => setState({ resultsType: \"event\" })}\r\n        >\r\n          Events\r\n        </button>\r\n      </React.Fragment>\r\n    ) : null;\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <main className={css.queriedPage}>\r\n        {/* <section className={css.queryDisplay}></section> */}\r\n        <section className={css.header}>\r\n          {setResultsButtons()}\r\n          <button className={css.sort}>Sort</button>\r\n        </section>\r\n        {loading ? (\r\n          <React.Fragment>\r\n            <ResultCard resultsLoading={true}></ResultCard>\r\n            <ResultCard resultsLoading={true}></ResultCard>\r\n            <ResultCard resultsLoading={true}></ResultCard>\r\n          </React.Fragment>\r\n        ) : (\r\n          <div className={css.resultsSlider}>\r\n            {items && items.length > 0\r\n              ? items\r\n                  .filter((item) => {\r\n                    if (setSearchParameters().searchType !== \"ALL\") return item;\r\n                    return state.resultsType === \"place\"\r\n                      ? item.type === \"place\"\r\n                      : item.type === \"event\";\r\n                  })\r\n                  .map((item) => <ResultCard item={item}></ResultCard>)\r\n              : null}\r\n          </div>\r\n        )}\r\n      </main>\r\n    </Layout>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}