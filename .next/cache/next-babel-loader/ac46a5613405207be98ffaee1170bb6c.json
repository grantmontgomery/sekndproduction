{"ast":null,"code":"import useSWR from \"swr\";\nexport default function useAPICalls(setSearchParameters, urlStart) {\n  const {\n    data: yelpPlaces,\n    error: yelpPlacesError,\n    isValidating: yelpPlacesLoading\n  } = useSWR(setSearchParameters && setSearchParameters.searchType !== \"EVENTS\" ? `${urlStart}/api/yelpBusinessesAPI` : null, async url => {\n    const {\n      location,\n      radius,\n      placeType\n    } = setSearchParameters;\n\n    try {\n      console.log(url ? \"fetching yelp places\" : \"cancelled places fetch\");\n      const response = await fetch(url, {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          location,\n          radius: parseInt(radius),\n          term: placeType\n        })\n      });\n      const responseJSON = await response.json();\n      const {\n        businesses\n      } = responseJSON;\n      businesses.forEach(business => (business[\"type\"] = \"place\", business[\"source\"] = \"yelp\", business[\"inParts\"] = false));\n      return businesses;\n    } catch (err) {\n      return err.message;\n    }\n  }, {\n    revalidateOnFocus: false\n  });\n  const {\n    data: yelpEvents,\n    error: yelpEventsError,\n    isValidating: yelpEventsLoading\n  } = useSWR(setSearchParameters && setSearchParameters.searchType !== \"PLACES\" ? `${urlStart}/api/yelpEventsAPI` : null, async url => {\n    const {\n      location,\n      radius,\n      unixStartDate,\n      unixEndDate\n    } = setSearchParameters;\n\n    try {\n      console.log(url ? \"fetching yelp events\" : \"cancelled events fetch\");\n      const response = await fetch(url, {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          location,\n          radius: parseInt(radius),\n          start_date: parseInt(unixStartDate),\n          end_date: parseInt(unixEndDate)\n        })\n      });\n      const responseJSON = await response.json();\n      const {\n        events\n      } = responseJSON;\n      events.forEach(event => (event[\"type\"] = \"event\", event[\"source\"] = \"yelp\", event[\"inParts\"] = false));\n      return events;\n    } catch (err) {\n      return err.message;\n    }\n  }, {\n    revalidateOnFocus: false\n  });\n  const {\n    data: ticketmaster,\n    error: ticketmasterError,\n    isValidating: ticketmasterLoading\n  } = useSWR(setSearchParameters && setSearchParameters.searchType !== \"PLACES\" ? `${urlStart}/api/ticketmasterAPI` : null, async url => {\n    const {\n      location,\n      radius,\n      startFormatted,\n      endFormatted\n    } = setSearchParameters;\n\n    try {\n      console.log(url ? \"fetching yelp events\" : \"cancelled ticketmaster fetch\");\n      const response = await fetch(url, {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          location,\n          radius: Math.floor(parseInt(radius) * 0.001).toString(),\n          startDateTime: startFormatted,\n          endDateTime: endFormatted\n        })\n      });\n      const responseJSON = await response.json();\n      const {\n        _embedded: {\n          events\n        }\n      } = responseJSON;\n      events.forEach(event => (event[\"source\"] = \"ticketmaster\", event[\"type\"] = \"event\", event[\"inParts\"] = false));\n      return events;\n    } catch (err) {\n      return err.message;\n    }\n  }, {\n    revalidateOnFocus: false\n  });\n  const checkYelpPlacesArray = Array.isArray(yelpPlaces) ? yelpPlaces : [];\n  const checkYelpEventsArray = Array.isArray(yelpEvents) ? yelpEvents : [];\n  const checkTicketMasterArray = Array.isArray(ticketmaster) ? ticketmaster : [];\n  return {\n    items: [...checkTicketMasterArray, ...checkYelpEventsArray, ...checkYelpPlacesArray],\n    loading: ticketmasterLoading || yelpEventsLoading || yelpPlacesLoading,\n    errors: {\n      yelpEventsError,\n      yelpPlacesError,\n      ticketmasterError\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/swr/useAPICalls.ts"],"names":["useSWR","useAPICalls","setSearchParameters","urlStart","data","yelpPlaces","error","yelpPlacesError","isValidating","yelpPlacesLoading","searchType","url","location","radius","placeType","console","log","response","fetch","headers","Accept","method","body","JSON","stringify","parseInt","term","responseJSON","json","businesses","forEach","business","err","message","revalidateOnFocus","yelpEvents","yelpEventsError","yelpEventsLoading","unixStartDate","unixEndDate","start_date","end_date","events","event","ticketmaster","ticketmasterError","ticketmasterLoading","startFormatted","endFormatted","Math","floor","toString","startDateTime","endDateTime","_embedded","checkYelpPlacesArray","Array","isArray","checkYelpEventsArray","checkTicketMasterArray","items","loading","errors"],"mappings":"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","sourcesContent":["import useSWR, { responseInterface } from \"swr\";\r\n\r\ntype APIResponse = { [key: string]: any }[];\r\n\r\ntype Results = {\r\n  items: { [key: string]: any }[] | null;\r\n  errors: {\r\n    yelpPlacesError?: string | undefined;\r\n    yelpEventsError?: string | undefined;\r\n    ticketmasterError?: string | undefined;\r\n  };\r\n};\r\n\r\nexport default function useAPICalls(\r\n  setSearchParameters: { [key: string]: any } | null,\r\n  urlStart: string\r\n): {\r\n  items: APIResponse;\r\n  loading: boolean;\r\n  errors: {\r\n    yelpPlacesError: string;\r\n    yelpEventsError: string;\r\n    ticketmasterError: string;\r\n  };\r\n} {\r\n  const {\r\n    data: yelpPlaces,\r\n    error: yelpPlacesError,\r\n    isValidating: yelpPlacesLoading,\r\n  }: responseInterface<APIResponse, string> = useSWR(\r\n    setSearchParameters && setSearchParameters.searchType !== \"EVENTS\"\r\n      ? `${urlStart}/api/yelpBusinessesAPI`\r\n      : null,\r\n\r\n    async (url) => {\r\n      const { location, radius, placeType } = setSearchParameters;\r\n      try {\r\n        console.log(url ? \"fetching yelp places\" : \"cancelled places fetch\");\r\n        const response: Response = await fetch(url, {\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            location,\r\n            radius: parseInt(radius),\r\n            term: placeType,\r\n          }),\r\n        });\r\n\r\n        const responseJSON = await response.json();\r\n\r\n        const {\r\n          businesses,\r\n        }: { businesses: { [key: string]: any }[] } = responseJSON;\r\n        businesses.forEach(\r\n          (business) => (\r\n            (business[\"type\"] = \"place\"),\r\n            (business[\"source\"] = \"yelp\"),\r\n            (business[\"inParts\"] = false)\r\n          )\r\n        );\r\n\r\n        return businesses;\r\n      } catch (err) {\r\n        return err.message;\r\n      }\r\n    },\r\n    {\r\n      revalidateOnFocus: false,\r\n    }\r\n  );\r\n\r\n  const {\r\n    data: yelpEvents,\r\n    error: yelpEventsError,\r\n    isValidating: yelpEventsLoading,\r\n  }: responseInterface<APIResponse, string> = useSWR(\r\n    setSearchParameters && setSearchParameters.searchType !== \"PLACES\"\r\n      ? `${urlStart}/api/yelpEventsAPI`\r\n      : null,\r\n    async (url) => {\r\n      const {\r\n        location,\r\n        radius,\r\n        unixStartDate,\r\n        unixEndDate,\r\n      } = setSearchParameters;\r\n      try {\r\n        console.log(url ? \"fetching yelp events\" : \"cancelled events fetch\");\r\n        const response: Response = await fetch(url, {\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            location,\r\n            radius: parseInt(radius),\r\n            start_date: parseInt(unixStartDate),\r\n            end_date: parseInt(unixEndDate),\r\n          }),\r\n        });\r\n\r\n        const responseJSON = await response.json();\r\n\r\n        const { events }: { events: { [key: string]: any }[] } = responseJSON;\r\n        events.forEach(\r\n          (event) => (\r\n            (event[\"type\"] = \"event\"),\r\n            (event[\"source\"] = \"yelp\"),\r\n            (event[\"inParts\"] = false)\r\n          )\r\n        );\r\n        return events;\r\n      } catch (err) {\r\n        return err.message;\r\n      }\r\n    },\r\n    {\r\n      revalidateOnFocus: false,\r\n    }\r\n  );\r\n\r\n  const {\r\n    data: ticketmaster,\r\n    error: ticketmasterError,\r\n    isValidating: ticketmasterLoading,\r\n  }: responseInterface<APIResponse, string> = useSWR(\r\n    setSearchParameters && setSearchParameters.searchType !== \"PLACES\"\r\n      ? `${urlStart}/api/ticketmasterAPI`\r\n      : null,\r\n    async (url) => {\r\n      const {\r\n        location,\r\n        radius,\r\n        startFormatted,\r\n        endFormatted,\r\n      } = setSearchParameters;\r\n      try {\r\n        console.log(\r\n          url ? \"fetching yelp events\" : \"cancelled ticketmaster fetch\"\r\n        );\r\n\r\n        const response: Response = await fetch(url, {\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            location,\r\n            radius: Math.floor(parseInt(radius) * 0.001).toString(),\r\n            startDateTime: startFormatted,\r\n            endDateTime: endFormatted,\r\n          }),\r\n        });\r\n\r\n        const responseJSON = await response.json();\r\n        const {\r\n          _embedded: { events },\r\n        }: { _embedded: { events: { [key: string]: any }[] } } = responseJSON;\r\n\r\n        events.forEach(\r\n          (event) => (\r\n            (event[\"source\"] = \"ticketmaster\"),\r\n            (event[\"type\"] = \"event\"),\r\n            (event[\"inParts\"] = false)\r\n          )\r\n        );\r\n\r\n        return events;\r\n      } catch (err) {\r\n        return err.message;\r\n      }\r\n    },\r\n    {\r\n      revalidateOnFocus: false,\r\n    }\r\n  );\r\n\r\n  const checkYelpPlacesArray: Results[\"items\"] | [] = Array.isArray(yelpPlaces)\r\n    ? yelpPlaces\r\n    : [];\r\n  const checkYelpEventsArray: Results[\"items\"] | [] = Array.isArray(yelpEvents)\r\n    ? yelpEvents\r\n    : [];\r\n  const checkTicketMasterArray: Results[\"items\"] | [] = Array.isArray(\r\n    ticketmaster\r\n  )\r\n    ? ticketmaster\r\n    : [];\r\n\r\n  return {\r\n    items: [\r\n      ...checkTicketMasterArray,\r\n      ...checkYelpEventsArray,\r\n      ...checkYelpPlacesArray,\r\n    ],\r\n    loading: ticketmasterLoading || yelpEventsLoading || yelpPlacesLoading,\r\n    errors: { yelpEventsError, yelpPlacesError, ticketmasterError },\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}