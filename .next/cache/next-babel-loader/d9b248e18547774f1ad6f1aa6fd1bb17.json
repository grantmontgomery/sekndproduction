{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { Layout, ResultCard } from \"../../components\";\nimport useAPICalls from \"../../swr/useAPICalls\";\nimport { useRouter } from \"next/router\";\nimport { useSquaresState } from \"../../state/GridSquaresContext\";\nimport { useGridState } from \"../../state/SearchGridContext\";\nimport css from \"../../styles/Queried.module.scss\";\nexport default function Queried() {\n  var _React$useState = React.useState({\n    resultsType: \"place\"\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  var router = useRouter();\n  console.log(useGridState());\n  console.log(useSquaresState());\n  var urlStart = false ? \"http://localhost:3000\" : \"https://sekndapp.com\";\n\n  var setSearchParameters = function setSearchParameters() {\n    var query = router.query;\n    if (!query.queried) return null;\n    if (query.searchType) return query;\n    var checkURLIsString = query.queried.toString();\n    var paramValueArray = checkURLIsString.split(\"+\");\n    var SearchParams = {};\n    paramValueArray.forEach(function (param) {\n      var indexOfEqual = param.search(\"=\");\n      if (indexOfEqual === -1) return;else {\n        var paramKey = param.substring(0, indexOfEqual);\n        var paramValue = param.substring(indexOfEqual + 1);\n        SearchParams[paramKey] = paramValue;\n      }\n    });\n    return SearchParams;\n  };\n\n  var _useAPICalls = useAPICalls(setSearchParameters(), urlStart),\n      items = _useAPICalls.items,\n      loading = _useAPICalls.loading,\n      errors = _useAPICalls.errors;\n\n  React.useEffect(function () {\n    console.log(\"setting result type\");\n\n    if (setSearchParameters()) {\n      setSearchParameters().searchType === \"EVENTS\" ? setState({\n        resultsType: \"event\"\n      }) : null;\n    }\n  }, [setSearchParameters()]);\n\n  var setResultsButtons = function setResultsButtons() {\n    if (loading) return null;\n    return setSearchParameters() && setSearchParameters().searchType === \"ALL\" ? __jsx(React.Fragment, null, __jsx(\"button\", {\n      className: css.typeButton,\n      onClick: function onClick() {\n        return setState({\n          resultsType: \"place\"\n        });\n      }\n    }, \"Places\"), __jsx(\"button\", {\n      className: css.typeButton,\n      onClick: function onClick() {\n        return setState({\n          resultsType: \"event\"\n        });\n      }\n    }, \"Events\")) : null;\n  };\n\n  var loadingDisplayItems = function loadingDisplayItems() {\n    if (loading) {\n      return __jsx(React.Fragment, null, __jsx(ResultCard, {\n        resultsLoading: true\n      }), __jsx(ResultCard, {\n        resultsLoading: true\n      }), __jsx(ResultCard, {\n        resultsLoading: true\n      }));\n    } else {\n      return items && items.length > 0 ? items.filter(function (item) {\n        if (setSearchParameters().searchType !== \"ALL\") return item;\n        return state.resultsType === \"place\" ? item.type === \"place\" : item.type === \"event\";\n      }).map(function (item) {\n        return __jsx(ResultCard, {\n          item: item\n        });\n      }) : null;\n    }\n  };\n\n  return __jsx(Layout, null, __jsx(\"main\", {\n    className: css.queriedPage\n  }, __jsx(\"section\", {\n    className: css.header\n  }, setResultsButtons(), __jsx(\"button\", {\n    className: css.sort\n  }, \"Sort\")), __jsx(\"div\", {\n    className: css.resultsSlider\n  }, loadingDisplayItems())));\n}","map":null,"metadata":{},"sourceType":"module"}