{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport useSWR from \"swr\";\nexport default function useAPICalls(setSearchParameters, urlStart) {\n  var _useSWR = useSWR(setSearchParameters && setSearchParameters.searchType !== \"EVENTS\" ? \"\".concat(urlStart, \"/api/yelpBusinessesAPI\") : null, /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n      var location, radius, placeType, response, responseJSON, businesses;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              location = setSearchParameters.location, radius = setSearchParameters.radius, placeType = setSearchParameters.placeType;\n              _context.prev = 1;\n              console.log(url ? \"fetching yelp places\" : \"cancelled places fetch\");\n              _context.next = 5;\n              return fetch(url, {\n                headers: {\n                  Accept: \"application/json\",\n                  \"Content-Type\": \"application/json\"\n                },\n                method: \"POST\",\n                body: JSON.stringify({\n                  location: location,\n                  radius: parseInt(radius),\n                  term: placeType\n                })\n              });\n\n            case 5:\n              response = _context.sent;\n              _context.next = 8;\n              return response.json();\n\n            case 8:\n              responseJSON = _context.sent;\n              businesses = responseJSON.businesses;\n              businesses.forEach(function (business) {\n                return business[\"type\"] = \"place\", business[\"source\"] = \"yelp\", business[\"inParts\"] = false;\n              });\n              return _context.abrupt(\"return\", businesses);\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](1);\n              return _context.abrupt(\"return\", _context.t0.message);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 14]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), {\n    revalidateOnFocus: false\n  }),\n      yelpPlaces = _useSWR.data,\n      yelpPlacesError = _useSWR.error,\n      yelpPlacesLoading = _useSWR.isValidating;\n\n  var _useSWR2 = useSWR(setSearchParameters && setSearchParameters.searchType !== \"PLACES\" ? \"\".concat(urlStart, \"/api/yelpEventsAPI\") : null, /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url) {\n      var location, radius, unixStartDate, unixEndDate, response, responseJSON, events;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              location = setSearchParameters.location, radius = setSearchParameters.radius, unixStartDate = setSearchParameters.unixStartDate, unixEndDate = setSearchParameters.unixEndDate;\n              _context2.prev = 1;\n              console.log(url ? \"fetching yelp events\" : \"cancelled events fetch\");\n              _context2.next = 5;\n              return fetch(url, {\n                headers: {\n                  Accept: \"application/json\",\n                  \"Content-Type\": \"application/json\"\n                },\n                method: \"POST\",\n                body: JSON.stringify({\n                  location: location,\n                  radius: parseInt(radius),\n                  start_date: parseInt(unixStartDate),\n                  end_date: parseInt(unixEndDate)\n                })\n              });\n\n            case 5:\n              response = _context2.sent;\n              _context2.next = 8;\n              return response.json();\n\n            case 8:\n              responseJSON = _context2.sent;\n              events = responseJSON.events;\n              events.forEach(function (event) {\n                return event[\"type\"] = \"event\", event[\"source\"] = \"yelp\", event[\"inParts\"] = false;\n              });\n              return _context2.abrupt(\"return\", events);\n\n            case 14:\n              _context2.prev = 14;\n              _context2.t0 = _context2[\"catch\"](1);\n              return _context2.abrupt(\"return\", _context2.t0.message);\n\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 14]]);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), {\n    revalidateOnFocus: false\n  }),\n      yelpEvents = _useSWR2.data,\n      yelpEventsError = _useSWR2.error,\n      yelpEventsLoading = _useSWR2.isValidating;\n\n  var _useSWR3 = useSWR(setSearchParameters && setSearchParameters.searchType !== \"PLACES\" ? \"\".concat(urlStart, \"/api/ticketmasterAPI\") : null, /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(url) {\n      var location, radius, startFormatted, endFormatted, response, responseJSON, events;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              location = setSearchParameters.location, radius = setSearchParameters.radius, startFormatted = setSearchParameters.startFormatted, endFormatted = setSearchParameters.endFormatted;\n              _context3.prev = 1;\n              console.log(url ? \"fetching yelp events\" : \"cancelled ticketmaster fetch\");\n              _context3.next = 5;\n              return fetch(url, {\n                headers: {\n                  Accept: \"application/json\",\n                  \"Content-Type\": \"application/json\"\n                },\n                method: \"POST\",\n                body: JSON.stringify({\n                  location: location,\n                  radius: Math.floor(parseInt(radius) * 0.001).toString(),\n                  startDateTime: startFormatted,\n                  endDateTime: endFormatted\n                })\n              });\n\n            case 5:\n              response = _context3.sent;\n              _context3.next = 8;\n              return response.json();\n\n            case 8:\n              responseJSON = _context3.sent;\n              events = responseJSON._embedded.events;\n              events.forEach(function (event) {\n                return event[\"source\"] = \"ticketmaster\", event[\"type\"] = \"event\", event[\"inParts\"] = false;\n              });\n              return _context3.abrupt(\"return\", events);\n\n            case 14:\n              _context3.prev = 14;\n              _context3.t0 = _context3[\"catch\"](1);\n              return _context3.abrupt(\"return\", _context3.t0.message);\n\n            case 17:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[1, 14]]);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }(), {\n    revalidateOnFocus: false\n  }),\n      ticketmaster = _useSWR3.data,\n      ticketmasterError = _useSWR3.error,\n      ticketmasterLoading = _useSWR3.isValidating;\n\n  var checkYelpPlacesArray = Array.isArray(yelpPlaces) ? yelpPlaces : [];\n  var checkYelpEventsArray = Array.isArray(yelpEvents) ? yelpEvents : [];\n  var checkTicketMasterArray = Array.isArray(ticketmaster) ? ticketmaster : [];\n  return {\n    items: [].concat(_toConsumableArray(checkTicketMasterArray), _toConsumableArray(checkYelpEventsArray), _toConsumableArray(checkYelpPlacesArray)),\n    loading: ticketmasterLoading || yelpEventsLoading || yelpPlacesLoading,\n    errors: {\n      yelpEventsError: yelpEventsError,\n      yelpPlacesError: yelpPlacesError,\n      ticketmasterError: ticketmasterError\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}