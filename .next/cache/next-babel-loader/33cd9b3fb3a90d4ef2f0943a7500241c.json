{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmont\\\\sekndproduction\\\\pages\\\\search\\\\[queried].tsx\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport { Layout, ResultCard, SekndLoader } from \"../../components\";\nimport { useRouter } from \"next/router\";\nimport useSWR from \"swr\";\nimport css from \"../../styles/Queried.module.scss\";\n\nconst QueryDisplay = ({\n  loading,\n  results,\n  searchType\n}) => {\n  const [state, setState] = React.useState({\n    resultsType: \"\"\n  });\n  React.useEffect(() => {\n    if (searchType === \"EVENTS\") setState({\n      resultsType: \"EVENTS\"\n    });\n    setState({\n      resultsType: \"PLACES\"\n    });\n  }, []);\n\n  const setTypeButtons = () => {\n    if (searchType !== \"ALL\") return null;\n    return __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }\n    }, __jsx(\"button\", {\n      className: css.typeButton,\n      onClick: () => setState({\n        resultsType: \"PLACES\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }\n    }, \"Places\"), __jsx(\"button\", {\n      className: css.typeButton,\n      onClick: () => setState({\n        resultsType: \"EVENTS\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }, \"Events\"));\n  };\n\n  const setItems = () => {\n    var _results$items3;\n\n    if (loading) return __jsx(SekndLoader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 25\n      }\n    });\n\n    if (searchType === \"ALL\") {\n      var _results$items, _results$items2;\n\n      __jsx(\"div\", {\n        className: css.resultsSlider,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 7\n        }\n      }, state.resultsType === \"PLACES\" ? (_results$items = results.items) === null || _results$items === void 0 ? void 0 : _results$items.filter(item => item.type === \"place\").map(item => __jsx(ResultCard, {\n        key: item.id,\n        item: item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }\n      })) : (_results$items2 = results.items) === null || _results$items2 === void 0 ? void 0 : _results$items2.filter(item => item.type === \"event\").map(item => __jsx(ResultCard, {\n        key: item.id,\n        item: item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }\n      })));\n    }\n\n    return __jsx(\"div\", {\n      className: css.resultsSlider,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }\n    }, (_results$items3 = results.items) === null || _results$items3 === void 0 ? void 0 : _results$items3.map(item => __jsx(ResultCard, {\n      key: item.id,\n      item: item,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    })));\n  };\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, __jsx(\"main\", {\n    className: css.queriedPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, __jsx(\"section\", {\n    className: css.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, setTypeButtons(), __jsx(\"button\", {\n    className: css.sort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, \"Sort\")), setItems()));\n};\n\nexport default function Queried() {\n  const [state, setState] = React.useState({\n    loading: true\n  });\n  const [results, setResults] = React.useState({\n    items: [],\n    errors: {\n      yelpEventsError: \"\",\n      yelpPlacesError: \"\",\n      ticketmasterError: \"\"\n    }\n  });\n  const router = useRouter();\n  const urlStart = true ? \"http://localhost:3000\" : \"https://sekndapp.com\";\n\n  const setSearchParameters = () => {\n    const {\n      query\n    } = router;\n    if (!query.queried) return null;\n    if (query.searchType) return query;\n    const checkURLIsString = query.queried.toString();\n    const paramValueArray = checkURLIsString.split(\"+\");\n    const SearchParams = {};\n    paramValueArray.forEach(param => {\n      const indexOfEqual = param.search(\"=\");\n      if (indexOfEqual === -1) return;else {\n        const paramKey = param.substring(0, indexOfEqual);\n        const paramValue = param.substring(indexOfEqual + 1);\n        SearchParams[paramKey] = paramValue;\n      }\n    });\n    return SearchParams;\n  };\n\n  const {\n    data: yelpPlaces,\n    error: yelpPlacesError,\n    isValidating: yelpPlacesLoading\n  } = useSWR(() => {\n    if (!setSearchParameters()) return null;\n    return setSearchParameters().searchType !== \"EVENTS\" ? `${urlStart}/api/yelpBusinessesAPI` : null;\n  }, async url => {\n    const {\n      location,\n      radius,\n      placeType\n    } = setSearchParameters();\n\n    try {\n      const response = await fetch(url, {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          location,\n          radius: parseInt(radius),\n          term: placeType\n        })\n      });\n      const responseJSON = await response.json();\n      const {\n        businesses\n      } = responseJSON;\n      businesses.forEach(business => (business[\"type\"] = \"place\", business[\"source\"] = \"yelp\", business[\"inParts\"] = false));\n      return businesses;\n    } catch (err) {\n      return err.message;\n    }\n  });\n  const {\n    data: yelpEvents,\n    error: yelpEventsError,\n    isValidating: yelpEventsLoading\n  } = useSWR(() => {\n    if (!setSearchParameters()) return null;\n    return setSearchParameters().searchType !== \"PLACES\" ? `${urlStart}/api/yelpEventsAPI` : null;\n  }, async url => {\n    const {\n      location,\n      radius,\n      unixStartDate,\n      unixEndDate\n    } = setSearchParameters();\n\n    try {\n      const response = await fetch(url, {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          location,\n          radius: parseInt(radius),\n          start_date: parseInt(unixStartDate),\n          end_date: parseInt(unixEndDate)\n        })\n      });\n      const responseJSON = await response.json();\n      const {\n        events\n      } = responseJSON;\n      events.forEach(event => (event[\"type\"] = \"event\", event[\"source\"] = \"yelp\", event[\"inParts\"] = false));\n      return events;\n    } catch (err) {\n      return err.message;\n    }\n  });\n  const {\n    data: ticketmaster,\n    error: ticketmasterError,\n    isValidating: ticketmasterLoading\n  } = useSWR(() => {\n    if (!setSearchParameters()) return null;\n    return setSearchParameters().searchType !== \"PLACES\" ? `${urlStart}/api/ticketmasterAPI` : null;\n  }, async url => {\n    const {\n      location,\n      radius,\n      startFormatted,\n      endFormatted\n    } = setSearchParameters();\n\n    try {\n      const response = await fetch(url, {\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          location,\n          radius: Math.floor(parseInt(radius) * 0.001).toString(),\n          startDateTime: startFormatted,\n          endDateTime: endFormatted\n        })\n      });\n      const responseJSON = await response.json();\n      const {\n        _embedded: {\n          events\n        }\n      } = responseJSON;\n      events.forEach(event => (event[\"source\"] = \"ticketmaster\", event[\"type\"] = \"event\", event[\"inParts\"] = false));\n      return events;\n    } catch (err) {\n      return err.message;\n    }\n  });\n  const checkYelpPlacesArray = Array.isArray(yelpPlaces) ? yelpPlaces : [];\n  const checkYelpEventsArray = Array.isArray(yelpEvents) ? yelpEvents : [];\n  const checkTicketMasterArray = Array.isArray(ticketmaster) ? ticketmaster : [];\n  if (!setSearchParameters()) return __jsx(QueryDisplay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 38\n    }\n  });\n\n  switch (setSearchParameters().searchType) {\n    case \"ALL\":\n      if (!yelpPlacesLoading && !yelpEventsLoading && !ticketmasterLoading) {\n        setState({\n          loading: false\n        });\n        setResults({\n          items: [...checkYelpPlacesArray, ...checkYelpEventsArray, ...checkTicketMasterArray],\n          errors: {\n            yelpPlacesError,\n            yelpEventsError,\n            ticketmasterError\n          }\n        });\n      }\n\n    case \"PLACES\":\n      if (!yelpPlacesLoading) {\n        setState({\n          loading: false\n        });\n        setResults({\n          items: [...checkYelpPlacesArray],\n          errors: {\n            yelpPlacesError,\n            yelpEventsError,\n            ticketmasterError\n          }\n        });\n      }\n\n    case \"EVENTS\":\n      if (!ticketmasterLoading && !yelpEventsLoading) {\n        setState({\n          loading: false\n        });\n        setResults({\n          items: [...checkYelpEventsArray, ...checkTicketMasterArray],\n          errors: {\n            yelpEventsError,\n            ticketmasterError\n          }\n        });\n      }\n\n  }\n\n  return __jsx(QueryDisplay, {\n    results: results,\n    loading: state.loading,\n    searchType: setSearchParameters().searchType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/gmont/sekndproduction/pages/search/[queried].tsx"],"names":["React","Layout","ResultCard","SekndLoader","useRouter","useSWR","css","QueryDisplay","loading","results","searchType","state","setState","useState","resultsType","useEffect","setTypeButtons","typeButton","setItems","resultsSlider","items","filter","item","type","map","id","queriedPage","header","sort","Queried","setResults","errors","yelpEventsError","yelpPlacesError","ticketmasterError","router","urlStart","setSearchParameters","query","queried","checkURLIsString","toString","paramValueArray","split","SearchParams","forEach","param","indexOfEqual","search","paramKey","substring","paramValue","data","yelpPlaces","error","isValidating","yelpPlacesLoading","url","location","radius","placeType","response","fetch","headers","Accept","method","body","JSON","stringify","parseInt","term","responseJSON","json","businesses","business","err","message","yelpEvents","yelpEventsLoading","unixStartDate","unixEndDate","start_date","end_date","events","event","ticketmaster","ticketmasterLoading","startFormatted","endFormatted","Math","floor","startDateTime","endDateTime","_embedded","checkYelpPlacesArray","Array","isArray","checkYelpEventsArray","checkTicketMasterArray"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { Layout, ResultCard, SekndLoader } from \"../../components\";\r\nimport {\r\n  yelpBusinessesCall,\r\n  yelpEventsCall,\r\n  ticketMasterCall,\r\n} from \"../../apicalls\";\r\nimport { NextRouter, useRouter } from \"next/router\";\r\nimport useSWR, { responseInterface } from \"swr\";\r\nimport css from \"../../styles/Queried.module.scss\";\r\nimport { ParsedUrlQuery } from \"querystring\";\r\nimport { SearchBox } from \"../../components/SearchBox\";\r\nimport { stat } from \"fs\";\r\n\r\ntype Results = {\r\n  items: { [key: string]: any }[];\r\n  errors: {\r\n    yelpPlacesError?: string | undefined;\r\n    yelpEventsError?: string | undefined;\r\n    ticketmasterError?: string | undefined;\r\n  };\r\n};\r\n\r\ntype APIResponse = { [key: string]: any }[];\r\n\r\ntype SearchParams = { [key: string]: any };\r\n\r\nconst QueryDisplay: React.FC<{\r\n  loading?: boolean;\r\n  searchType?: string;\r\n  results?: Results;\r\n}> = ({ loading, results, searchType }) => {\r\n  const [state, setState] = React.useState<{ resultsType: string }>({\r\n    resultsType: \"\",\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (searchType === \"EVENTS\") setState({ resultsType: \"EVENTS\" });\r\n    setState({ resultsType: \"PLACES\" });\r\n  }, []);\r\n\r\n  const setTypeButtons: () => JSX.Element = () => {\r\n    if (searchType !== \"ALL\") return null;\r\n    return (\r\n      <React.Fragment>\r\n        <button\r\n          className={css.typeButton}\r\n          onClick={() => setState({ resultsType: \"PLACES\" })}\r\n        >\r\n          Places\r\n        </button>\r\n        <button\r\n          className={css.typeButton}\r\n          onClick={() => setState({ resultsType: \"EVENTS\" })}\r\n        >\r\n          Events\r\n        </button>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  const setItems: () => JSX.Element = () => {\r\n    if (loading) return <SekndLoader></SekndLoader>;\r\n    if (searchType === \"ALL\") {\r\n      <div className={css.resultsSlider}>\r\n        {state.resultsType === \"PLACES\"\r\n          ? results.items\r\n              ?.filter((item) => item.type === \"place\")\r\n              .map((item) => (\r\n                <ResultCard key={item.id} item={item}></ResultCard>\r\n              ))\r\n          : results.items\r\n              ?.filter((item) => item.type === \"event\")\r\n              .map((item) => (\r\n                <ResultCard key={item.id} item={item}></ResultCard>\r\n              ))}\r\n      </div>;\r\n    }\r\n\r\n    return (\r\n      <div className={css.resultsSlider}>\r\n        {results.items?.map((item) => (\r\n          <ResultCard key={item.id} item={item}></ResultCard>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <main className={css.queriedPage}>\r\n        {/* <section className={css.queryDisplay}></section> */}\r\n        <section className={css.header}>\r\n          {setTypeButtons()}\r\n          <button className={css.sort}>Sort</button>\r\n        </section>\r\n        {setItems()}\r\n      </main>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default function Queried(): JSX.Element {\r\n  const [state, setState] = React.useState<{ loading: boolean }>({\r\n    loading: true,\r\n  });\r\n  const [results, setResults] = React.useState<Results>({\r\n    items: [],\r\n    errors: {\r\n      yelpEventsError: \"\",\r\n      yelpPlacesError: \"\",\r\n      ticketmasterError: \"\",\r\n    },\r\n  });\r\n  const router: NextRouter = useRouter();\r\n\r\n  const urlStart: string =\r\n    process.env.NODE_ENV !== \"production\"\r\n      ? \"http://localhost:3000\"\r\n      : \"https://sekndapp.com\";\r\n\r\n  const setSearchParameters: () => { [key: string]: any } | null = () => {\r\n    const { query } = router;\r\n    if (!query.queried) return null;\r\n    if (query.searchType) return query;\r\n\r\n    const checkURLIsString: string = query.queried.toString();\r\n    const paramValueArray: string[] = checkURLIsString.split(\"+\");\r\n\r\n    const SearchParams: SearchParams = {};\r\n\r\n    paramValueArray.forEach((param) => {\r\n      const indexOfEqual: number = param.search(\"=\");\r\n      if (indexOfEqual === -1) return;\r\n      else {\r\n        const paramKey: string = param.substring(0, indexOfEqual);\r\n        const paramValue: string = param.substring(indexOfEqual + 1);\r\n        SearchParams[paramKey] = paramValue;\r\n      }\r\n    });\r\n    return SearchParams;\r\n  };\r\n\r\n  const {\r\n    data: yelpPlaces,\r\n    error: yelpPlacesError,\r\n    isValidating: yelpPlacesLoading,\r\n  }: responseInterface<APIResponse, string> = useSWR(\r\n    (): string | null => {\r\n      if (!setSearchParameters()) return null;\r\n      return setSearchParameters().searchType !== \"EVENTS\"\r\n        ? `${urlStart}/api/yelpBusinessesAPI`\r\n        : null;\r\n    },\r\n    async (url) => {\r\n      const { location, radius, placeType } = setSearchParameters();\r\n      try {\r\n        const response: Response = await fetch(url, {\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            location,\r\n            radius: parseInt(radius),\r\n            term: placeType,\r\n          }),\r\n        });\r\n\r\n        const responseJSON = await response.json();\r\n\r\n        const {\r\n          businesses,\r\n        }: { businesses: { [key: string]: any }[] } = responseJSON;\r\n        businesses.forEach(\r\n          (business) => (\r\n            (business[\"type\"] = \"place\"),\r\n            (business[\"source\"] = \"yelp\"),\r\n            (business[\"inParts\"] = false)\r\n          )\r\n        );\r\n\r\n        return businesses;\r\n      } catch (err) {\r\n        return err.message;\r\n      }\r\n    }\r\n  );\r\n\r\n  const {\r\n    data: yelpEvents,\r\n    error: yelpEventsError,\r\n    isValidating: yelpEventsLoading,\r\n  }: responseInterface<APIResponse, string> = useSWR(\r\n    (): string | null => {\r\n      if (!setSearchParameters()) return null;\r\n      return setSearchParameters().searchType !== \"PLACES\"\r\n        ? `${urlStart}/api/yelpEventsAPI`\r\n        : null;\r\n    },\r\n    async (url) => {\r\n      const {\r\n        location,\r\n        radius,\r\n        unixStartDate,\r\n        unixEndDate,\r\n      } = setSearchParameters();\r\n      try {\r\n        const response: Response = await fetch(url, {\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            location,\r\n            radius: parseInt(radius),\r\n            start_date: parseInt(unixStartDate),\r\n            end_date: parseInt(unixEndDate),\r\n          }),\r\n        });\r\n\r\n        const responseJSON = await response.json();\r\n\r\n        const { events }: { events: { [key: string]: any }[] } = responseJSON;\r\n        events.forEach(\r\n          (event) => (\r\n            (event[\"type\"] = \"event\"),\r\n            (event[\"source\"] = \"yelp\"),\r\n            (event[\"inParts\"] = false)\r\n          )\r\n        );\r\n        return events;\r\n      } catch (err) {\r\n        return err.message;\r\n      }\r\n    }\r\n  );\r\n\r\n  const {\r\n    data: ticketmaster,\r\n    error: ticketmasterError,\r\n    isValidating: ticketmasterLoading,\r\n  }: responseInterface<APIResponse, string> = useSWR(\r\n    (): string | null => {\r\n      if (!setSearchParameters()) return null;\r\n      return setSearchParameters().searchType !== \"PLACES\"\r\n        ? `${urlStart}/api/ticketmasterAPI`\r\n        : null;\r\n    },\r\n    async (url) => {\r\n      const {\r\n        location,\r\n        radius,\r\n        startFormatted,\r\n        endFormatted,\r\n      } = setSearchParameters();\r\n      try {\r\n        const response: Response = await fetch(url, {\r\n          headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            location,\r\n            radius: Math.floor(parseInt(radius) * 0.001).toString(),\r\n            startDateTime: startFormatted,\r\n            endDateTime: endFormatted,\r\n          }),\r\n        });\r\n\r\n        const responseJSON = await response.json();\r\n        const {\r\n          _embedded: { events },\r\n        }: { _embedded: { events: { [key: string]: any }[] } } = responseJSON;\r\n\r\n        events.forEach(\r\n          (event) => (\r\n            (event[\"source\"] = \"ticketmaster\"),\r\n            (event[\"type\"] = \"event\"),\r\n            (event[\"inParts\"] = false)\r\n          )\r\n        );\r\n\r\n        return events;\r\n      } catch (err) {\r\n        return err.message;\r\n      }\r\n    }\r\n  );\r\n\r\n  const checkYelpPlacesArray: Results[\"items\"] | [] = Array.isArray(yelpPlaces)\r\n    ? yelpPlaces\r\n    : [];\r\n  const checkYelpEventsArray: Results[\"items\"] | [] = Array.isArray(yelpEvents)\r\n    ? yelpEvents\r\n    : [];\r\n  const checkTicketMasterArray: Results[\"items\"] | [] = Array.isArray(\r\n    ticketmaster\r\n  )\r\n    ? ticketmaster\r\n    : [];\r\n\r\n  if (!setSearchParameters()) return <QueryDisplay></QueryDisplay>;\r\n\r\n  switch (setSearchParameters().searchType) {\r\n    case \"ALL\":\r\n      if (!yelpPlacesLoading && !yelpEventsLoading && !ticketmasterLoading) {\r\n        setState({ loading: false });\r\n        setResults({\r\n          items: [\r\n            ...checkYelpPlacesArray,\r\n            ...checkYelpEventsArray,\r\n            ...checkTicketMasterArray,\r\n          ],\r\n          errors: {\r\n            yelpPlacesError,\r\n            yelpEventsError,\r\n            ticketmasterError,\r\n          },\r\n        });\r\n      }\r\n    case \"PLACES\":\r\n      if (!yelpPlacesLoading) {\r\n        setState({ loading: false });\r\n        setResults({\r\n          items: [...checkYelpPlacesArray],\r\n          errors: {\r\n            yelpPlacesError,\r\n            yelpEventsError,\r\n            ticketmasterError,\r\n          },\r\n        });\r\n      }\r\n    case \"EVENTS\":\r\n      if (!ticketmasterLoading && !yelpEventsLoading) {\r\n        setState({ loading: false });\r\n        setResults({\r\n          items: [...checkYelpEventsArray, ...checkTicketMasterArray],\r\n          errors: {\r\n            yelpEventsError,\r\n            ticketmasterError,\r\n          },\r\n        });\r\n      }\r\n  }\r\n  return (\r\n    <QueryDisplay\r\n      results={results}\r\n      loading={state.loading}\r\n      searchType={setSearchParameters().searchType}\r\n    ></QueryDisplay>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}